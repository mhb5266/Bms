;//-----------------------------------------------------------------------------
;// Copyright:      RAD Electronic Co. LTD,
;// Author:         jaruwit supa, Base on FontEditor written by H. Reddmann
;//								 Modified by Sh. Nourbakhsh Rad for Persian and Arabic font
;//								 and fixed some errors
;// Remarks:
;// known Problems: none
;// Version:        3.3.0
;// Description:    Font Library
;//-----------------------------------------------------------------------------
;
;#include "Font.h"
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x80
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x70
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x60
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x70
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#if (PersianSupport ==1)
;	#include "PE_Map.h"
;#endif
;
;
;const unsigned char 	   *FontPointer; 									// Font	Pointer
;
;
;unsigned char 						rot 						= 0;					// Rot 0=0°, 1=90°
;unsigned char 						Reverse					= 0;					// Reverse text direction on the display
;unsigned char							Horizontal			=	1;					// 1: Portrait - 240x320 ,   2: Landscape - 320x240

	.DSEG
;
;unsigned short 						FgColor 				= BLACK;			// Text fg color, 5-6-5 RGB
;unsigned short 						BkColor 				= WHITE;			// Text bk color, 5-6-5 RGB
;unsigned char 						FontFixed				= 0;					// Text type 0=Proportional , 1=Fixed
;unsigned char							NonTransparence = 0;					// Transparent 0=No, 1=Yes
;
;unsigned short 						fontSize;											// size of current font
;unsigned char 						firstchar;										// first character noumber of current font
;unsigned char 						lastchar;											// last character noumber of current font
;unsigned char 						charwidth;										// current character width register
;
;unsigned char							FontWidth;										// max width of font
;unsigned char							FontHeight;										// max height of font
;unsigned char 						FontXScale 			= 1;					// X size of font
;unsigned char 						FontYScale 			= 1;					// Y size of font
;
;unsigned char 						FontSpaceX 			= 1;					// space between char
;unsigned char 						FontSpaceY			= 0;					// space between lines
;
;unsigned int 							cursorX 				= 0;					// x position
;unsigned int 							cursorY 				= 0;					// y position
;
;#if (PersianSupport ==1)
;	Lt_Mode									peLETTER				= E_LETTER;		// English or Persian letter
;#endif
;
;unsigned char 						prevLet 				= 0xFF;				// previous persian character register
;unsigned char	 						nextLet 				= 0xFF; 			// next persian character register
;
;
;//*************************************************
;//******************* Functions *******************
;//*************************************************
;
;
;void PutCharEN(unsigned char c)
; 0002 003C {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0002 003D 	unsigned char 			byte 					= 0;
; 0002 003E 	unsigned char 			bitoffset 		= 0;
; 0002 003F 	unsigned char 			maske 				= 0;
; 0002 0040 	unsigned short 			bcounter 			= 0;
; 0002 0041 	unsigned short 			bitsbischar 	= 0;
; 0002 0042 	unsigned short 			bytesbischar	= 0;
; 0002 0043 	unsigned short 			xPos, yPos;
; 0002 0044 
; 0002 0045 	unsigned char 			Ccounter 			= 0;
; 0002 0046 	unsigned char 			xc						= 0;
; 0002 0047 	unsigned char 			yc						= 0;
; 0002 0048 	unsigned char 			sx 						= 0;
; 0002 0049 	unsigned char 			sy 						= 0;
; 0002 004A 
; 0002 004B    // get current character width
; 0002 004C 	charwidth	= pgm_read_byte(&FontPointer[(unsigned int)(c)+FONT_HEADER_SIZE-firstchar]);
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
;	c -> Y+18
;	byte -> R17
;	bitoffset -> R16
;	maske -> R19
;	bcounter -> R20,R21
;	bitsbischar -> Y+16
;	bytesbischar -> Y+14
;	xPos -> Y+12
;	yPos -> Y+10
;	Ccounter -> R18
;	xc -> Y+9
;	yc -> Y+8
;	sx -> Y+7
;	sy -> Y+6
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
; 0002 004D 
; 0002 004E 	// line feed, goto next line
; 0002 004F 	if(c == '\n')
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
; 0002 0050 	{
; 0002 0051 		cursorX = 0;
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
; 0002 0052 		cursorY += (unsigned int)(FontHeight +FontSpaceY)*FontYScale;
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
; 0002 0053 
; 0002 0054 		return;
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
; 0002 0055 	}
; 0002 0056 
; 0002 0057 	// character out of range.
; 0002 0058   if( (c < firstchar) || (c > lastchar) || (fontSize == 0))
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
; 0002 0059   	return;
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
; 0002 005A 
; 0002 005B 	// character is not in list.
; 0002 005C 	if (charwidth == 0)
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
; 0002 005D 		return;
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
; 0002 005E 
; 0002 005F 	// sara thai font. line remain at last position
; 0002 0060 	if(FontFixed)
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
; 0002 0061 		charwidth = FontWidth;
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
; 0002 0062 	else
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
; 0002 0063 	{
; 0002 0064 		//english special fonts!
; 0002 0065 		if (((c >= 0xd4) && (c <= 0xda)) ||
; 0002 0066 	  	  ((c >= 0xe7) && (c <= 0xec)) ||
; 0002 0067 				 (c == 0xd1))
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
; 0002 0068 		{
; 0002 0069 			cursorX = cursorX - (unsigned int)charwidth * FontXScale;
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
; 0002 006A 		}
; 0002 006B 	}
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
; 0002 006C 
; 0002 006D 	// fixed width for digit
; 0002 006E  	if((c >= '0') && (c <= '9'))		// english : 0 to 9
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
; 0002 006F 		charwidth = pgm_read_byte(&FontPointer[(unsigned int)(FONT_HEADER_SIZE)+'0'-firstchar]);		//width reference = ZERO
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
; 0002 0070 
; 0002 0071 	// line adjust
; 0002 0072 	if(((int)cursorX + charwidth * FontXScale) > GetMaxX())
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
; 0002 0073 	{
; 0002 0074 		cursorY = cursorY + (unsigned int)FontHeight * FontYScale;
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
; 0002 0075 		cursorX = 0;
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
; 0002 0076 	}
; 0002 0077 
; 0002 0078 	// calculate current character position on the table
; 0002 0079 	for(Ccounter = 0; Ccounter < c-firstchar; Ccounter++)
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
;PCODE: $000000A7 VOL: 0
;PCODE: $000000A8 VOL: 0
;PCODE: $000000A9 VOL: 0
;PCODE: $000000AA VOL: 0
;PCODE: $000000AB VOL: 0
;PCODE: $000000AC VOL: 0
;PCODE: $000000AD VOL: 0
; 0002 007A 		bitsbischar += (pgm_read_byte(&FontPointer[(unsigned int)(Ccounter)+FONT_HEADER_SIZE]));	//c0_width +...+ cn_width
;PCODE: $000000AE VOL: 0
;PCODE: $000000AF VOL: 0
;PCODE: $000000B0 VOL: 0
;PCODE: $000000B1 VOL: 0
;PCODE: $000000B2 VOL: 0
;PCODE: $000000B3 VOL: 0
;PCODE: $000000B4 VOL: 0
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 0
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 0
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
;PCODE: $000000BB VOL: 0
; 0002 007D bitsbischar 		*= FontHeight;
;PCODE: $000000BC VOL: 0
;PCODE: $000000BD VOL: 0
;PCODE: $000000BE VOL: 0
;PCODE: $000000BF VOL: 0
;PCODE: $000000C0 VOL: 0
; 0002 007E 	bitsbischar 		+= (((unsigned short)(lastchar)-firstchar)+FONT_HEADER_SIZE)*8;		//plus font headers
;PCODE: $000000C1 VOL: 0
;PCODE: $000000C2 VOL: 0
;PCODE: $000000C3 VOL: 0
;PCODE: $000000C4 VOL: 0
;PCODE: $000000C5 VOL: 0
;PCODE: $000000C6 VOL: 0
;PCODE: $000000C7 VOL: 0
;PCODE: $000000C8 VOL: 0
;PCODE: $000000C9 VOL: 0
;PCODE: $000000CA VOL: 0
;PCODE: $000000CB VOL: 0
; 0002 007F 	bytesbischar 		 = bitsbischar/8;																//
;PCODE: $000000CC VOL: 0
;PCODE: $000000CD VOL: 0
;PCODE: $000000CE VOL: 0
; 0002 0080 	bitoffset 			 = bitsbischar % 8;															//
;PCODE: $000000CF VOL: 0
;PCODE: $000000D0 VOL: 0
;PCODE: $000000D1 VOL: 0
; 0002 0081 	maske						 = bitoffset % 8;																//
;PCODE: $000000D2 VOL: 0
;PCODE: $000000D3 VOL: 0
;PCODE: $000000D4 VOL: 0
;PCODE: $000000D5 VOL: 0
;PCODE: $000000D6 VOL: 0
; 0002 0082 
; 0002 0083 	// draw character
; 0002 0084 	for(xc = 0; xc < charwidth; xc++)
;PCODE: $000000D7 VOL: 0
;PCODE: $000000D8 VOL: 0
;PCODE: $000000D9 VOL: 0
;PCODE: $000000DA VOL: 0
;PCODE: $000000DB VOL: 0
;PCODE: $000000DC VOL: 0
;PCODE: $000000DD VOL: 0
;PCODE: $000000DE VOL: 0
;PCODE: $000000DF VOL: 0
;PCODE: $000000E0 VOL: 0
; 0002 0085 	{
; 0002 0086 		for(yc = 0; yc < FontHeight; yc++)
;PCODE: $000000E1 VOL: 0
;PCODE: $000000E2 VOL: 0
;PCODE: $000000E3 VOL: 0
;PCODE: $000000E4 VOL: 0
;PCODE: $000000E5 VOL: 0
;PCODE: $000000E6 VOL: 0
;PCODE: $000000E7 VOL: 0
;PCODE: $000000E8 VOL: 0
;PCODE: $000000E9 VOL: 0
;PCODE: $000000EA VOL: 0
;PCODE: $000000EB VOL: 0
; 0002 0087 		{
; 0002 0088 			if(maske > 7)
;PCODE: $000000EC VOL: 0
;PCODE: $000000ED VOL: 0
;PCODE: $000000EE VOL: 0
; 0002 0089 			{
; 0002 008A 				maske = 0;
;PCODE: $000000EF VOL: 0
;PCODE: $000000F0 VOL: 0
; 0002 008B 				bcounter += 1;
;PCODE: $000000F1 VOL: 0
;PCODE: $000000F2 VOL: 0
; 0002 008C 			}
; 0002 008D 			byte = pgm_read_byte(&FontPointer[bytesbischar + bcounter + 1]);
;PCODE: $000000F3 VOL: 0
;PCODE: $000000F4 VOL: 0
;PCODE: $000000F5 VOL: 0
;PCODE: $000000F6 VOL: 0
;PCODE: $000000F7 VOL: 0
;PCODE: $000000F8 VOL: 0
;PCODE: $000000F9 VOL: 0
; 0002 008E 
; 0002 008F 			xPos = (unsigned short)xc*FontXScale + cursorX;
;PCODE: $000000FA VOL: 0
;PCODE: $000000FB VOL: 0
;PCODE: $000000FC VOL: 0
;PCODE: $000000FD VOL: 0
;PCODE: $000000FE VOL: 0
;PCODE: $000000FF VOL: 0
;PCODE: $00000100 VOL: 0
;PCODE: $00000101 VOL: 0
; 0002 0090 
; 0002 0091 			if(Horizontal)	//128x64
;PCODE: $00000102 VOL: 0
;PCODE: $00000103 VOL: 0
;PCODE: $00000104 VOL: 0
; 0002 0092 			{
; 0002 0093 				if(Reverse)
;PCODE: $00000105 VOL: 0
;PCODE: $00000106 VOL: 0
;PCODE: $00000107 VOL: 0
; 0002 0094 					yPos = (((unsigned short)FontHeight-yc)*FontYScale + cursorY);
;PCODE: $00000108 VOL: 0
;PCODE: $00000109 VOL: 0
;PCODE: $0000010A VOL: 0
;PCODE: $0000010B VOL: 0
;PCODE: $0000010C VOL: 0
;PCODE: $0000010D VOL: 0
;PCODE: $0000010E VOL: 0
;PCODE: $0000010F VOL: 0
;PCODE: $00000110 VOL: 0
;PCODE: $00000111 VOL: 0
;PCODE: $00000112 VOL: 0
; 0002 0095 				else
;PCODE: $00000113 VOL: 0
;PCODE: $00000114 VOL: 0
; 0002 0096 					yPos = (((unsigned short)yc)*FontYScale + cursorY);
;PCODE: $00000115 VOL: 0
;PCODE: $00000116 VOL: 0
;PCODE: $00000117 VOL: 0
;PCODE: $00000118 VOL: 0
;PCODE: $00000119 VOL: 0
;PCODE: $0000011A VOL: 0
;PCODE: $0000011B VOL: 0
;PCODE: $0000011C VOL: 0
; 0002 0097 			}
;PCODE: $0000011D VOL: 0
; 0002 0098 			else						//64x128
;PCODE: $0000011E VOL: 0
;PCODE: $0000011F VOL: 0
; 0002 0099 			{
; 0002 009A 				if(Reverse)
;PCODE: $00000120 VOL: 0
;PCODE: $00000121 VOL: 0
;PCODE: $00000122 VOL: 0
; 0002 009B 					yPos = (((unsigned short)FontHeight-yc)*FontYScale + cursorY);
;PCODE: $00000123 VOL: 0
;PCODE: $00000124 VOL: 0
;PCODE: $00000125 VOL: 0
;PCODE: $00000126 VOL: 0
;PCODE: $00000127 VOL: 0
;PCODE: $00000128 VOL: 0
;PCODE: $00000129 VOL: 0
;PCODE: $0000012A VOL: 0
;PCODE: $0000012B VOL: 0
;PCODE: $0000012C VOL: 0
;PCODE: $0000012D VOL: 0
; 0002 009C 				else
;PCODE: $0000012E VOL: 0
;PCODE: $0000012F VOL: 0
; 0002 009D 					yPos = (((unsigned short)yc)*FontYScale + cursorY);
;PCODE: $00000130 VOL: 0
;PCODE: $00000131 VOL: 0
;PCODE: $00000132 VOL: 0
;PCODE: $00000133 VOL: 0
;PCODE: $00000134 VOL: 0
;PCODE: $00000135 VOL: 0
;PCODE: $00000136 VOL: 0
;PCODE: $00000137 VOL: 0
; 0002 009E 
; 0002 009F 			}	//Horizontal
;PCODE: $00000138 VOL: 0
;PCODE: $00000139 VOL: 0
; 0002 00A0 
; 0002 00A1 			for(sx = 0; sx < FontXScale; sx++)
;PCODE: $0000013A VOL: 0
;PCODE: $0000013B VOL: 0
;PCODE: $0000013C VOL: 0
;PCODE: $0000013D VOL: 0
;PCODE: $0000013E VOL: 0
;PCODE: $0000013F VOL: 0
;PCODE: $00000140 VOL: 0
;PCODE: $00000141 VOL: 0
;PCODE: $00000142 VOL: 0
;PCODE: $00000143 VOL: 0
;PCODE: $00000144 VOL: 0
; 0002 00A2 			{
; 0002 00A3 				for(sy = 0; sy < FontYScale; sy++)
;PCODE: $00000145 VOL: 0
;PCODE: $00000146 VOL: 0
;PCODE: $00000147 VOL: 0
;PCODE: $00000148 VOL: 0
;PCODE: $00000149 VOL: 0
;PCODE: $0000014A VOL: 0
;PCODE: $0000014B VOL: 0
;PCODE: $0000014C VOL: 0
;PCODE: $0000014D VOL: 0
;PCODE: $0000014E VOL: 0
;PCODE: $0000014F VOL: 0
; 0002 00A4 				{
; 0002 00A5 					if(bit_is_set(byte, maske))
;PCODE: $00000150 VOL: 0
;PCODE: $00000151 VOL: 0
;PCODE: $00000152 VOL: 0
;PCODE: $00000153 VOL: 0
;PCODE: $00000154 VOL: 0
;PCODE: $00000155 VOL: 0
;PCODE: $00000156 VOL: 0
;PCODE: $00000157 VOL: 0
; 0002 00A6 					{
; 0002 00A7 						if(rot)		PutPixel(yPos+sy, xPos+sx, FgColor);
;PCODE: $00000158 VOL: 0
;PCODE: $00000159 VOL: 0
;PCODE: $0000015A VOL: 0
;PCODE: $0000015B VOL: 0
;PCODE: $0000015C VOL: 0
;PCODE: $0000015D VOL: 0
;PCODE: $0000015E VOL: 0
;PCODE: $0000015F VOL: 0
;PCODE: $00000160 VOL: 0
;PCODE: $00000161 VOL: 0
;PCODE: $00000162 VOL: 0
;PCODE: $00000163 VOL: 0
;PCODE: $00000164 VOL: 0
; 0002 00A8 						else			PutPixel(xPos+sx, yPos+sy, FgColor);
;PCODE: $00000165 VOL: 0
;PCODE: $00000166 VOL: 0
;PCODE: $00000167 VOL: 0
;PCODE: $00000168 VOL: 0
;PCODE: $00000169 VOL: 0
;PCODE: $0000016A VOL: 0
;PCODE: $0000016B VOL: 0
;PCODE: $0000016C VOL: 0
;PCODE: $0000016D VOL: 0
;PCODE: $0000016E VOL: 0
;PCODE: $0000016F VOL: 0
;PCODE: $00000170 VOL: 0
; 0002 00A9 					}
;PCODE: $00000171 VOL: 0
; 0002 00AA 					else
;PCODE: $00000172 VOL: 0
;PCODE: $00000173 VOL: 0
; 0002 00AB 					{
; 0002 00AC 						if(NonTransparence)
;PCODE: $00000174 VOL: 0
;PCODE: $00000175 VOL: 0
;PCODE: $00000176 VOL: 0
; 0002 00AD 						{
; 0002 00AE 							if(rot)		PutPixel(yPos+sy, xPos+sx, BkColor);
;PCODE: $00000177 VOL: 0
;PCODE: $00000178 VOL: 0
;PCODE: $00000179 VOL: 0
;PCODE: $0000017A VOL: 0
;PCODE: $0000017B VOL: 0
;PCODE: $0000017C VOL: 0
;PCODE: $0000017D VOL: 0
;PCODE: $0000017E VOL: 0
;PCODE: $0000017F VOL: 0
;PCODE: $00000180 VOL: 0
;PCODE: $00000181 VOL: 0
;PCODE: $00000182 VOL: 0
;PCODE: $00000183 VOL: 0
; 0002 00AF 							else			PutPixel(xPos+sx, yPos+sy, BkColor);
;PCODE: $00000184 VOL: 0
;PCODE: $00000185 VOL: 0
;PCODE: $00000186 VOL: 0
;PCODE: $00000187 VOL: 0
;PCODE: $00000188 VOL: 0
;PCODE: $00000189 VOL: 0
;PCODE: $0000018A VOL: 0
;PCODE: $0000018B VOL: 0
;PCODE: $0000018C VOL: 0
;PCODE: $0000018D VOL: 0
;PCODE: $0000018E VOL: 0
;PCODE: $0000018F VOL: 0
; 0002 00B0 						}
;PCODE: $00000190 VOL: 0
; 0002 00B1 					}
;PCODE: $00000191 VOL: 0
;PCODE: $00000192 VOL: 0
; 0002 00B2 				};//for sy
;PCODE: $00000193 VOL: 0
;PCODE: $00000194 VOL: 0
;PCODE: $00000195 VOL: 0
;PCODE: $00000196 VOL: 0
;PCODE: $00000197 VOL: 0
;PCODE: $00000198 VOL: 0
; 0002 00B3 			};//for sx
;PCODE: $00000199 VOL: 0
;PCODE: $0000019A VOL: 0
;PCODE: $0000019B VOL: 0
;PCODE: $0000019C VOL: 0
;PCODE: $0000019D VOL: 0
;PCODE: $0000019E VOL: 0
; 0002 00B4 
; 0002 00B5 			maske++;
;PCODE: $0000019F VOL: 0
;PCODE: $000001A0 VOL: 0
; 0002 00B6 		};//for yc
;PCODE: $000001A1 VOL: 0
;PCODE: $000001A2 VOL: 0
;PCODE: $000001A3 VOL: 0
;PCODE: $000001A4 VOL: 0
;PCODE: $000001A5 VOL: 0
;PCODE: $000001A6 VOL: 0
; 0002 00B7 	};//for xc
;PCODE: $000001A7 VOL: 0
;PCODE: $000001A8 VOL: 0
;PCODE: $000001A9 VOL: 0
;PCODE: $000001AA VOL: 0
;PCODE: $000001AB VOL: 0
;PCODE: $000001AC VOL: 0
; 0002 00B8 
; 0002 00B9 	// adjust cursor to next position - english
; 0002 00BA 	cursorX	+= (unsigned int)charwidth * FontXScale + FontSpaceX;
;PCODE: $000001AD VOL: 0
;PCODE: $000001AE VOL: 0
;PCODE: $000001AF VOL: 0
;PCODE: $000001B0 VOL: 0
;PCODE: $000001B1 VOL: 0
;PCODE: $000001B2 VOL: 0
;PCODE: $000001B3 VOL: 0
;PCODE: $000001B4 VOL: 0
;PCODE: $000001B5 VOL: 0
;PCODE: $000001B6 VOL: 0
;PCODE: $000001B7 VOL: 0
;PCODE: $000001B8 VOL: 0
; 0002 00BB }	//*PutCharEN
;PCODE: $000001B9 VOL: 0
;PCODE: $000001BA VOL: 0
;PCODE: $000001BB VOL: 0
;PCODE: $000001BC VOL: 0
;
;void PutCharPE(unsigned char c)
; 0002 00BE {
;PCODE: $000001BD VOL: 0
;PCODE: $000001BE VOL: 0
; 0002 00BF 	#if (PersianSupport ==1)
; 0002 00C0 		unsigned char 			byte 					= 0;
; 0002 00C1 		unsigned char 			bitoffset 		= 0;
; 0002 00C2 		unsigned char 			maske 				= 0;
; 0002 00C3 		unsigned short 			bcounter 			= 0;
; 0002 00C4 		unsigned short 			bitsbischar 	= 0;
; 0002 00C5 		unsigned short 			bytesbischar	= 0;
; 0002 00C6 		unsigned short 			xPos, yPos;
; 0002 00C7 
; 0002 00C8 		unsigned char 			Ccounter 			= 0;
; 0002 00C9 		unsigned char 			xc 						= 0;
; 0002 00CA 		unsigned char 			yc 						= 0;
; 0002 00CB 		unsigned char 			sx 						= 0;
; 0002 00CC 		unsigned char 			sy 						= 0;
; 0002 00CD 
; 0002 00CE 		// get current character width
; 0002 00CF 		charwidth	= pgm_read_byte(&FontPointer[(unsigned int)(c)+FONT_HEADER_SIZE-firstchar]);
;PCODE: $000001BF VOL: 0
;PCODE: $000001C0 VOL: 0
;PCODE: $000001C1 VOL: 0
;PCODE: $000001C2 VOL: 0
;PCODE: $000001C3 VOL: 0
;PCODE: $000001C4 VOL: 0
;PCODE: $000001C5 VOL: 0
;	c -> Y+18
;	byte -> R17
;	bitoffset -> R16
;	maske -> R19
;	bcounter -> R20,R21
;	bitsbischar -> Y+16
;	bytesbischar -> Y+14
;	xPos -> Y+12
;	yPos -> Y+10
;	Ccounter -> R18
;	xc -> Y+9
;	yc -> Y+8
;	sx -> Y+7
;	sy -> Y+6
;PCODE: $000001C6 VOL: 0
;PCODE: $000001C7 VOL: 0
;PCODE: $000001C8 VOL: 0
;PCODE: $000001C9 VOL: 0
;PCODE: $000001CA VOL: 0
;PCODE: $000001CB VOL: 0
;PCODE: $000001CC VOL: 0
;PCODE: $000001CD VOL: 0
;PCODE: $000001CE VOL: 0
;PCODE: $000001CF VOL: 0
;PCODE: $000001D0 VOL: 0
;PCODE: $000001D1 VOL: 0
;PCODE: $000001D2 VOL: 0
;PCODE: $000001D3 VOL: 0
;PCODE: $000001D4 VOL: 0
;PCODE: $000001D5 VOL: 0
;PCODE: $000001D6 VOL: 0
;PCODE: $000001D7 VOL: 0
;PCODE: $000001D8 VOL: 0
;PCODE: $000001D9 VOL: 0
; 0002 00D0 
; 0002 00D1 		// line feed, goto next line
; 0002 00D2 		if(c == '\n')
;PCODE: $000001DA VOL: 0
;PCODE: $000001DB VOL: 0
;PCODE: $000001DC VOL: 0
; 0002 00D3 		{
; 0002 00D4 			cursorX = GetMaxX();
;PCODE: $000001DD VOL: 0
;PCODE: $000001DE VOL: 0
; 0002 00D5 			cursorY += (unsigned int)(FontHeight +FontSpaceY)* FontYScale;
;PCODE: $000001DF VOL: 0
;PCODE: $000001E0 VOL: 0
;PCODE: $000001E1 VOL: 0
;PCODE: $000001E2 VOL: 0
;PCODE: $000001E3 VOL: 0
;PCODE: $000001E4 VOL: 0
;PCODE: $000001E5 VOL: 0
;PCODE: $000001E6 VOL: 0
;PCODE: $000001E7 VOL: 0
;PCODE: $000001E8 VOL: 0
;PCODE: $000001E9 VOL: 0
; 0002 00D6 
; 0002 00D7 			return;
;PCODE: $000001EA VOL: 0
;PCODE: $000001EB VOL: 0
;PCODE: $000001EC VOL: 0
; 0002 00D8 		}
; 0002 00D9 
; 0002 00DA 		// character out of range.
; 0002 00DB 	  if( (c < firstchar) || (c > lastchar) || (fontSize == 0))
;PCODE: $000001ED VOL: 0
;PCODE: $000001EE VOL: 0
;PCODE: $000001EF VOL: 0
;PCODE: $000001F0 VOL: 0
;PCODE: $000001F1 VOL: 0
;PCODE: $000001F2 VOL: 0
;PCODE: $000001F3 VOL: 0
;PCODE: $000001F4 VOL: 0
;PCODE: $000001F5 VOL: 0
;PCODE: $000001F6 VOL: 0
;PCODE: $000001F7 VOL: 0
; 0002 00DC 	  	return;
;PCODE: $000001F8 VOL: 0
;PCODE: $000001F9 VOL: 0
;PCODE: $000001FA VOL: 0
; 0002 00DD 
; 0002 00DE 		// character is not in list.
; 0002 00DF 		if (charwidth == 0)
;PCODE: $000001FB VOL: 0
;PCODE: $000001FC VOL: 0
;PCODE: $000001FD VOL: 0
; 0002 00E0 			return;
;PCODE: $000001FE VOL: 0
;PCODE: $000001FF VOL: 0
;PCODE: $00000200 VOL: 0
; 0002 00E1 
; 0002 00E2 		// sara thai font. line remain at last position
; 0002 00E3 		if(FontFixed)
;PCODE: $00000201 VOL: 0
;PCODE: $00000202 VOL: 0
;PCODE: $00000203 VOL: 0
;PCODE: $00000204 VOL: 0
; 0002 00E4 			charwidth = FontWidth;
;PCODE: $00000205 VOL: 0
;PCODE: $00000206 VOL: 0
; 0002 00E5 
; 0002 00E6 		// line adjust
; 0002 00E7 		if(((int)cursorX - charwidth * FontXScale) < 0)
;PCODE: $00000207 VOL: 0
;PCODE: $00000208 VOL: 0
;PCODE: $00000209 VOL: 0
;PCODE: $0000020A VOL: 0
;PCODE: $0000020B VOL: 0
;PCODE: $0000020C VOL: 0
;PCODE: $0000020D VOL: 0
;PCODE: $0000020E VOL: 0
;PCODE: $0000020F VOL: 0
;PCODE: $00000210 VOL: 0
; 0002 00E8 	  {
; 0002 00E9 			cursorY = cursorY   + (unsigned int)FontHeight * FontYScale;
;PCODE: $00000211 VOL: 0
;PCODE: $00000212 VOL: 0
;PCODE: $00000213 VOL: 0
;PCODE: $00000214 VOL: 0
;PCODE: $00000215 VOL: 0
;PCODE: $00000216 VOL: 0
;PCODE: $00000217 VOL: 0
;PCODE: $00000218 VOL: 0
; 0002 00EA 			cursorX = GetMaxX() - (unsigned int)charwidth * FontXScale;
;PCODE: $00000219 VOL: 0
;PCODE: $0000021A VOL: 0
;PCODE: $0000021B VOL: 0
;PCODE: $0000021C VOL: 0
;PCODE: $0000021D VOL: 0
;PCODE: $0000021E VOL: 0
;PCODE: $0000021F VOL: 0
;PCODE: $00000220 VOL: 0
; 0002 00EB 		}
; 0002 00EC 
; 0002 00ED 		// adjust cursor to current position - persian
; 0002 00EE 		cursorX	-= (unsigned int)charwidth * FontXScale + FontSpaceX;
;PCODE: $00000221 VOL: 0
;PCODE: $00000222 VOL: 0
;PCODE: $00000223 VOL: 0
;PCODE: $00000224 VOL: 0
;PCODE: $00000225 VOL: 0
;PCODE: $00000226 VOL: 0
;PCODE: $00000227 VOL: 0
;PCODE: $00000228 VOL: 0
;PCODE: $00000229 VOL: 0
;PCODE: $0000022A VOL: 0
;PCODE: $0000022B VOL: 0
;PCODE: $0000022C VOL: 0
;PCODE: $0000022D VOL: 0
; 0002 00EF 
; 0002 00F0 		// calculate current character position on the table
; 0002 00F1 		for(Ccounter = 0; Ccounter < c-firstchar; Ccounter++)
;PCODE: $0000022E VOL: 0
;PCODE: $0000022F VOL: 0
;PCODE: $00000230 VOL: 0
;PCODE: $00000231 VOL: 0
;PCODE: $00000232 VOL: 0
;PCODE: $00000233 VOL: 0
;PCODE: $00000234 VOL: 0
;PCODE: $00000235 VOL: 0
;PCODE: $00000236 VOL: 0
;PCODE: $00000237 VOL: 0
;PCODE: $00000238 VOL: 0
;PCODE: $00000239 VOL: 0
;PCODE: $0000023A VOL: 0
;PCODE: $0000023B VOL: 0
;PCODE: $0000023C VOL: 0
;PCODE: $0000023D VOL: 0
; 0002 00F2 			bitsbischar += (pgm_read_byte(&FontPointer[(unsigned int)(Ccounter)+FONT_HEADER_SIZE]));	//c0_width +...+ cn_width
;PCODE: $0000023E VOL: 0
;PCODE: $0000023F VOL: 0
;PCODE: $00000240 VOL: 0
;PCODE: $00000241 VOL: 0
;PCODE: $00000242 VOL: 0
;PCODE: $00000243 VOL: 0
;PCODE: $00000244 VOL: 0
;PCODE: $00000245 VOL: 0
;PCODE: $00000246 VOL: 0
;PCODE: $00000247 VOL: 0
;PCODE: $00000248 VOL: 0
;PCODE: $00000249 VOL: 0
;PCODE: $0000024A VOL: 0
;PCODE: $0000024B VOL: 0
; 0002 00F5 bitsbischar 		*= FontHeight;
;PCODE: $0000024C VOL: 0
;PCODE: $0000024D VOL: 0
;PCODE: $0000024E VOL: 0
;PCODE: $0000024F VOL: 0
;PCODE: $00000250 VOL: 0
; 0002 00F6 		bitsbischar 		+= (((unsigned short)(lastchar)-firstchar)+FONT_HEADER_SIZE)*8;		//plus font headers
;PCODE: $00000251 VOL: 0
;PCODE: $00000252 VOL: 0
;PCODE: $00000253 VOL: 0
;PCODE: $00000254 VOL: 0
;PCODE: $00000255 VOL: 0
;PCODE: $00000256 VOL: 0
;PCODE: $00000257 VOL: 0
;PCODE: $00000258 VOL: 0
;PCODE: $00000259 VOL: 0
;PCODE: $0000025A VOL: 0
;PCODE: $0000025B VOL: 0
; 0002 00F7 		bytesbischar 		 = bitsbischar/8;									//
;PCODE: $0000025C VOL: 0
;PCODE: $0000025D VOL: 0
;PCODE: $0000025E VOL: 0
; 0002 00F8 		bitoffset 			 = bitsbischar % 8;								//
;PCODE: $0000025F VOL: 0
;PCODE: $00000260 VOL: 0
;PCODE: $00000261 VOL: 0
; 0002 00F9 		maske						 = bitoffset % 8;									//
;PCODE: $00000262 VOL: 0
;PCODE: $00000263 VOL: 0
;PCODE: $00000264 VOL: 0
;PCODE: $00000265 VOL: 0
;PCODE: $00000266 VOL: 0
; 0002 00FA 
; 0002 00FB 		// draw character
; 0002 00FC 		for(xc = 0; xc < charwidth; xc++)
;PCODE: $00000267 VOL: 0
;PCODE: $00000268 VOL: 0
;PCODE: $00000269 VOL: 0
;PCODE: $0000026A VOL: 0
;PCODE: $0000026B VOL: 0
;PCODE: $0000026C VOL: 0
;PCODE: $0000026D VOL: 0
;PCODE: $0000026E VOL: 0
;PCODE: $0000026F VOL: 0
;PCODE: $00000270 VOL: 0
; 0002 00FD 		{
; 0002 00FE 			for(yc = 0; yc < FontHeight; yc++)
;PCODE: $00000271 VOL: 0
;PCODE: $00000272 VOL: 0
;PCODE: $00000273 VOL: 0
;PCODE: $00000274 VOL: 0
;PCODE: $00000275 VOL: 0
;PCODE: $00000276 VOL: 0
;PCODE: $00000277 VOL: 0
;PCODE: $00000278 VOL: 0
;PCODE: $00000279 VOL: 0
;PCODE: $0000027A VOL: 0
;PCODE: $0000027B VOL: 0
; 0002 00FF 			{
; 0002 0100 				if(maske > 7)
;PCODE: $0000027C VOL: 0
;PCODE: $0000027D VOL: 0
;PCODE: $0000027E VOL: 0
; 0002 0101 				{
; 0002 0102 					maske = 0;
;PCODE: $0000027F VOL: 0
;PCODE: $00000280 VOL: 0
; 0002 0103 					bcounter+=1;
;PCODE: $00000281 VOL: 0
;PCODE: $00000282 VOL: 0
; 0002 0104 				}
; 0002 0105 				byte = pgm_read_byte(&FontPointer[bytesbischar + bcounter + 1]);
;PCODE: $00000283 VOL: 0
;PCODE: $00000284 VOL: 0
;PCODE: $00000285 VOL: 0
;PCODE: $00000286 VOL: 0
;PCODE: $00000287 VOL: 0
;PCODE: $00000288 VOL: 0
;PCODE: $00000289 VOL: 0
; 0002 0106 
; 0002 0107 				xPos = (unsigned short)xc*FontXScale + cursorX;
;PCODE: $0000028A VOL: 0
;PCODE: $0000028B VOL: 0
;PCODE: $0000028C VOL: 0
;PCODE: $0000028D VOL: 0
;PCODE: $0000028E VOL: 0
;PCODE: $0000028F VOL: 0
;PCODE: $00000290 VOL: 0
;PCODE: $00000291 VOL: 0
; 0002 0108 
; 0002 0109 				if(Horizontal)	//128x64
;PCODE: $00000292 VOL: 0
;PCODE: $00000293 VOL: 0
;PCODE: $00000294 VOL: 0
; 0002 010A 				{
; 0002 010B 					if(Reverse)
;PCODE: $00000295 VOL: 0
;PCODE: $00000296 VOL: 0
;PCODE: $00000297 VOL: 0
; 0002 010C 						yPos = (((unsigned short)FontHeight-yc)*FontYScale + cursorY);
;PCODE: $00000298 VOL: 0
;PCODE: $00000299 VOL: 0
;PCODE: $0000029A VOL: 0
;PCODE: $0000029B VOL: 0
;PCODE: $0000029C VOL: 0
;PCODE: $0000029D VOL: 0
;PCODE: $0000029E VOL: 0
;PCODE: $0000029F VOL: 0
;PCODE: $000002A0 VOL: 0
;PCODE: $000002A1 VOL: 0
;PCODE: $000002A2 VOL: 0
; 0002 010D 					else
;PCODE: $000002A3 VOL: 0
;PCODE: $000002A4 VOL: 0
; 0002 010E 						yPos = (((unsigned short)yc)*FontYScale + cursorY);
;PCODE: $000002A5 VOL: 0
;PCODE: $000002A6 VOL: 0
;PCODE: $000002A7 VOL: 0
;PCODE: $000002A8 VOL: 0
;PCODE: $000002A9 VOL: 0
;PCODE: $000002AA VOL: 0
;PCODE: $000002AB VOL: 0
;PCODE: $000002AC VOL: 0
; 0002 010F 				}
;PCODE: $000002AD VOL: 0
; 0002 0110 				else						//64x128
;PCODE: $000002AE VOL: 0
;PCODE: $000002AF VOL: 0
; 0002 0111 				{
; 0002 0112 					if(Reverse)
;PCODE: $000002B0 VOL: 0
;PCODE: $000002B1 VOL: 0
;PCODE: $000002B2 VOL: 0
; 0002 0113 						yPos = (((unsigned short)FontHeight-yc)*FontYScale + cursorY);
;PCODE: $000002B3 VOL: 0
;PCODE: $000002B4 VOL: 0
;PCODE: $000002B5 VOL: 0
;PCODE: $000002B6 VOL: 0
;PCODE: $000002B7 VOL: 0
;PCODE: $000002B8 VOL: 0
;PCODE: $000002B9 VOL: 0
;PCODE: $000002BA VOL: 0
;PCODE: $000002BB VOL: 0
;PCODE: $000002BC VOL: 0
;PCODE: $000002BD VOL: 0
; 0002 0114 					else
;PCODE: $000002BE VOL: 0
;PCODE: $000002BF VOL: 0
; 0002 0115 						yPos = (((unsigned short)yc)*FontYScale + cursorY);
;PCODE: $000002C0 VOL: 0
;PCODE: $000002C1 VOL: 0
;PCODE: $000002C2 VOL: 0
;PCODE: $000002C3 VOL: 0
;PCODE: $000002C4 VOL: 0
;PCODE: $000002C5 VOL: 0
;PCODE: $000002C6 VOL: 0
;PCODE: $000002C7 VOL: 0
; 0002 0116 
; 0002 0117 				}	//Horizontal
;PCODE: $000002C8 VOL: 0
;PCODE: $000002C9 VOL: 0
; 0002 0118 
; 0002 0119 				for(sx = 0; sx < FontXScale; sx++)
;PCODE: $000002CA VOL: 0
;PCODE: $000002CB VOL: 0
;PCODE: $000002CC VOL: 0
;PCODE: $000002CD VOL: 0
;PCODE: $000002CE VOL: 0
;PCODE: $000002CF VOL: 0
;PCODE: $000002D0 VOL: 0
;PCODE: $000002D1 VOL: 0
;PCODE: $000002D2 VOL: 0
;PCODE: $000002D3 VOL: 0
;PCODE: $000002D4 VOL: 0
; 0002 011A 				{
; 0002 011B 					for(sy = 0; sy < FontYScale; sy++)
;PCODE: $000002D5 VOL: 0
;PCODE: $000002D6 VOL: 0
;PCODE: $000002D7 VOL: 0
;PCODE: $000002D8 VOL: 0
;PCODE: $000002D9 VOL: 0
;PCODE: $000002DA VOL: 0
;PCODE: $000002DB VOL: 0
;PCODE: $000002DC VOL: 0
;PCODE: $000002DD VOL: 0
;PCODE: $000002DE VOL: 0
;PCODE: $000002DF VOL: 0
; 0002 011C 					{
; 0002 011D 						if(bit_is_set(byte,maske))
;PCODE: $000002E0 VOL: 0
;PCODE: $000002E1 VOL: 0
;PCODE: $000002E2 VOL: 0
;PCODE: $000002E3 VOL: 0
;PCODE: $000002E4 VOL: 0
;PCODE: $000002E5 VOL: 0
;PCODE: $000002E6 VOL: 0
;PCODE: $000002E7 VOL: 0
; 0002 011E 						{
; 0002 011F 							if(rot)		PutPixel(yPos+sy, xPos+sx, FgColor);
;PCODE: $000002E8 VOL: 0
;PCODE: $000002E9 VOL: 0
;PCODE: $000002EA VOL: 0
;PCODE: $000002EB VOL: 0
;PCODE: $000002EC VOL: 0
;PCODE: $000002ED VOL: 0
;PCODE: $000002EE VOL: 0
;PCODE: $000002EF VOL: 0
;PCODE: $000002F0 VOL: 0
;PCODE: $000002F1 VOL: 0
;PCODE: $000002F2 VOL: 0
;PCODE: $000002F3 VOL: 0
;PCODE: $000002F4 VOL: 0
; 0002 0120 							else			PutPixel(xPos+sx, yPos+sy, FgColor);
;PCODE: $000002F5 VOL: 0
;PCODE: $000002F6 VOL: 0
;PCODE: $000002F7 VOL: 0
;PCODE: $000002F8 VOL: 0
;PCODE: $000002F9 VOL: 0
;PCODE: $000002FA VOL: 0
;PCODE: $000002FB VOL: 0
;PCODE: $000002FC VOL: 0
;PCODE: $000002FD VOL: 0
;PCODE: $000002FE VOL: 0
;PCODE: $000002FF VOL: 0
;PCODE: $00000300 VOL: 0
; 0002 0121 						}
;PCODE: $00000301 VOL: 0
; 0002 0122 						else
;PCODE: $00000302 VOL: 0
;PCODE: $00000303 VOL: 0
; 0002 0123 						{
; 0002 0124 							if(NonTransparence)
;PCODE: $00000304 VOL: 0
;PCODE: $00000305 VOL: 0
;PCODE: $00000306 VOL: 0
; 0002 0125 							{
; 0002 0126 								if(rot)		PutPixel(yPos+sy, xPos+sx, BkColor);
;PCODE: $00000307 VOL: 0
;PCODE: $00000308 VOL: 0
;PCODE: $00000309 VOL: 0
;PCODE: $0000030A VOL: 0
;PCODE: $0000030B VOL: 0
;PCODE: $0000030C VOL: 0
;PCODE: $0000030D VOL: 0
;PCODE: $0000030E VOL: 0
;PCODE: $0000030F VOL: 0
;PCODE: $00000310 VOL: 0
;PCODE: $00000311 VOL: 0
;PCODE: $00000312 VOL: 0
;PCODE: $00000313 VOL: 0
; 0002 0127 								else			PutPixel(xPos+sx, yPos+sy, BkColor);
;PCODE: $00000314 VOL: 0
;PCODE: $00000315 VOL: 0
;PCODE: $00000316 VOL: 0
;PCODE: $00000317 VOL: 0
;PCODE: $00000318 VOL: 0
;PCODE: $00000319 VOL: 0
;PCODE: $0000031A VOL: 0
;PCODE: $0000031B VOL: 0
;PCODE: $0000031C VOL: 0
;PCODE: $0000031D VOL: 0
;PCODE: $0000031E VOL: 0
;PCODE: $0000031F VOL: 0
; 0002 0128 							}
;PCODE: $00000320 VOL: 0
; 0002 0129 						}
;PCODE: $00000321 VOL: 0
;PCODE: $00000322 VOL: 0
; 0002 012A 					}//for sy
;PCODE: $00000323 VOL: 0
;PCODE: $00000324 VOL: 0
;PCODE: $00000325 VOL: 0
;PCODE: $00000326 VOL: 0
;PCODE: $00000327 VOL: 0
;PCODE: $00000328 VOL: 0
; 0002 012B 				}//for sx
;PCODE: $00000329 VOL: 0
;PCODE: $0000032A VOL: 0
;PCODE: $0000032B VOL: 0
;PCODE: $0000032C VOL: 0
;PCODE: $0000032D VOL: 0
;PCODE: $0000032E VOL: 0
; 0002 012C 
; 0002 012D 				maske++;
;PCODE: $0000032F VOL: 0
;PCODE: $00000330 VOL: 0
; 0002 012E 			}//for yc
;PCODE: $00000331 VOL: 0
;PCODE: $00000332 VOL: 0
;PCODE: $00000333 VOL: 0
;PCODE: $00000334 VOL: 0
;PCODE: $00000335 VOL: 0
;PCODE: $00000336 VOL: 0
; 0002 012F 		}//for xc
;PCODE: $00000337 VOL: 0
;PCODE: $00000338 VOL: 0
;PCODE: $00000339 VOL: 0
;PCODE: $0000033A VOL: 0
;PCODE: $0000033B VOL: 0
;PCODE: $0000033C VOL: 0
; 0002 0130 	#endif
; 0002 0131 }	//*PutCharPE
;PCODE: $0000033D VOL: 0
;PCODE: $0000033E VOL: 0
;PCODE: $0000033F VOL: 0
;PCODE: $00000340 VOL: 0
;
;unsigned int CalcTextWidthEN(char *str)
; 0002 0134 {
;PCODE: $00000341 VOL: 0
;PCODE: $00000342 VOL: 0
; 0002 0135 	unsigned int 		strSize = 0;
; 0002 0136 	unsigned char 	c;
; 0002 0137 	unsigned int 		i = 0;
; 0002 0138 
; 0002 0139 	while(str[i])
;PCODE: $00000343 VOL: 0
;PCODE: $00000344 VOL: 0
;	*str -> Y+6
;	strSize -> R16,R17
;	c -> R19
;	i -> R20,R21
;PCODE: $00000345 VOL: 0
;PCODE: $00000346 VOL: 0
;PCODE: $00000347 VOL: 0
;PCODE: $00000348 VOL: 0
;PCODE: $00000349 VOL: 0
;PCODE: $0000034A VOL: 0
;PCODE: $0000034B VOL: 0
;PCODE: $0000034C VOL: 0
;PCODE: $0000034D VOL: 0
;PCODE: $0000034E VOL: 0
;PCODE: $0000034F VOL: 0
; 0002 013A 	{
; 0002 013B 		c = str[i++];
;PCODE: $00000350 VOL: 0
;PCODE: $00000351 VOL: 0
;PCODE: $00000352 VOL: 0
;PCODE: $00000353 VOL: 0
;PCODE: $00000354 VOL: 0
;PCODE: $00000355 VOL: 0
; 0002 013C 
; 0002 013D 		if(c == '\n')			continue;
;PCODE: $00000356 VOL: 0
;PCODE: $00000357 VOL: 0
;PCODE: $00000358 VOL: 0
;PCODE: $00000359 VOL: 0
; 0002 013E 
; 0002 013F 		if(FontFixed)
;PCODE: $0000035A VOL: 0
;PCODE: $0000035B VOL: 0
;PCODE: $0000035C VOL: 0
;PCODE: $0000035D VOL: 0
; 0002 0140 			strSize += (unsigned int)(FontWidth) * FontXScale;
;PCODE: $0000035E VOL: 0
;PCODE: $0000035F VOL: 0
;PCODE: $00000360 VOL: 0
;PCODE: $00000361 VOL: 0
;PCODE: $00000362 VOL: 0
;PCODE: $00000363 VOL: 0
;PCODE: $00000364 VOL: 0
; 0002 0141 		else
;PCODE: $00000365 VOL: 0
;PCODE: $00000366 VOL: 0
; 0002 0142 		{
; 0002 0143 		  if((c < firstchar) || (c > lastchar))
;PCODE: $00000367 VOL: 0
;PCODE: $00000368 VOL: 0
;PCODE: $00000369 VOL: 0
;PCODE: $0000036A VOL: 0
;PCODE: $0000036B VOL: 0
;PCODE: $0000036C VOL: 0
;PCODE: $0000036D VOL: 0
;PCODE: $0000036E VOL: 0
; 0002 0144 				charwidth = FontWidth;
;PCODE: $0000036F VOL: 0
;PCODE: $00000370 VOL: 0
; 0002 0145 			else
;PCODE: $00000371 VOL: 0
;PCODE: $00000372 VOL: 0
; 0002 0146 			{
; 0002 0147 				charwidth = pgm_read_byte(&FontPointer[(unsigned int)(c)+FONT_HEADER_SIZE-firstchar]);
;PCODE: $00000373 VOL: 0
;PCODE: $00000374 VOL: 0
;PCODE: $00000375 VOL: 0
;PCODE: $00000376 VOL: 0
;PCODE: $00000377 VOL: 0
;PCODE: $00000378 VOL: 0
;PCODE: $00000379 VOL: 0
;PCODE: $0000037A VOL: 0
;PCODE: $0000037B VOL: 0
;PCODE: $0000037C VOL: 0
; 0002 0148 
; 0002 0149 				//english spesial fonts!
; 0002 014A 				if (((c >= 0xd4) && (c <= 0xda)) ||
; 0002 014B 		    		((c >= 0xe7) && (c <= 0xec)) ||
; 0002 014C 				  	 (c == 0xd1))
;PCODE: $0000037D VOL: 0
;PCODE: $0000037E VOL: 0
;PCODE: $0000037F VOL: 0
;PCODE: $00000380 VOL: 0
;PCODE: $00000381 VOL: 0
;PCODE: $00000382 VOL: 0
;PCODE: $00000383 VOL: 0
;PCODE: $00000384 VOL: 0
;PCODE: $00000385 VOL: 0
;PCODE: $00000386 VOL: 0
;PCODE: $00000387 VOL: 0
;PCODE: $00000388 VOL: 0
;PCODE: $00000389 VOL: 0
;PCODE: $0000038A VOL: 0
;PCODE: $0000038B VOL: 0
;PCODE: $0000038C VOL: 0
;PCODE: $0000038D VOL: 0
;PCODE: $0000038E VOL: 0
;PCODE: $0000038F VOL: 0
;PCODE: $00000390 VOL: 0
;PCODE: $00000391 VOL: 0
; 0002 014D 
; 0002 014E 					charwidth = 0;
;PCODE: $00000392 VOL: 0
; 0002 014F 			}
;PCODE: $00000393 VOL: 0
;PCODE: $00000394 VOL: 0
; 0002 0150 
; 0002 0151 			strSize += (unsigned int)(charwidth) * FontXScale;
;PCODE: $00000395 VOL: 0
;PCODE: $00000396 VOL: 0
;PCODE: $00000397 VOL: 0
;PCODE: $00000398 VOL: 0
;PCODE: $00000399 VOL: 0
;PCODE: $0000039A VOL: 0
;PCODE: $0000039B VOL: 0
; 0002 0152 		}
;PCODE: $0000039C VOL: 0
; 0002 0153 
; 0002 0154 		strSize += FontSpaceX;
;PCODE: $0000039D VOL: 0
;PCODE: $0000039E VOL: 0
;PCODE: $0000039F VOL: 0
;PCODE: $000003A0 VOL: 0
; 0002 0155 	}//while
;PCODE: $000003A1 VOL: 0
;PCODE: $000003A2 VOL: 0
; 0002 0156 
; 0002 0157 	return(strSize);
;PCODE: $000003A3 VOL: 0
;PCODE: $000003A4 VOL: 0
;PCODE: $000003A5 VOL: 0
;PCODE: $000003A6 VOL: 0
; 0002 0158 }	//*CalcTextWidthEN
;PCODE: $000003A7 VOL: 0
;
;unsigned int CalcTextWidthPE(char *str)
; 0002 015B {
;PCODE: $000003A8 VOL: 0
;PCODE: $000003A9 VOL: 0
; 0002 015C 	#if (PersianSupport ==1)
; 0002 015D 		unsigned char 	curnLet, dumyLet;
; 0002 015E 		unsigned char 	Pstat, stat, Nstat;
; 0002 015F 
; 0002 0160 		unsigned char		backFontSpace = FontSpaceX;
; 0002 0161 		unsigned int 		strSize = 0;
; 0002 0162 		unsigned int		i = 0;
; 0002 0163 
; 0002 0164 	 	while(str[i])
;PCODE: $000003AA VOL: 0
;PCODE: $000003AB VOL: 0
;PCODE: $000003AC VOL: 0
;PCODE: $000003AD VOL: 0
;PCODE: $000003AE VOL: 0
;PCODE: $000003AF VOL: 0
;PCODE: $000003B0 VOL: 0
;PCODE: $000003B1 VOL: 0
;PCODE: $000003B2 VOL: 0
;PCODE: $000003B3 VOL: 0
;PCODE: $000003B4 VOL: 0
;	*str -> Y+10
;	curnLet -> R17
;	dumyLet -> R16
;	Pstat -> R19
;	stat -> R18
;	Nstat -> R21
;	backFontSpace -> R20
;	strSize -> Y+8
;	i -> Y+6
;PCODE: $000003B5 VOL: 0
;PCODE: $000003B6 VOL: 0
;PCODE: $000003B7 VOL: 0
;PCODE: $000003B8 VOL: 0
;PCODE: $000003B9 VOL: 0
;PCODE: $000003BA VOL: 0
;PCODE: $000003BB VOL: 0
;PCODE: $000003BC VOL: 0
;PCODE: $000003BD VOL: 0
; 0002 0165 		{
; 0002 0166 			curnLet = str[i++];
;PCODE: $000003BE VOL: 0
;PCODE: $000003BF VOL: 0
;PCODE: $000003C0 VOL: 0
;PCODE: $000003C1 VOL: 0
;PCODE: $000003C2 VOL: 0
;PCODE: $000003C3 VOL: 0
;PCODE: $000003C4 VOL: 0
; 0002 0167 			if(curnLet == '\n')			continue;
;PCODE: $000003C5 VOL: 0
;PCODE: $000003C6 VOL: 0
;PCODE: $000003C7 VOL: 0
;PCODE: $000003C8 VOL: 0
; 0002 0168 
; 0002 0169 			if(FontFixed)
;PCODE: $000003C9 VOL: 0
;PCODE: $000003CA VOL: 0
;PCODE: $000003CB VOL: 0
;PCODE: $000003CC VOL: 0
; 0002 016A 				strSize += (unsigned int)(FontWidth) * FontXScale;
;PCODE: $000003CD VOL: 0
;PCODE: $000003CE VOL: 0
;PCODE: $000003CF VOL: 0
;PCODE: $000003D0 VOL: 0
;PCODE: $000003D1 VOL: 0
;PCODE: $000003D2 VOL: 0
;PCODE: $000003D3 VOL: 0
;PCODE: $000003D4 VOL: 0
; 0002 016B 			else
;PCODE: $000003D5 VOL: 0
;PCODE: $000003D6 VOL: 0
; 0002 016C 			{
; 0002 016D 			 	if((curnLet < firstchar) || (curnLet > lastchar))
;PCODE: $000003D7 VOL: 0
;PCODE: $000003D8 VOL: 0
;PCODE: $000003D9 VOL: 0
;PCODE: $000003DA VOL: 0
;PCODE: $000003DB VOL: 0
;PCODE: $000003DC VOL: 0
;PCODE: $000003DD VOL: 0
;PCODE: $000003DE VOL: 0
; 0002 016E 					charwidth = FontWidth;
;PCODE: $000003DF VOL: 0
;PCODE: $000003E0 VOL: 0
; 0002 016F 				else
;PCODE: $000003E1 VOL: 0
;PCODE: $000003E2 VOL: 0
; 0002 0170 				{
; 0002 0171 			 		switch(curnLet)
;PCODE: $000003E3 VOL: 0
;PCODE: $000003E4 VOL: 0
; 0002 0172 			 		{
; 0002 0173 			 			case 0x81:				//peh
;PCODE: $000003E5 VOL: 0
;PCODE: $000003E6 VOL: 0
; 0002 0174 			    		curnLet = 0xEA;
;PCODE: $000003E7 VOL: 0
;PCODE: $000003E8 VOL: 0
; 0002 0175 			 				break;
;PCODE: $000003E9 VOL: 0
; 0002 0176 			 			case 0x8D:				//cheh
;PCODE: $000003EA VOL: 0
;PCODE: $000003EB VOL: 0
;PCODE: $000003EC VOL: 0
; 0002 0177 			    		curnLet = 0xEB;
;PCODE: $000003ED VOL: 0
;PCODE: $000003EE VOL: 0
; 0002 0178 			 				break;
;PCODE: $000003EF VOL: 0
; 0002 0179 			 			case 0x8E:				//zheh
;PCODE: $000003F0 VOL: 0
;PCODE: $000003F1 VOL: 0
;PCODE: $000003F2 VOL: 0
; 0002 017A 			    		curnLet = 0xEE;
;PCODE: $000003F3 VOL: 0
;PCODE: $000003F4 VOL: 0
; 0002 017B 			 				break;
;PCODE: $000003F5 VOL: 0
; 0002 017C 			 			case 0x90:				//geh
;PCODE: $000003F6 VOL: 0
;PCODE: $000003F7 VOL: 0
;PCODE: $000003F8 VOL: 0
; 0002 017D 			    		curnLet = 0xEF;
;PCODE: $000003F9 VOL: 0
;PCODE: $000003FA VOL: 0
; 0002 017E 			 				break;
;PCODE: $000003FB VOL: 0
; 0002 017F                         case 0x98:				//Ke
;PCODE: $000003FC VOL: 0
;PCODE: $000003FD VOL: 0
;PCODE: $000003FE VOL: 0
; 0002 0180 		    		    curnLet = 0xDF;
;PCODE: $000003FF VOL: 0
;PCODE: $00000400 VOL: 0
; 0002 0181 		 				break;
;PCODE: $00000401 VOL: 0
; 0002 0182 			 			case 0xE1:				//laa
;PCODE: $00000402 VOL: 0
;PCODE: $00000403 VOL: 0
;PCODE: $00000404 VOL: 0
; 0002 0183 			    		nextLet = str[i++];
;PCODE: $00000405 VOL: 0
;PCODE: $00000406 VOL: 0
;PCODE: $00000407 VOL: 0
;PCODE: $00000408 VOL: 0
;PCODE: $00000409 VOL: 0
;PCODE: $0000040A VOL: 0
;PCODE: $0000040B VOL: 0
; 0002 0184 
; 0002 0185 			    		if(nextLet == 0xC7)
;PCODE: $0000040C VOL: 0
;PCODE: $0000040D VOL: 0
;PCODE: $0000040E VOL: 0
; 0002 0186 			    			curnLet = 0xFB;
;PCODE: $0000040F VOL: 0
;PCODE: $00000410 VOL: 0
; 0002 0187 			    		else
;PCODE: $00000411 VOL: 0
;PCODE: $00000412 VOL: 0
; 0002 0188 			    		{
; 0002 0189 			    			i--;
;PCODE: $00000413 VOL: 0
;PCODE: $00000414 VOL: 0
;PCODE: $00000415 VOL: 0
; 0002 018A 			    			curnLet = 0xE1;
;PCODE: $00000416 VOL: 0
;PCODE: $00000417 VOL: 0
; 0002 018B 			    		}
;PCODE: $00000418 VOL: 0
; 0002 018C 			 				break;
;PCODE: $00000419 VOL: 0
; 0002 018D 			 			case 0x30:				//persian digits 0...9
;PCODE: $0000041A VOL: 0
;PCODE: $0000041B VOL: 0
;PCODE: $0000041C VOL: 0
; 0002 018E 						case 0x31:
;PCODE: $0000041D VOL: 0
;PCODE: $0000041E VOL: 0
;PCODE: $0000041F VOL: 0
;PCODE: $00000420 VOL: 0
;PCODE: $00000421 VOL: 0
; 0002 018F 						case 0x32:
;PCODE: $00000422 VOL: 0
;PCODE: $00000423 VOL: 0
;PCODE: $00000424 VOL: 0
;PCODE: $00000425 VOL: 0
;PCODE: $00000426 VOL: 0
; 0002 0190 						case 0x33:
;PCODE: $00000427 VOL: 0
;PCODE: $00000428 VOL: 0
;PCODE: $00000429 VOL: 0
;PCODE: $0000042A VOL: 0
;PCODE: $0000042B VOL: 0
; 0002 0191 						case 0x34:
;PCODE: $0000042C VOL: 0
;PCODE: $0000042D VOL: 0
;PCODE: $0000042E VOL: 0
;PCODE: $0000042F VOL: 0
;PCODE: $00000430 VOL: 0
; 0002 0192 						case 0x35:
;PCODE: $00000431 VOL: 0
;PCODE: $00000432 VOL: 0
;PCODE: $00000433 VOL: 0
;PCODE: $00000434 VOL: 0
;PCODE: $00000435 VOL: 0
; 0002 0193 						case 0x36:
;PCODE: $00000436 VOL: 0
;PCODE: $00000437 VOL: 0
;PCODE: $00000438 VOL: 0
;PCODE: $00000439 VOL: 0
;PCODE: $0000043A VOL: 0
; 0002 0194 						case 0x37:
;PCODE: $0000043B VOL: 0
;PCODE: $0000043C VOL: 0
;PCODE: $0000043D VOL: 0
;PCODE: $0000043E VOL: 0
;PCODE: $0000043F VOL: 0
; 0002 0195 						case 0x38:
;PCODE: $00000440 VOL: 0
;PCODE: $00000441 VOL: 0
;PCODE: $00000442 VOL: 0
;PCODE: $00000443 VOL: 0
;PCODE: $00000444 VOL: 0
; 0002 0196 						case 0x39:
;PCODE: $00000445 VOL: 0
;PCODE: $00000446 VOL: 0
;PCODE: $00000447 VOL: 0
;PCODE: $00000448 VOL: 0
;PCODE: $00000449 VOL: 0
; 0002 0197 							curnLet -= 0x20;
;PCODE: $0000044A VOL: 0
;PCODE: $0000044B VOL: 0
; 0002 0198 			 				break;
;PCODE: $0000044C VOL: 0
; 0002 0199 			 			case 0x3F:				//persian question mark
;PCODE: $0000044D VOL: 0
;PCODE: $0000044E VOL: 0
;PCODE: $0000044F VOL: 0
; 0002 019A 			    		curnLet = 0xBF;
;PCODE: $00000450 VOL: 0
;PCODE: $00000451 VOL: 0
; 0002 019B 			 				break;
;PCODE: $00000452 VOL: 0
; 0002 019C 			 			case 0x3B:				//persian semicolon
;PCODE: $00000453 VOL: 0
;PCODE: $00000454 VOL: 0
;PCODE: $00000455 VOL: 0
; 0002 019D 			    		curnLet = 0x1F;
;PCODE: $00000456 VOL: 0
;PCODE: $00000457 VOL: 0
; 0002 019E 			 				break;
;PCODE: $00000458 VOL: 0
; 0002 019F 			 			case 0x2C:				//persian comma
;PCODE: $00000459 VOL: 0
;PCODE: $0000045A VOL: 0
;PCODE: $0000045B VOL: 0
; 0002 01A0 			    		curnLet = 0x1D;
;PCODE: $0000045C VOL: 0
;PCODE: $0000045D VOL: 0
; 0002 01A1 			 				break;
;PCODE: $0000045E VOL: 0
; 0002 01A2 			 			case 0x2E:				//persian point
;PCODE: $0000045F VOL: 0
;PCODE: $00000460 VOL: 0
;PCODE: $00000461 VOL: 0
; 0002 01A3 			    		curnLet = 0x1C;
;PCODE: $00000462 VOL: 0
;PCODE: $00000463 VOL: 0
; 0002 01A4 			 				break;
;PCODE: $00000464 VOL: 0
; 0002 01A5 					}//switch curnLet
;PCODE: $00000465 VOL: 0
; 0002 01A6 
; 0002 01A7 					//--------------------------------
; 0002 01A8 			  	nextLet = str[i++];
;PCODE: $00000466 VOL: 0
;PCODE: $00000467 VOL: 0
;PCODE: $00000468 VOL: 0
;PCODE: $00000469 VOL: 0
;PCODE: $0000046A VOL: 0
;PCODE: $0000046B VOL: 0
;PCODE: $0000046C VOL: 0
; 0002 01A9 			  	i--;
;PCODE: $0000046D VOL: 0
;PCODE: $0000046E VOL: 0
;PCODE: $0000046F VOL: 0
; 0002 01AA 
; 0002 01AB 			 		switch(nextLet)
;PCODE: $00000470 VOL: 0
;PCODE: $00000471 VOL: 0
; 0002 01AC 			 		{
; 0002 01AD 			 			case 0x81:				//peh
;PCODE: $00000472 VOL: 0
;PCODE: $00000473 VOL: 0
; 0002 01AE 			    		nextLet = 0xEA;
;PCODE: $00000474 VOL: 0
;PCODE: $00000475 VOL: 0
; 0002 01AF 			 				break;
;PCODE: $00000476 VOL: 0
; 0002 01B0 			 			case 0x8D:				//cheh
;PCODE: $00000477 VOL: 0
;PCODE: $00000478 VOL: 0
;PCODE: $00000479 VOL: 0
; 0002 01B1 			    		nextLet = 0xEB;
;PCODE: $0000047A VOL: 0
;PCODE: $0000047B VOL: 0
; 0002 01B2 			 				break;
;PCODE: $0000047C VOL: 0
; 0002 01B3 			 			case 0x8E:				//zheh
;PCODE: $0000047D VOL: 0
;PCODE: $0000047E VOL: 0
;PCODE: $0000047F VOL: 0
; 0002 01B4 			    		nextLet = 0xEE;
;PCODE: $00000480 VOL: 0
;PCODE: $00000481 VOL: 0
; 0002 01B5 			 				break;
;PCODE: $00000482 VOL: 0
; 0002 01B6 			 			case 0x90:				//geh
;PCODE: $00000483 VOL: 0
;PCODE: $00000484 VOL: 0
;PCODE: $00000485 VOL: 0
; 0002 01B7 			    		nextLet = 0xEF;
;PCODE: $00000486 VOL: 0
;PCODE: $00000487 VOL: 0
; 0002 01B8 			 				break;
;PCODE: $00000488 VOL: 0
; 0002 01B9                          case 0x98:				//Ke
;PCODE: $00000489 VOL: 0
;PCODE: $0000048A VOL: 0
;PCODE: $0000048B VOL: 0
; 0002 01BA 		    		    nextLet = 0xDF;
;PCODE: $0000048C VOL: 0
;PCODE: $0000048D VOL: 0
; 0002 01BB 		 				break;
;PCODE: $0000048E VOL: 0
; 0002 01BC 			 			case 0x30:				//0...9
;PCODE: $0000048F VOL: 0
;PCODE: $00000490 VOL: 0
;PCODE: $00000491 VOL: 0
; 0002 01BD 						case 0x31:
;PCODE: $00000492 VOL: 0
;PCODE: $00000493 VOL: 0
;PCODE: $00000494 VOL: 0
;PCODE: $00000495 VOL: 0
;PCODE: $00000496 VOL: 0
; 0002 01BE 						case 0x32:
;PCODE: $00000497 VOL: 0
;PCODE: $00000498 VOL: 0
;PCODE: $00000499 VOL: 0
;PCODE: $0000049A VOL: 0
;PCODE: $0000049B VOL: 0
; 0002 01BF 						case 0x33:
;PCODE: $0000049C VOL: 0
;PCODE: $0000049D VOL: 0
;PCODE: $0000049E VOL: 0
;PCODE: $0000049F VOL: 0
;PCODE: $000004A0 VOL: 0
; 0002 01C0 						case 0x34:
;PCODE: $000004A1 VOL: 0
;PCODE: $000004A2 VOL: 0
;PCODE: $000004A3 VOL: 0
;PCODE: $000004A4 VOL: 0
;PCODE: $000004A5 VOL: 0
; 0002 01C1 						case 0x35:
;PCODE: $000004A6 VOL: 0
;PCODE: $000004A7 VOL: 0
;PCODE: $000004A8 VOL: 0
;PCODE: $000004A9 VOL: 0
;PCODE: $000004AA VOL: 0
; 0002 01C2 						case 0x36:
;PCODE: $000004AB VOL: 0
;PCODE: $000004AC VOL: 0
;PCODE: $000004AD VOL: 0
;PCODE: $000004AE VOL: 0
;PCODE: $000004AF VOL: 0
; 0002 01C3 						case 0x37:
;PCODE: $000004B0 VOL: 0
;PCODE: $000004B1 VOL: 0
;PCODE: $000004B2 VOL: 0
;PCODE: $000004B3 VOL: 0
;PCODE: $000004B4 VOL: 0
; 0002 01C4 						case 0x38:
;PCODE: $000004B5 VOL: 0
;PCODE: $000004B6 VOL: 0
;PCODE: $000004B7 VOL: 0
;PCODE: $000004B8 VOL: 0
;PCODE: $000004B9 VOL: 0
; 0002 01C5 						case 0x39:
;PCODE: $000004BA VOL: 0
;PCODE: $000004BB VOL: 0
;PCODE: $000004BC VOL: 0
;PCODE: $000004BD VOL: 0
;PCODE: $000004BE VOL: 0
; 0002 01C6 							nextLet -= 0x20;
;PCODE: $000004BF VOL: 0
;PCODE: $000004C0 VOL: 0
;PCODE: $000004C1 VOL: 0
; 0002 01C7 			 				break;
;PCODE: $000004C2 VOL: 0
; 0002 01C8 			 			case 0x3F:				//persian question mark
;PCODE: $000004C3 VOL: 0
;PCODE: $000004C4 VOL: 0
;PCODE: $000004C5 VOL: 0
; 0002 01C9 			    		nextLet = 0xBF;
;PCODE: $000004C6 VOL: 0
;PCODE: $000004C7 VOL: 0
; 0002 01CA 			 				break;
;PCODE: $000004C8 VOL: 0
; 0002 01CB 			 			case 0x3B:				//persian semicolon
;PCODE: $000004C9 VOL: 0
;PCODE: $000004CA VOL: 0
;PCODE: $000004CB VOL: 0
; 0002 01CC 			    		nextLet = 0x1F;
;PCODE: $000004CC VOL: 0
;PCODE: $000004CD VOL: 0
; 0002 01CD 			 				break;
;PCODE: $000004CE VOL: 0
; 0002 01CE 			 			case 0x2C:				//persian comma
;PCODE: $000004CF VOL: 0
;PCODE: $000004D0 VOL: 0
;PCODE: $000004D1 VOL: 0
; 0002 01CF 			    		nextLet = 0x1D;
;PCODE: $000004D2 VOL: 0
;PCODE: $000004D3 VOL: 0
; 0002 01D0 			 				break;
;PCODE: $000004D4 VOL: 0
; 0002 01D1 			 			case 0x2E:				//persian point
;PCODE: $000004D5 VOL: 0
;PCODE: $000004D6 VOL: 0
;PCODE: $000004D7 VOL: 0
; 0002 01D2 			    		nextLet = 0x1C;
;PCODE: $000004D8 VOL: 0
;PCODE: $000004D9 VOL: 0
; 0002 01D3 			 				break;
;PCODE: $000004DA VOL: 0
; 0002 01D4 					}//switch nextLet
;PCODE: $000004DB VOL: 0
; 0002 01D5 
; 0002 01D6 					if(curnLet > 0xC0)
;PCODE: $000004DC VOL: 0
;PCODE: $000004DD VOL: 0
;PCODE: $000004DE VOL: 0
; 0002 01D7 					{
; 0002 01D8 						if(prevLet > 0xC0)
;PCODE: $000004DF VOL: 0
;PCODE: $000004E0 VOL: 0
;PCODE: $000004E1 VOL: 0
; 0002 01D9 							Pstat = (pgm_read_byte(&PEmap[prevLet-0xC1][5]));
;PCODE: $000004E2 VOL: 0
;PCODE: $000004E3 VOL: 0
;PCODE: $000004E4 VOL: 0
;PCODE: $000004E5 VOL: 0
;PCODE: $000004E6 VOL: 0
;PCODE: $000004E7 VOL: 0
;PCODE: $000004E8 VOL: 0
;PCODE: $000004E9 VOL: 0
; 0002 01DA 						else
;PCODE: $000004EA VOL: 0
;PCODE: $000004EB VOL: 0
; 0002 01DB 							Pstat = 0;
;PCODE: $000004EC VOL: 0
;PCODE: $000004ED VOL: 0
; 0002 01DC 
; 0002 01DD 						if(nextLet > 0xC0)
;PCODE: $000004EE VOL: 0
;PCODE: $000004EF VOL: 0
;PCODE: $000004F0 VOL: 0
;PCODE: $000004F1 VOL: 0
; 0002 01DE 							Nstat = (pgm_read_byte(&PEmap[nextLet-0xC1][4]));
;PCODE: $000004F2 VOL: 0
;PCODE: $000004F3 VOL: 0
;PCODE: $000004F4 VOL: 0
;PCODE: $000004F5 VOL: 0
;PCODE: $000004F6 VOL: 0
;PCODE: $000004F7 VOL: 0
;PCODE: $000004F8 VOL: 0
;PCODE: $000004F9 VOL: 0
; 0002 01DF 						else
;PCODE: $000004FA VOL: 0
;PCODE: $000004FB VOL: 0
; 0002 01E0 							Nstat = 0;
;PCODE: $000004FC VOL: 0
;PCODE: $000004FD VOL: 0
; 0002 01E1 
; 0002 01E2 						stat = (Pstat<<1) | Nstat;
;PCODE: $000004FE VOL: 0
;PCODE: $000004FF VOL: 0
;PCODE: $00000500 VOL: 0
;PCODE: $00000501 VOL: 0
;PCODE: $00000502 VOL: 0
; 0002 01E3 
; 0002 01E4 						if(stat>1)	FontSpaceX = 0;
;PCODE: $00000503 VOL: 0
;PCODE: $00000504 VOL: 0
;PCODE: $00000505 VOL: 0
;PCODE: $00000506 VOL: 0
;PCODE: $00000507 VOL: 0
; 0002 01E5 						else 				FontSpaceX = backFontSpace;
;PCODE: $00000508 VOL: 0
;PCODE: $00000509 VOL: 0
;PCODE: $0000050A VOL: 0
;PCODE: $0000050B VOL: 0
; 0002 01E6 						////////////////
; 0002 01E7 						dumyLet = pgm_read_byte(&PEmap[curnLet-0xC1][stat]);
;PCODE: $0000050C VOL: 0
;PCODE: $0000050D VOL: 0
;PCODE: $0000050E VOL: 0
;PCODE: $0000050F VOL: 0
;PCODE: $00000510 VOL: 0
;PCODE: $00000511 VOL: 0
;PCODE: $00000512 VOL: 0
;PCODE: $00000513 VOL: 0
;PCODE: $00000514 VOL: 0
;PCODE: $00000515 VOL: 0
;PCODE: $00000516 VOL: 0
;PCODE: $00000517 VOL: 0
; 0002 01E8 
; 0002 01E9 						charwidth = pgm_read_byte(&FontPointer[(unsigned int)(dumyLet)+FONT_HEADER_SIZE-firstchar]);
;PCODE: $00000518 VOL: 0
;PCODE: $00000519 VOL: 0
;PCODE: $0000051A VOL: 0
;PCODE: $0000051B VOL: 0
;PCODE: $0000051C VOL: 0
;PCODE: $0000051D VOL: 0
;PCODE: $0000051E VOL: 0
;PCODE: $0000051F VOL: 0
;PCODE: $00000520 VOL: 0
;PCODE: $00000521 VOL: 0
; 0002 01EA 						strSize += (unsigned int)(charwidth) * FontXScale;
;PCODE: $00000522 VOL: 0
;PCODE: $00000523 VOL: 0
;PCODE: $00000524 VOL: 0
;PCODE: $00000525 VOL: 0
;PCODE: $00000526 VOL: 0
;PCODE: $00000527 VOL: 0
;PCODE: $00000528 VOL: 0
;PCODE: $00000529 VOL: 0
; 0002 01EB 						strSize += FontSpaceX;
;PCODE: $0000052A VOL: 0
;PCODE: $0000052B VOL: 0
;PCODE: $0000052C VOL: 0
;PCODE: $0000052D VOL: 0
;PCODE: $0000052E VOL: 0
; 0002 01EC 						////////////////
; 0002 01ED 						FontSpaceX = backFontSpace;
;PCODE: $0000052F VOL: 0
;PCODE: $00000530 VOL: 0
; 0002 01EE 					}
; 0002 01EF 					else
;PCODE: $00000531 VOL: 0
;PCODE: $00000532 VOL: 0
; 0002 01F0 					{
; 0002 01F1 						charwidth = pgm_read_byte(&FontPointer[(unsigned int)(curnLet)+FONT_HEADER_SIZE-firstchar]);
;PCODE: $00000533 VOL: 0
;PCODE: $00000534 VOL: 0
;PCODE: $00000535 VOL: 0
;PCODE: $00000536 VOL: 0
;PCODE: $00000537 VOL: 0
;PCODE: $00000538 VOL: 0
;PCODE: $00000539 VOL: 0
;PCODE: $0000053A VOL: 0
;PCODE: $0000053B VOL: 0
;PCODE: $0000053C VOL: 0
; 0002 01F2 						strSize += (unsigned int)(charwidth) * FontXScale;
;PCODE: $0000053D VOL: 0
;PCODE: $0000053E VOL: 0
;PCODE: $0000053F VOL: 0
;PCODE: $00000540 VOL: 0
;PCODE: $00000541 VOL: 0
;PCODE: $00000542 VOL: 0
;PCODE: $00000543 VOL: 0
;PCODE: $00000544 VOL: 0
; 0002 01F3 						strSize += FontSpaceX;
;PCODE: $00000545 VOL: 0
;PCODE: $00000546 VOL: 0
;PCODE: $00000547 VOL: 0
;PCODE: $00000548 VOL: 0
;PCODE: $00000549 VOL: 0
; 0002 01F4 					}
;PCODE: $0000054A VOL: 0
; 0002 01F5 
; 0002 01F6 					prevLet = curnLet;
;PCODE: $0000054B VOL: 0
;PCODE: $0000054C VOL: 0
; 0002 01F7 				}
;PCODE: $0000054D VOL: 0
; 0002 01F8 			}
;PCODE: $0000054E VOL: 0
; 0002 01F9 		}//while
;PCODE: $0000054F VOL: 0
;PCODE: $00000550 VOL: 0
; 0002 01FA 
; 0002 01FB 	 	prevLet = 0xFF;
;PCODE: $00000551 VOL: 0
;PCODE: $00000552 VOL: 0
; 0002 01FC 
; 0002 01FD 		return(strSize);
;PCODE: $00000553 VOL: 0
;PCODE: $00000554 VOL: 0
;PCODE: $00000555 VOL: 0
;PCODE: $00000556 VOL: 0
; 0002 01FE 	#endif
; 0002 01FF }	//*CalcTextWidthPE
;PCODE: $00000557 VOL: 0
;
;unsigned int CalcTextWidth(char *Text)
; 0002 0202 {
;PCODE: $00000558 VOL: 0
;PCODE: $00000559 VOL: 0
; 0002 0203 	#if (PersianSupport ==1)
; 0002 0204 		if(peLETTER == E_LETTER)
;PCODE: $0000055A VOL: 0
;	*Text -> Y+0
;PCODE: $0000055B VOL: 0
;PCODE: $0000055C VOL: 0
;PCODE: $0000055D VOL: 0
; 0002 0205 			return(CalcTextWidthEN(Text));
;PCODE: $0000055E VOL: 0
;PCODE: $0000055F VOL: 0
;PCODE: $00000560 VOL: 0
;PCODE: $00000561 VOL: 0
; 0002 0206 		else
;PCODE: $00000562 VOL: 0
; 0002 0207 	#endif
; 0002 0208 			return(CalcTextWidthPE(Text));
;PCODE: $00000563 VOL: 0
;PCODE: $00000564 VOL: 0
;PCODE: $00000565 VOL: 0
;PCODE: $00000566 VOL: 0
; 0002 0209 }	//*CalcTextWidth
;PCODE: $00000567 VOL: 0
;PCODE: $00000568 VOL: 0
;PCODE: $00000569 VOL: 0
;PCODE: $0000056A VOL: 0
;
;unsigned int CalcTextHeight(void)
; 0002 020C {
;PCODE: $0000056B VOL: 0
;PCODE: $0000056C VOL: 0
; 0002 020D 	return((unsigned int)(FontHeight) * FontYScale);
;PCODE: $0000056D VOL: 0
;PCODE: $0000056E VOL: 0
;PCODE: $0000056F VOL: 0
;PCODE: $00000570 VOL: 0
;PCODE: $00000571 VOL: 0
;PCODE: $00000572 VOL: 0
; 0002 020E }	//*CalcTextHeight
;PCODE: $00000573 VOL: 0
;
;void PutsPE(char *str)
; 0002 0211 {
;PCODE: $00000574 VOL: 0
;PCODE: $00000575 VOL: 0
; 0002 0212 	#if (PersianSupport ==1)
; 0002 0213 		unsigned char 	curnLet;
; 0002 0214 		unsigned char 	Pstat, stat, Nstat;
; 0002 0215 
; 0002 0216 		unsigned char		backFontSpace = FontSpaceX;
; 0002 0217 		char 						strTemp[50];
; 0002 0218 		unsigned char 	i = 0, j = 0;
; 0002 0219 		unsigned int		k = 0;
; 0002 021A 
; 0002 021B 	 	while(str[k])
;PCODE: $00000576 VOL: 0
;PCODE: $00000577 VOL: 0
;PCODE: $00000578 VOL: 0
;PCODE: $00000579 VOL: 0
;PCODE: $0000057A VOL: 0
;PCODE: $0000057B VOL: 0
;PCODE: $0000057C VOL: 0
;PCODE: $0000057D VOL: 0
;PCODE: $0000057E VOL: 0
;	*str -> Y+59
;	curnLet -> R17
;	Pstat -> R16
;	stat -> R19
;	Nstat -> R18
;	backFontSpace -> R21
;	strTemp -> Y+9
;	i -> R20
;	j -> Y+8
;	k -> Y+6
;PCODE: $0000057F VOL: 0
;PCODE: $00000580 VOL: 0
;PCODE: $00000581 VOL: 0
;PCODE: $00000582 VOL: 0
;PCODE: $00000583 VOL: 0
;PCODE: $00000584 VOL: 0
;PCODE: $00000585 VOL: 0
;PCODE: $00000586 VOL: 0
;PCODE: $00000587 VOL: 0
;PCODE: $00000588 VOL: 0
;PCODE: $00000589 VOL: 0
; 0002 021C 		{
; 0002 021D 	 		curnLet = str[k++];
;PCODE: $0000058A VOL: 0
;PCODE: $0000058B VOL: 0
;PCODE: $0000058C VOL: 0
;PCODE: $0000058D VOL: 0
;PCODE: $0000058E VOL: 0
;PCODE: $0000058F VOL: 0
;PCODE: $00000590 VOL: 0
; 0002 021E 
; 0002 021F 	 		switch(curnLet)
;PCODE: $00000591 VOL: 0
;PCODE: $00000592 VOL: 0
; 0002 0220 	 		{
; 0002 0221 	 			case 0x81:				//peh
;PCODE: $00000593 VOL: 0
;PCODE: $00000594 VOL: 0
; 0002 0222 	    		curnLet = 0xEA;
;PCODE: $00000595 VOL: 0
;PCODE: $00000596 VOL: 0
; 0002 0223 	 				break;
;PCODE: $00000597 VOL: 0
; 0002 0224 	 			case 0x8D:				//cheh
;PCODE: $00000598 VOL: 0
;PCODE: $00000599 VOL: 0
;PCODE: $0000059A VOL: 0
; 0002 0225 	    		curnLet = 0xEB;
;PCODE: $0000059B VOL: 0
;PCODE: $0000059C VOL: 0
; 0002 0226 	 				break;
;PCODE: $0000059D VOL: 0
; 0002 0227 	 			case 0x8E:				//zheh
;PCODE: $0000059E VOL: 0
;PCODE: $0000059F VOL: 0
;PCODE: $000005A0 VOL: 0
; 0002 0228 	    		curnLet = 0xEE;
;PCODE: $000005A1 VOL: 0
;PCODE: $000005A2 VOL: 0
; 0002 0229 	 				break;
;PCODE: $000005A3 VOL: 0
; 0002 022A 	 			case 0x90:				//geh
;PCODE: $000005A4 VOL: 0
;PCODE: $000005A5 VOL: 0
;PCODE: $000005A6 VOL: 0
; 0002 022B 	    		curnLet = 0xEF;
;PCODE: $000005A7 VOL: 0
;PCODE: $000005A8 VOL: 0
; 0002 022C 	 				break;
;PCODE: $000005A9 VOL: 0
; 0002 022D                  case 0x98:				//Ke
;PCODE: $000005AA VOL: 0
;PCODE: $000005AB VOL: 0
;PCODE: $000005AC VOL: 0
; 0002 022E 		    		    curnLet = 0xDF;
;PCODE: $000005AD VOL: 0
;PCODE: $000005AE VOL: 0
; 0002 022F 		 				break;
;PCODE: $000005AF VOL: 0
; 0002 0230 	 			case 0xE1:				//laa
;PCODE: $000005B0 VOL: 0
;PCODE: $000005B1 VOL: 0
;PCODE: $000005B2 VOL: 0
; 0002 0231 	    		nextLet = str[k++];
;PCODE: $000005B3 VOL: 0
;PCODE: $000005B4 VOL: 0
;PCODE: $000005B5 VOL: 0
;PCODE: $000005B6 VOL: 0
;PCODE: $000005B7 VOL: 0
;PCODE: $000005B8 VOL: 0
;PCODE: $000005B9 VOL: 0
; 0002 0232 
; 0002 0233 	    		if(nextLet == 0xC7)
;PCODE: $000005BA VOL: 0
;PCODE: $000005BB VOL: 0
;PCODE: $000005BC VOL: 0
; 0002 0234 	    			curnLet = 0xFB;
;PCODE: $000005BD VOL: 0
;PCODE: $000005BE VOL: 0
; 0002 0235 	    		else
;PCODE: $000005BF VOL: 0
;PCODE: $000005C0 VOL: 0
; 0002 0236 	    		{
; 0002 0237 	    			k--;
;PCODE: $000005C1 VOL: 0
;PCODE: $000005C2 VOL: 0
;PCODE: $000005C3 VOL: 0
; 0002 0238 	    			curnLet = 0xE1;
;PCODE: $000005C4 VOL: 0
;PCODE: $000005C5 VOL: 0
; 0002 0239 	    		}
;PCODE: $000005C6 VOL: 0
; 0002 023A 	 				break;
;PCODE: $000005C7 VOL: 0
; 0002 023B 	 			case 0x3F:				//persian question mark
;PCODE: $000005C8 VOL: 0
;PCODE: $000005C9 VOL: 0
;PCODE: $000005CA VOL: 0
; 0002 023C 	    		curnLet = 0xBF;
;PCODE: $000005CB VOL: 0
;PCODE: $000005CC VOL: 0
; 0002 023D 	 				break;
;PCODE: $000005CD VOL: 0
; 0002 023E 	 			case 0x3B:				//persian semicolon
;PCODE: $000005CE VOL: 0
;PCODE: $000005CF VOL: 0
;PCODE: $000005D0 VOL: 0
; 0002 023F 	    		curnLet = 0x1F;
;PCODE: $000005D1 VOL: 0
;PCODE: $000005D2 VOL: 0
; 0002 0240 	 				break;
;PCODE: $000005D3 VOL: 0
; 0002 0241 	 			case 0x2C:				//persian comma
;PCODE: $000005D4 VOL: 0
;PCODE: $000005D5 VOL: 0
;PCODE: $000005D6 VOL: 0
; 0002 0242 	    		curnLet = 0x1D;
;PCODE: $000005D7 VOL: 0
;PCODE: $000005D8 VOL: 0
; 0002 0243 	 				break;
;PCODE: $000005D9 VOL: 0
; 0002 0244 	 			case 0x2E:				//persian point
;PCODE: $000005DA VOL: 0
;PCODE: $000005DB VOL: 0
;PCODE: $000005DC VOL: 0
; 0002 0245 	    		curnLet = 0x1C;
;PCODE: $000005DD VOL: 0
;PCODE: $000005DE VOL: 0
; 0002 0246 	 				break;
;PCODE: $000005DF VOL: 0
; 0002 0247 			}//switch curnLet
;PCODE: $000005E0 VOL: 0
; 0002 0248 
; 0002 0249 			//--------------------------------
; 0002 024A 	  	nextLet = str[k++];
;PCODE: $000005E1 VOL: 0
;PCODE: $000005E2 VOL: 0
;PCODE: $000005E3 VOL: 0
;PCODE: $000005E4 VOL: 0
;PCODE: $000005E5 VOL: 0
;PCODE: $000005E6 VOL: 0
;PCODE: $000005E7 VOL: 0
; 0002 024B 	  	k--;
;PCODE: $000005E8 VOL: 0
;PCODE: $000005E9 VOL: 0
;PCODE: $000005EA VOL: 0
; 0002 024C 
; 0002 024D 	 		switch(nextLet)
;PCODE: $000005EB VOL: 0
;PCODE: $000005EC VOL: 0
; 0002 024E 	 		{
; 0002 024F 	 			case 0x81:				//peh
;PCODE: $000005ED VOL: 0
;PCODE: $000005EE VOL: 0
; 0002 0250 	    		nextLet = 0xEA;
;PCODE: $000005EF VOL: 0
;PCODE: $000005F0 VOL: 0
; 0002 0251 	 				break;
;PCODE: $000005F1 VOL: 0
; 0002 0252 	 			case 0x8D:				//cheh
;PCODE: $000005F2 VOL: 0
;PCODE: $000005F3 VOL: 0
;PCODE: $000005F4 VOL: 0
; 0002 0253 	    		nextLet = 0xEB;
;PCODE: $000005F5 VOL: 0
;PCODE: $000005F6 VOL: 0
; 0002 0254 	 				break;
;PCODE: $000005F7 VOL: 0
; 0002 0255 	 			case 0x8E:				//zheh
;PCODE: $000005F8 VOL: 0
;PCODE: $000005F9 VOL: 0
;PCODE: $000005FA VOL: 0
; 0002 0256 	    		nextLet = 0xEE;
;PCODE: $000005FB VOL: 0
;PCODE: $000005FC VOL: 0
; 0002 0257 	 				break;
;PCODE: $000005FD VOL: 0
; 0002 0258 	 			case 0x90:				//geh
;PCODE: $000005FE VOL: 0
;PCODE: $000005FF VOL: 0
;PCODE: $00000600 VOL: 0
; 0002 0259 	    		nextLet = 0xEF;
;PCODE: $00000601 VOL: 0
;PCODE: $00000602 VOL: 0
; 0002 025A 	 				break;
;PCODE: $00000603 VOL: 0
; 0002 025B                  case 0x98:				//Ke
;PCODE: $00000604 VOL: 0
;PCODE: $00000605 VOL: 0
;PCODE: $00000606 VOL: 0
; 0002 025C 		    		    nextLet = 0xDF;
;PCODE: $00000607 VOL: 0
;PCODE: $00000608 VOL: 0
; 0002 025D 		 				break;
;PCODE: $00000609 VOL: 0
; 0002 025E 	 			case 0x3F:				//persian question mark
;PCODE: $0000060A VOL: 0
;PCODE: $0000060B VOL: 0
;PCODE: $0000060C VOL: 0
; 0002 025F 	    		nextLet = 0xBF;
;PCODE: $0000060D VOL: 0
;PCODE: $0000060E VOL: 0
; 0002 0260 	 				break;
;PCODE: $0000060F VOL: 0
; 0002 0261 	 			case 0x3B:				//persian semicolon
;PCODE: $00000610 VOL: 0
;PCODE: $00000611 VOL: 0
;PCODE: $00000612 VOL: 0
; 0002 0262 	    		nextLet = 0x1F;
;PCODE: $00000613 VOL: 0
;PCODE: $00000614 VOL: 0
; 0002 0263 	 				break;
;PCODE: $00000615 VOL: 0
; 0002 0264 	 			case 0x2C:				//persian comma
;PCODE: $00000616 VOL: 0
;PCODE: $00000617 VOL: 0
;PCODE: $00000618 VOL: 0
; 0002 0265 	    		nextLet = 0x1D;
;PCODE: $00000619 VOL: 0
;PCODE: $0000061A VOL: 0
; 0002 0266 	 				break;
;PCODE: $0000061B VOL: 0
; 0002 0267 	 			case 0x2E:				//persian point
;PCODE: $0000061C VOL: 0
;PCODE: $0000061D VOL: 0
;PCODE: $0000061E VOL: 0
; 0002 0268 	    		nextLet = 0x1C;
;PCODE: $0000061F VOL: 0
;PCODE: $00000620 VOL: 0
; 0002 0269 	 				break;
;PCODE: $00000621 VOL: 0
; 0002 026A 			}//switch nextLet
;PCODE: $00000622 VOL: 0
; 0002 026B 
; 0002 026C 			if(curnLet > 0xC0)
;PCODE: $00000623 VOL: 0
;PCODE: $00000624 VOL: 0
;PCODE: $00000625 VOL: 0
; 0002 026D 			{
; 0002 026E 				if(prevLet > 0xC0)
;PCODE: $00000626 VOL: 0
;PCODE: $00000627 VOL: 0
;PCODE: $00000628 VOL: 0
; 0002 026F 					Pstat = (pgm_read_byte(&PEmap[prevLet-0xC1][5]));		// 1: prevLet attach to curnLet -- 0: prevLet don't attach to cu ...
;PCODE: $00000629 VOL: 0
;PCODE: $0000062A VOL: 0
;PCODE: $0000062B VOL: 0
;PCODE: $0000062C VOL: 0
;PCODE: $0000062D VOL: 0
;PCODE: $0000062E VOL: 0
;PCODE: $0000062F VOL: 0
;PCODE: $00000630 VOL: 0
; 0002 0270 				else
;PCODE: $00000631 VOL: 0
;PCODE: $00000632 VOL: 0
; 0002 0271 					Pstat = 0;
;PCODE: $00000633 VOL: 0
;PCODE: $00000634 VOL: 0
; 0002 0272 
; 0002 0273 				if(nextLet > 0xC0)
;PCODE: $00000635 VOL: 0
;PCODE: $00000636 VOL: 0
;PCODE: $00000637 VOL: 0
;PCODE: $00000638 VOL: 0
; 0002 0274 					Nstat = (pgm_read_byte(&PEmap[nextLet-0xC1][4]));		// 1: nextLet attach to curnLet -- 0: nextLet don't attach to cu ...
;PCODE: $00000639 VOL: 0
;PCODE: $0000063A VOL: 0
;PCODE: $0000063B VOL: 0
;PCODE: $0000063C VOL: 0
;PCODE: $0000063D VOL: 0
;PCODE: $0000063E VOL: 0
;PCODE: $0000063F VOL: 0
;PCODE: $00000640 VOL: 0
; 0002 0275 				else
;PCODE: $00000641 VOL: 0
;PCODE: $00000642 VOL: 0
; 0002 0276 					Nstat = 0;
;PCODE: $00000643 VOL: 0
;PCODE: $00000644 VOL: 0
; 0002 0277 
; 0002 0278 				//			Pstat	|	Nstat	|	stat
; 0002 0279 				//		 -------+-------+------
; 0002 027A 				//				0		|		0		|		0				curnLet, don't attach to prevLet and nextLet
; 0002 027B 				//				0		|		1		|		1				curnLet, don't attach to prevLet and attach to nextLet
; 0002 027C 				//				1		|		0		|		2				curnLet, attach to prevLet and don't attach to nextLet
; 0002 027D 				//				1		|		1		|		3				curnLet, attach to prevLet and nextLet
; 0002 027E 
; 0002 027F 				stat = (Pstat<<1) | Nstat;
;PCODE: $00000645 VOL: 0
;PCODE: $00000646 VOL: 0
;PCODE: $00000647 VOL: 0
;PCODE: $00000648 VOL: 0
;PCODE: $00000649 VOL: 0
; 0002 0280 
; 0002 0281 				if(stat>1)	FontSpaceX = 0;
;PCODE: $0000064A VOL: 0
;PCODE: $0000064B VOL: 0
;PCODE: $0000064C VOL: 0
;PCODE: $0000064D VOL: 0
;PCODE: $0000064E VOL: 0
; 0002 0282 				else 				FontSpaceX = backFontSpace;
;PCODE: $0000064F VOL: 0
;PCODE: $00000650 VOL: 0
;PCODE: $00000651 VOL: 0
;PCODE: $00000652 VOL: 0
; 0002 0283 
; 0002 0284 				PutCharPE(pgm_read_byte(&PEmap[curnLet-0xC1][stat]));
;PCODE: $00000653 VOL: 0
;PCODE: $00000654 VOL: 0
;PCODE: $00000655 VOL: 0
;PCODE: $00000656 VOL: 0
;PCODE: $00000657 VOL: 0
;PCODE: $00000658 VOL: 0
;PCODE: $00000659 VOL: 0
;PCODE: $0000065A VOL: 0
;PCODE: $0000065B VOL: 0
;PCODE: $0000065C VOL: 0
;PCODE: $0000065D VOL: 0
;PCODE: $0000065E VOL: 0
;PCODE: $0000065F VOL: 0
; 0002 0285 				FontSpaceX = backFontSpace;
;PCODE: $00000660 VOL: 0
;PCODE: $00000661 VOL: 0
; 0002 0286 			}
; 0002 0287 			else	//Original 'curnLet' below 193 without (     )  -- for digits and symbols!
;PCODE: $00000662 VOL: 0
;PCODE: $00000663 VOL: 0
; 0002 0288 			{
; 0002 0289 	  		if((curnLet >= '0') && (curnLet <= '9'))		// 0 to 9
;PCODE: $00000664 VOL: 0
;PCODE: $00000665 VOL: 0
;PCODE: $00000666 VOL: 0
;PCODE: $00000667 VOL: 0
;PCODE: $00000668 VOL: 0
;PCODE: $00000669 VOL: 0
;PCODE: $0000066A VOL: 0
;PCODE: $0000066B VOL: 0
;PCODE: $0000066C VOL: 0
;PCODE: $0000066D VOL: 0
; 0002 028A 	  		{
; 0002 028B 	  			i++;
;PCODE: $0000066E VOL: 0
;PCODE: $0000066F VOL: 0
; 0002 028C 	  			strTemp[i] 	 = curnLet;
;PCODE: $00000670 VOL: 0
;PCODE: $00000671 VOL: 0
;PCODE: $00000672 VOL: 0
;PCODE: $00000673 VOL: 0
;PCODE: $00000674 VOL: 0
; 0002 028D 
; 0002 028E 	  			if(!((nextLet >= '0') && (nextLet <= '9')))
;PCODE: $00000675 VOL: 0
;PCODE: $00000676 VOL: 0
;PCODE: $00000677 VOL: 0
;PCODE: $00000678 VOL: 0
;PCODE: $00000679 VOL: 0
;PCODE: $0000067A VOL: 0
;PCODE: $0000067B VOL: 0
;PCODE: $0000067C VOL: 0
; 0002 028F 					{
; 0002 0290 						for(j=i; j>0; j--)
;PCODE: $0000067D VOL: 0
;PCODE: $0000067E VOL: 0
;PCODE: $0000067F VOL: 0
;PCODE: $00000680 VOL: 0
;PCODE: $00000681 VOL: 0
;PCODE: $00000682 VOL: 0
;PCODE: $00000683 VOL: 0
;PCODE: $00000684 VOL: 0
;PCODE: $00000685 VOL: 0
;PCODE: $00000686 VOL: 0
; 0002 0291 							PutCharPE(strTemp[j]-0x20);
;PCODE: $00000687 VOL: 0
;PCODE: $00000688 VOL: 0
;PCODE: $00000689 VOL: 0
;PCODE: $0000068A VOL: 0
;PCODE: $0000068B VOL: 0
;PCODE: $0000068C VOL: 0
;PCODE: $0000068D VOL: 0
;PCODE: $0000068E VOL: 0
;PCODE: $0000068F VOL: 0
;PCODE: $00000690 VOL: 0
;PCODE: $00000691 VOL: 0
;PCODE: $00000692 VOL: 0
;PCODE: $00000693 VOL: 0
;PCODE: $00000694 VOL: 0
; 0002 0293 i = 0;
;PCODE: $00000695 VOL: 0
;PCODE: $00000696 VOL: 0
; 0002 0294 					}
; 0002 0295 				}
;PCODE: $00000697 VOL: 0
; 0002 0296 				else
;PCODE: $00000698 VOL: 0
;PCODE: $00000699 VOL: 0
; 0002 0297 					PutCharPE(curnLet);
;PCODE: $0000069A VOL: 0
;PCODE: $0000069B VOL: 0
; 0002 0298 			}
;PCODE: $0000069C VOL: 0
;PCODE: $0000069D VOL: 0
; 0002 0299 
; 0002 029A 			prevLet = curnLet;
;PCODE: $0000069E VOL: 0
;PCODE: $0000069F VOL: 0
; 0002 029B 		}//while
;PCODE: $000006A0 VOL: 0
;PCODE: $000006A1 VOL: 0
; 0002 029C 
; 0002 029D 	 	prevLet = 0xFF;
;PCODE: $000006A2 VOL: 0
;PCODE: $000006A3 VOL: 0
; 0002 029E 	#endif
; 0002 029F }	//*PutsPE
;PCODE: $000006A4 VOL: 0
;PCODE: $000006A5 VOL: 0
;PCODE: $000006A6 VOL: 0
;PCODE: $000006A7 VOL: 0
;
;//-------------------------------------------------
;//**** select font
;void LcdFont(const unsigned char *pointer)
; 0002 02A4 {
;PCODE: $000006A8 VOL: 0
;PCODE: $000006A9 VOL: 0
; 0002 02A5 	FontPointer 			= pointer;
;PCODE: $000006AA VOL: 0
;	*pointer -> Y+0
;PCODE: $000006AB VOL: 0
;PCODE: $000006AC VOL: 0
; 0002 02A6 
; 0002 02A7 	FontWidth 				= pgm_read_byte(&FontPointer[2]);
;PCODE: $000006AD VOL: 0
;PCODE: $000006AE VOL: 0
;PCODE: $000006AF VOL: 0
;PCODE: $000006B0 VOL: 0
; 0002 02A8 	FontHeight				= pgm_read_byte(&FontPointer[3]);
;PCODE: $000006B1 VOL: 0
;PCODE: $000006B2 VOL: 0
;PCODE: $000006B3 VOL: 0
;PCODE: $000006B4 VOL: 0
; 0002 02A9 
; 0002 02AA 	fontSize					=	pgm_read_word(&FontPointer[0]);
;PCODE: $000006B5 VOL: 0
;PCODE: $000006B6 VOL: 0
;PCODE: $000006B7 VOL: 0
; 0002 02AB 	firstchar 				=	pgm_read_byte(&FontPointer[5]);
;PCODE: $000006B8 VOL: 0
;PCODE: $000006B9 VOL: 0
;PCODE: $000006BA VOL: 0
; 0002 02AC 	lastchar 					=	pgm_read_byte(&FontPointer[6]);
;PCODE: $000006BB VOL: 0
;PCODE: $000006BC VOL: 0
;PCODE: $000006BD VOL: 0
; 0002 02AD }	//*LcdFont
;PCODE: $000006BE VOL: 0
;PCODE: $000006BF VOL: 0
;PCODE: $000006C0 VOL: 0
;
;void SetLetter(Lt_Mode L)
; 0002 02B0 {
;PCODE: $000006C1 VOL: 0
;PCODE: $000006C2 VOL: 0
; 0002 02B1 	#if (PersianSupport ==1)
; 0002 02B2 		peLETTER = L;
;PCODE: $000006C3 VOL: 0
;	L -> Y+0
;PCODE: $000006C4 VOL: 0
;PCODE: $000006C5 VOL: 0
; 0002 02B3 
; 0002 02B4 		if(L == P_LETTER)
;PCODE: $000006C6 VOL: 0
;PCODE: $000006C7 VOL: 0
;PCODE: $000006C8 VOL: 0
; 0002 02B5 			cursorX = GetMaxX();
;PCODE: $000006C9 VOL: 0
;PCODE: $000006CA VOL: 0
; 0002 02B6 		else
;PCODE: $000006CB VOL: 0
;PCODE: $000006CC VOL: 0
; 0002 02B7 			cursorX = 0;
;PCODE: $000006CD VOL: 0
;PCODE: $000006CE VOL: 0
; 0002 02B8 	#endif
; 0002 02B9 }	//*SetLetter
;PCODE: $000006CF VOL: 0
;PCODE: $000006D0 VOL: 0
;PCODE: $000006D1 VOL: 0
;PCODE: $000006D2 VOL: 0
;
;void SetLine(unsigned char line,unsigned char column)
; 0002 02BC {
;PCODE: $000006D3 VOL: 0
;PCODE: $000006D4 VOL: 0
; 0002 02BD 	#if (PersianSupport ==1)
; 0002 02BE 		if(peLETTER == P_LETTER)
;PCODE: $000006D5 VOL: 0
;	line -> Y+1
;	column -> Y+0
;PCODE: $000006D6 VOL: 0
;PCODE: $000006D7 VOL: 0
;PCODE: $000006D8 VOL: 0
; 0002 02BF 			cursorX =GetMaxX() - (unsigned int)FontWidth  * FontXScale * column;
;PCODE: $000006D9 VOL: 0
;PCODE: $000006DA VOL: 0
;PCODE: $000006DB VOL: 0
;PCODE: $000006DC VOL: 0
;PCODE: $000006DD VOL: 0
;PCODE: $000006DE VOL: 0
;PCODE: $000006DF VOL: 0
;PCODE: $000006E0 VOL: 0
;PCODE: $000006E1 VOL: 0
;PCODE: $000006E2 VOL: 0
;PCODE: $000006E3 VOL: 0
;PCODE: $000006E4 VOL: 0
; 0002 02C0 		else
;PCODE: $000006E5 VOL: 0
;PCODE: $000006E6 VOL: 0
; 0002 02C1 	#endif
; 0002 02C2 			cursorX =(unsigned int)FontWidth  * FontXScale * column;
;PCODE: $000006E7 VOL: 0
;PCODE: $000006E8 VOL: 0
;PCODE: $000006E9 VOL: 0
;PCODE: $000006EA VOL: 0
;PCODE: $000006EB VOL: 0
;PCODE: $000006EC VOL: 0
;PCODE: $000006ED VOL: 0
;PCODE: $000006EE VOL: 0
;PCODE: $000006EF VOL: 0
;PCODE: $000006F0 VOL: 0
; 0002 02C3 
; 0002 02C4 	cursorY =(unsigned int)(FontHeight +FontSpaceY)* FontYScale * line;
;PCODE: $000006F1 VOL: 0
;PCODE: $000006F2 VOL: 0
;PCODE: $000006F3 VOL: 0
;PCODE: $000006F4 VOL: 0
;PCODE: $000006F5 VOL: 0
;PCODE: $000006F6 VOL: 0
;PCODE: $000006F7 VOL: 0
;PCODE: $000006F8 VOL: 0
;PCODE: $000006F9 VOL: 0
;PCODE: $000006FA VOL: 0
;PCODE: $000006FB VOL: 0
;PCODE: $000006FC VOL: 0
;PCODE: $000006FD VOL: 0
;PCODE: $000006FE VOL: 0
; 0002 02C5 }	//*SetLine
;PCODE: $000006FF VOL: 0
;PCODE: $00000700 VOL: 0
;PCODE: $00000701 VOL: 0
;
;
;//-------------------------------------------------
;//**** draw char
;void PutChar(unsigned char c)
; 0002 02CB {
;PCODE: $00000702 VOL: 0
;PCODE: $00000703 VOL: 0
; 0002 02CC 	#if (PersianSupport ==1)
; 0002 02CD 	  if(peLETTER == P_LETTER)
;PCODE: $00000704 VOL: 0
;	c -> Y+0
;PCODE: $00000705 VOL: 0
;PCODE: $00000706 VOL: 0
;PCODE: $00000707 VOL: 0
; 0002 02CE 			PutCharPE(c);
;PCODE: $00000708 VOL: 0
;PCODE: $00000709 VOL: 0
; 0002 02CF 		else
;PCODE: $0000070A VOL: 0
;PCODE: $0000070B VOL: 0
; 0002 02D0 	#endif
; 0002 02D1 			PutCharEN(c);
;PCODE: $0000070C VOL: 0
;PCODE: $0000070D VOL: 0
; 0002 02D2 }	//*PutChar
;PCODE: $0000070E VOL: 0
;PCODE: $0000070F VOL: 0
;PCODE: $00000710 VOL: 0
;PCODE: $00000711 VOL: 0
;
;//**** draw string
;void Puts(char *Text)
; 0002 02D6 {
;PCODE: $00000712 VOL: 0
;PCODE: $00000713 VOL: 0
; 0002 02D7 	unsigned int		i = 0;
; 0002 02D8 
; 0002 02D9 	#if (PersianSupport ==1)
; 0002 02DA 	  if(peLETTER == P_LETTER)
;PCODE: $00000714 VOL: 0
;PCODE: $00000715 VOL: 0
;PCODE: $00000716 VOL: 0
;	*Text -> Y+2
;	i -> R16,R17
;PCODE: $00000717 VOL: 0
;PCODE: $00000718 VOL: 0
;PCODE: $00000719 VOL: 0
;PCODE: $0000071A VOL: 0
;PCODE: $0000071B VOL: 0
; 0002 02DB 	  {
; 0002 02DC 			PutsPE(Text);
;PCODE: $0000071C VOL: 0
;PCODE: $0000071D VOL: 0
; 0002 02DD 		}
; 0002 02DE 		else
;PCODE: $0000071E VOL: 0
;PCODE: $0000071F VOL: 0
; 0002 02DF 	#endif
; 0002 02E0 		{
; 0002 02E1 			while(Text[i])
;PCODE: $00000720 VOL: 0
;PCODE: $00000721 VOL: 0
;PCODE: $00000722 VOL: 0
;PCODE: $00000723 VOL: 0
;PCODE: $00000724 VOL: 0
;PCODE: $00000725 VOL: 0
;PCODE: $00000726 VOL: 0
; 0002 02E2 				PutCharEN(Text[i++]);
;PCODE: $00000727 VOL: 0
;PCODE: $00000728 VOL: 0
;PCODE: $00000729 VOL: 0
;PCODE: $0000072A VOL: 0
;PCODE: $0000072B VOL: 0
;PCODE: $0000072C VOL: 0
;PCODE: $0000072D VOL: 0
;PCODE: $0000072E VOL: 0
;PCODE: $0000072F VOL: 0
; 0002 02E3 }
;PCODE: $00000730 VOL: 0
; 0002 02E4 }	//*Puts
;PCODE: $00000731 VOL: 0
;PCODE: $00000732 VOL: 0
;PCODE: $00000733 VOL: 0
;PCODE: $00000734 VOL: 0
;PCODE: $00000735 VOL: 0
;PCODE: $00000736 VOL: 0
;PCODE: $00000737 VOL: 0
;
;
