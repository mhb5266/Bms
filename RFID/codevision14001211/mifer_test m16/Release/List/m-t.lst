
AVRASM ver. 2.1.30  D:\Bms\RFID\codevision14001211\mifer_test m16\Release\List\m-t.asm Wed Mar 02 17:43:06 2022

D:\Bms\RFID\codevision14001211\mifer_test m16\Release\List\m-t.asm(1086): warning: Register r5 already defined by the .DEF directive
D:\Bms\RFID\codevision14001211\mifer_test m16\Release\List\m-t.asm(1087): warning: Register r4 already defined by the .DEF directive
D:\Bms\RFID\codevision14001211\mifer_test m16\Release\List\m-t.asm(1088): warning: Register r7 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.12 Advanced
                 ;(C) Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Release
                 ;Chip type              : ATmega8
                 ;Program type           : Application
                 ;Clock frequency        : 8.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 256 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: Yes
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega8
                 	#pragma AVRPART MEMORY PROG_FLASH 8192
                 	#pragma AVRPART MEMORY EEPROM 512
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 1024
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU GICR=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x045F
                 	.EQU __DSTACK_SIZE=0x0100
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	RCALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	RCALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	RCALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	RCALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	RCALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	RCALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF __lcd_x=R5
                 	.DEF __lcd_y=R4
                 	.DEF __lcd_maxx=R7
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 c02e      	RJMP __RESET
000001 cffe      	RJMP 0x00
000002 cffd      	RJMP 0x00
000003 cffc      	RJMP 0x00
000004 cffb      	RJMP 0x00
000005 cffa      	RJMP 0x00
000006 cff9      	RJMP 0x00
000007 cff8      	RJMP 0x00
000008 cff7      	RJMP 0x00
000009 cff6      	RJMP 0x00
00000a cff5      	RJMP 0x00
00000b cff4      	RJMP 0x00
00000c cff3      	RJMP 0x00
00000d cff2      	RJMP 0x00
00000e cff1      	RJMP 0x00
00000f cff0      	RJMP 0x00
000010 cfef      	RJMP 0x00
000011 cfee      	RJMP 0x00
000012 cfed      	RJMP 0x00
                 
                 _tbl10_G102:
000013 2710
000014 03e8
000015 0064
000016 000a      	.DB  0x10,0x27,0xE8,0x3,0x64,0x0,0xA,0x0
000017 0001      	.DB  0x1,0x0
                 _tbl16_G102:
000018 1000
000019 0100
00001a 0010
00001b 0001      	.DB  0x0,0x10,0x0,0x1,0x10,0x0,0x1,0x0
                 
                 ;REGISTER BIT VARIABLES INITIALIZATION
                 __REG_BIT_VARS:
00001c 0000      	.DW  0x0000
                 
                 _0x0:
00001d 3a41
00001e 3325
00001f 2064
000020 3325      	.DB  0x41,0x3A,0x25,0x33,0x64,0x20,0x25,0x33
000021 0064
000022 3a42
000023 3325
000024 2064      	.DB  0x64,0x0,0x42,0x3A,0x25,0x33,0x64,0x20
000025 3325
000026 0064      	.DB  0x25,0x33,0x64,0x0
                 _0x2000003:
000027 c080      	.DB  0x80,0xC0
                 
                 __GLOBAL_INI_TBL:
000028 0001      	.DW  0x01
000029 0002      	.DW  0x02
00002a 0038      	.DW  __REG_BIT_VARS*2
                 
00002b 0002      	.DW  0x02
00002c 0174      	.DW  __base_y_G100
00002d 004e      	.DW  _0x2000003*2
                 
                 _0xFFFFFFFF:
00002e 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
00002f 94f8      	CLI
000030 27ee      	CLR  R30
000031 bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
000032 e0f1      	LDI  R31,1
000033 bffb      	OUT  GICR,R31
000034 bfeb      	OUT  GICR,R30
000035 bfe5      	OUT  MCUCR,R30
                 
                 ;CLEAR R2-R14
000036 e08d      	LDI  R24,(14-2)+1
000037 e0a2      	LDI  R26,2
000038 27bb      	CLR  R27
                 __CLEAR_REG:
000039 93ed      	ST   X+,R30
00003a 958a      	DEC  R24
00003b f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
00003c e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
00003d e094      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
00003e e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
00003f 93ed      	ST   X+,R30
000040 9701      	SBIW R24,1
000041 f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
000042 e5e0      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
000043 e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
000044 9185      	LPM  R24,Z+
000045 9195      	LPM  R25,Z+
000046 9700      	SBIW R24,0
000047 f061      	BREQ __GLOBAL_INI_END
000048 91a5      	LPM  R26,Z+
000049 91b5      	LPM  R27,Z+
00004a 9005      	LPM  R0,Z+
00004b 9015      	LPM  R1,Z+
00004c 01bf      	MOVW R22,R30
00004d 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
00004e 9005      	LPM  R0,Z+
00004f 920d      	ST   X+,R0
000050 9701      	SBIW R24,1
000051 f7e1      	BRNE __GLOBAL_INI_LOOP
000052 01fb      	MOVW R30,R22
000053 cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
000054 e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
000055 bfed      	OUT  SPL,R30
000056 e0e4      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
000057 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
000058 e6c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
000059 e0d1      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
00005a c1f4      	RJMP _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x160
                 
                 	.CSEG
                 ;/*******************************************************
                 ;Chip type               : ATmega16A
                 ;AVR Core Clock frequency: 8/000000 MHz
                 ;*******************************************************/
                 ;#include <mega8.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x80
                 	.EQU __sm_mask=0x70
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0x60
                 	.EQU __sm_ext_standby=0x70
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;#include <alcd.h>
                 ;#include <spi.h>
                 ;#include <stdio.h>
                 ;#include "MFRC522.h"
                 
                 	.CSEG
                 _PcdReset:
                 ; .FSTART _PcdReset
00005b d433      	RCALL SUBOPT_0x0
00005c e0af      	LDI  R26,LOW(15)
00005d d198      	RCALL _WriteRawRC
00005e e1e1      	LDI  R30,LOW(17)
00005f 93ea      	ST   -Y,R30
000060 e3ad      	LDI  R26,LOW(61)
000061 d194      	RCALL _WriteRawRC
000062 e2ed      	LDI  R30,LOW(45)
000063 93ea      	ST   -Y,R30
000064 e1ae      	LDI  R26,LOW(30)
000065 d190      	RCALL _WriteRawRC
000066 e2ec      	LDI  R30,LOW(44)
000067 93ea      	ST   -Y,R30
000068 d429      	RCALL SUBOPT_0x1
000069 e2ea      	LDI  R30,LOW(42)
00006a 93ea      	ST   -Y,R30
00006b e8ad      	LDI  R26,LOW(141)
00006c d189      	RCALL _WriteRawRC
00006d e2eb      	LDI  R30,LOW(43)
00006e 93ea      	ST   -Y,R30
00006f e3ae      	LDI  R26,LOW(62)
000070 d185      	RCALL _WriteRawRC
000071 e1e5      	LDI  R30,LOW(21)
000072 93ea      	ST   -Y,R30
000073 e4a0      	LDI  R26,LOW(64)
000074 d181      	RCALL _WriteRawRC
000075 e0e0      	LDI  R30,LOW(0)
000076 9508      	RET
                 ; .FEND
                 _PcdAntennaOn:
                 ; .FSTART _PcdAntennaOn
000077 931a      	ST   -Y,R17
                 ;	i -> R17
000078 e1a4      	LDI  R26,LOW(20)
000079 d187      	RCALL _ReadRawRC
00007a 2f1e      	MOV  R17,R30
00007b 70e3      	ANDI R30,LOW(0x3)
00007c f411      	BRNE _0x3
00007d d416      	RCALL SUBOPT_0x2
00007e d18e      	RCALL _SetBitMask
                 _0x3:
00007f 9119      	LD   R17,Y+
000080 9508      	RET
                 ; .FEND
                 _PcdAntennaOff:
                 ; .FSTART _PcdAntennaOff
000081 d412      	RCALL SUBOPT_0x2
000082 d18d      	RCALL _ClearBitMask
000083 9508      	RET
                 ; .FEND
                 _PcdRequest:
                 ; .FSTART _PcdRequest
000084 93ba      	ST   -Y,R27
000085 93aa      	ST   -Y,R26
000086 9762      	SBIW R28,18
000087 d4b1      	RCALL __SAVELOCR4
                 ;	req_code -> Y+24
                 ;	*pTagType -> Y+22
                 ;	status -> R17
                 ;	unLen -> R18,R19
                 ;	ucComMF522Buf -> Y+4
000088 d40f      	RCALL SUBOPT_0x3
000089 e0a7      	LDI  R26,LOW(7)
00008a d16b      	RCALL _WriteRawRC
00008b d408      	RCALL SUBOPT_0x2
00008c d180      	RCALL _SetBitMask
00008d 8de8      	LDD  R30,Y+24
00008e 83ec      	STD  Y+4,R30
00008f d40f      	RCALL SUBOPT_0x4
000090 01fe      	MOVW R30,R28
000091 9635      	ADIW R30,5
000092 d40f      	RCALL SUBOPT_0x5
000093 d3fb      	RCALL SUBOPT_0x0
000094 01fe      	MOVW R30,R28
000095 9638      	ADIW R30,8
000096 d40b      	RCALL SUBOPT_0x5
000097 b7ad      	IN   R26,SPL
000098 b7be      	IN   R27,SPH
000099 9711      	SBIW R26,1
00009a 933f      	PUSH R19
00009b 932f      	PUSH R18
00009c d07b      	RCALL _PcdComMF522
00009d 912f      	POP  R18
00009e 913f      	POP  R19
00009f 2f1e      	MOV  R17,R30
0000a0 3010      	CPI  R17,0
0000a1 f429      	BRNE _0x5
0000a2 e1e0      	LDI  R30,LOW(16)
0000a3 e0f0      	LDI  R31,HIGH(16)
0000a4 17e2      	CP   R30,R18
0000a5 07f3      	CPC  R31,R19
0000a6 f009      	BREQ _0x6
                 _0x5:
0000a7 c00a      	RJMP _0x4
                 _0x6:
0000a8 81ec      	LDD  R30,Y+4
0000a9 89ae      	LDD  R26,Y+22
0000aa 89bf      	LDD  R27,Y+22+1
0000ab 93ec      	ST   X,R30
0000ac 81ed      	LDD  R30,Y+5
                +
0000ad 89ae     +LDD R26 , Y + 22
0000ae 89bf     +LDD R27 , Y + 22 + 1
0000af 9611     +ADIW R26 , 1
0000b0 93ec     +ST X , R30
                 	__PUTB1SNS 22,1
0000b1 c001      	RJMP _0x7
                 _0x4:
0000b2 ef1e      	LDI  R17,LOW(254)
                 _0x7:
0000b3 2fe1      	MOV  R30,R17
0000b4 d48b      	RCALL __LOADLOCR4
0000b5 9669      	ADIW R28,25
0000b6 9508      	RET
                 ; .FEND
                 _PcdAnticoll:
                 ; .FSTART _PcdAnticoll
0000b7 d3ed      	RCALL SUBOPT_0x6
0000b8 9762      	SBIW R28,18
0000b9 d47d      	RCALL __SAVELOCR6
                 ;	*pSnr -> Y+24
                 ;	status -> R17
                 ;	i -> R16
                 ;	snr_check -> R19
                 ;	unLen -> R20,R21
                 ;	ucComMF522Buf -> Y+6
0000ba e030      	LDI  R19,0
0000bb d3dc      	RCALL SUBOPT_0x3
0000bc d3d5      	RCALL SUBOPT_0x1
0000bd e0ee      	LDI  R30,LOW(14)
0000be d3e9      	RCALL SUBOPT_0x7
0000bf d150      	RCALL _ClearBitMask
0000c0 e9e3      	LDI  R30,LOW(147)
0000c1 83ee      	STD  Y+6,R30
0000c2 e2e0      	LDI  R30,LOW(32)
0000c3 83ef      	STD  Y+7,R30
0000c4 d3da      	RCALL SUBOPT_0x4
0000c5 01fe      	MOVW R30,R28
0000c6 9637      	ADIW R30,7
0000c7 d3da      	RCALL SUBOPT_0x5
0000c8 e0e2      	LDI  R30,LOW(2)
0000c9 93ea      	ST   -Y,R30
0000ca 01fe      	MOVW R30,R28
0000cb 963a      	ADIW R30,10
0000cc d3d5      	RCALL SUBOPT_0x5
0000cd b7ad      	IN   R26,SPL
0000ce b7be      	IN   R27,SPH
0000cf 9711      	SBIW R26,1
0000d0 935f      	PUSH R21
0000d1 934f      	PUSH R20
0000d2 d045      	RCALL _PcdComMF522
0000d3 914f      	POP  R20
0000d4 915f      	POP  R21
0000d5 2f1e      	MOV  R17,R30
0000d6 3010      	CPI  R17,0
0000d7 f4b9      	BRNE _0x8
0000d8 e000      	LDI  R16,LOW(0)
                 _0xA:
0000d9 3004      	CPI  R16,4
0000da f478      	BRSH _0xB
0000db d3cf      	RCALL SUBOPT_0x8
0000dc 8da8      	LDD  R26,Y+24
0000dd 8db9      	LDD  R27,Y+24+1
0000de 0fea      	ADD  R30,R26
0000df 1ffb      	ADC  R31,R27
0000e0 010f      	MOVW R0,R30
0000e1 d3c9      	RCALL SUBOPT_0x8
0000e2 d3cb      	RCALL SUBOPT_0x9
0000e3 01d0      	MOVW R26,R0
0000e4 93ec      	ST   X,R30
0000e5 d3c5      	RCALL SUBOPT_0x8
0000e6 d3c7      	RCALL SUBOPT_0x9
0000e7 273e      	EOR  R19,R30
0000e8 5f0f      	SUBI R16,-1
0000e9 cfef      	RJMP _0xA
                 _0xB:
0000ea d3c0      	RCALL SUBOPT_0x8
0000eb d3c2      	RCALL SUBOPT_0x9
0000ec 17e3      	CP   R30,R19
0000ed f009      	BREQ _0xC
0000ee ef1e      	LDI  R17,LOW(254)
                 _0xC:
                 _0x8:
0000ef e0ee      	LDI  R30,LOW(14)
0000f0 d3b7      	RCALL SUBOPT_0x7
0000f1 d11b      	RCALL _SetBitMask
0000f2 2fe1      	MOV  R30,R17
0000f3 d44a      	RCALL __LOADLOCR6
0000f4 966a      	ADIW R28,26
0000f5 9508      	RET
                 ; .FEND
                 ;	*pSnr -> Y+22
                 ;	status -> R17
                 ;	i -> R16
                 ;	unLen -> R18,R19
                 ;	ucComMF522Buf -> Y+4
                 ;	auth_mode -> Y+27
                 ;	addr -> Y+26
                 ;	*pKey -> Y+24
                 ;	*pSnr -> Y+22
                 ;	status -> R17
                 ;	unLen -> R18,R19
                 ;	i -> R16
                 ;	ucComMF522Buf -> Y+4
                 ;	addr -> Y+24
                 ;	*pData -> Y+22
                 ;	status -> R17
                 ;	unLen -> R18,R19
                 ;	i -> R16
                 ;	ucComMF522Buf -> Y+4
                 ;	addr -> Y+24
                 ;	*pData -> Y+22
                 ;	status -> R17
                 ;	unLen -> R18,R19
                 ;	i -> R16
                 ;	ucComMF522Buf -> Y+4
                 ;	dd_mode -> Y+25
                 ;	addr -> Y+24
                 ;	*pValue -> Y+22
                 ;	status -> R17
                 ;	unLen -> R18,R19
                 ;	i -> R16
                 ;	ucComMF522Buf -> Y+4
                 ;	sourceaddr -> Y+23
                 ;	goaladdr -> Y+22
                 ;	status -> R17
                 ;	unLen -> R18,R19
                 ;	ucComMF522Buf -> Y+4
                 _PcdHalt:
                 ; .FSTART _PcdHalt
0000f6 9762      	SBIW R28,18
0000f7 d443      	RCALL __SAVELOCR2
                 ;	unLen -> R16,R17
                 ;	ucComMF522Buf -> Y+2
0000f8 e5e0      	LDI  R30,LOW(80)
0000f9 83ea      	STD  Y+2,R30
0000fa e0e0      	LDI  R30,LOW(0)
0000fb 83eb      	STD  Y+3,R30
0000fc 01fe      	MOVW R30,R28
0000fd 9632      	ADIW R30,2
0000fe d3a3      	RCALL SUBOPT_0x5
0000ff e0e2      	LDI  R30,LOW(2)
000100 93ea      	ST   -Y,R30
000101 01de      	MOVW R26,R28
000102 9617      	ADIW R26,7
000103 d0c0      	RCALL _CalulateCRC
000104 d39a      	RCALL SUBOPT_0x4
000105 01fe      	MOVW R30,R28
000106 9633      	ADIW R30,3
000107 d39a      	RCALL SUBOPT_0x5
000108 e0e4      	LDI  R30,LOW(4)
000109 93ea      	ST   -Y,R30
00010a 01fe      	MOVW R30,R28
00010b 9636      	ADIW R30,6
00010c d395      	RCALL SUBOPT_0x5
00010d b7ad      	IN   R26,SPL
00010e b7be      	IN   R27,SPH
00010f 9711      	SBIW R26,1
000110 931f      	PUSH R17
000111 930f      	PUSH R16
000112 d005      	RCALL _PcdComMF522
000113 910f      	POP  R16
000114 911f      	POP  R17
000115 e0e0      	LDI  R30,LOW(0)
000116 d42b      	RCALL __LOADLOCR2
000117 c335      	RJMP _0x20A0002
                 ; .FEND
                 _PcdComMF522:
                 ; .FSTART _PcdComMF522
000118 d38c      	RCALL SUBOPT_0x6
000119 9722      	SBIW R28,2
00011a d41c      	RCALL __SAVELOCR6
                 ;	Command -> Y+15
                 ;	*pInData -> Y+13
                 ;	InLenByte -> Y+12
                 ;	*pOutData -> Y+10
                 ;	*pOutLenBit -> Y+8
                 ;	status -> R17
                 ;	irqEn -> R16
                 ;	waitFor -> R19
                 ;	lastBits -> R18
                 ;	n -> R21
                 ;	i -> Y+6
00011b ef1e      	LDI  R17,254
00011c e000      	LDI  R16,0
00011d e030      	LDI  R19,0
00011e 85ef      	LDD  R30,Y+15
00011f e0f0      	LDI  R31,0
000120 30ee      	CPI  R30,LOW(0xE)
000121 e0a0      	LDI  R26,HIGH(0xE)
000122 07fa      	CPC  R31,R26
000123 f419      	BRNE _0x46
000124 e102      	LDI  R16,LOW(18)
000125 e130      	LDI  R19,LOW(16)
000126 c006      	RJMP _0x45
                 _0x46:
000127 30ec      	CPI  R30,LOW(0xC)
000128 e0a0      	LDI  R26,HIGH(0xC)
000129 07fa      	CPC  R31,R26
00012a f411      	BRNE _0x48
00012b e707      	LDI  R16,LOW(119)
00012c e330      	LDI  R19,LOW(48)
                 _0x48:
                 _0x45:
00012d e0e2      	LDI  R30,LOW(2)
00012e 93ea      	ST   -Y,R30
00012f 2fe0      	MOV  R30,R16
000130 68e0      	ORI  R30,0x80
000131 2fae      	MOV  R26,R30
000132 d0c3      	RCALL _WriteRawRC
000133 e0e4      	LDI  R30,LOW(4)
000134 d373      	RCALL SUBOPT_0x7
000135 d0da      	RCALL _ClearBitMask
000136 d358      	RCALL SUBOPT_0x0
000137 d35a      	RCALL SUBOPT_0x1
000138 e0ea      	LDI  R30,LOW(10)
000139 d36e      	RCALL SUBOPT_0x7
00013a d0d2      	RCALL _SetBitMask
00013b e0e0      	LDI  R30,LOW(0)
00013c 83ee      	STD  Y+6,R30
00013d 83ef      	STD  Y+6+1,R30
                 _0x4A:
00013e 85ec      	LDD  R30,Y+12
00013f d374      	RCALL SUBOPT_0xA
000140 e0f0      	LDI  R31,0
000141 17ae      	CP   R26,R30
000142 07bf      	CPC  R27,R31
000143 f458      	BRSH _0x4B
000144 e0e9      	LDI  R30,LOW(9)
000145 93ea      	ST   -Y,R30
000146 81ef      	LDD  R30,Y+7
000147 85f8      	LDD  R31,Y+7+1
000148 85ae      	LDD  R26,Y+14
000149 85bf      	LDD  R27,Y+14+1
00014a d36c      	RCALL SUBOPT_0xB
00014b d36f      	RCALL SUBOPT_0xC
00014c 9631      	ADIW R30,1
00014d d370      	RCALL SUBOPT_0xD
00014e cfef      	RJMP _0x4A
                 _0x4B:
00014f d33f      	RCALL SUBOPT_0x0
000150 89a8      	LDD  R26,Y+16
000151 d0a4      	RCALL _WriteRawRC
000152 85af      	LDD  R26,Y+15
000153 30ac      	CPI  R26,LOW(0xC)
000154 f419      	BRNE _0x4C
000155 e0ed      	LDI  R30,LOW(13)
000156 d351      	RCALL SUBOPT_0x7
000157 d0b5      	RCALL _SetBitMask
                 _0x4C:
000158 e5e8      	LDI  R30,LOW(600)
000159 e0f2      	LDI  R31,HIGH(600)
00015a d363      	RCALL SUBOPT_0xD
                 _0x4E:
00015b e0a4      	LDI  R26,LOW(4)
00015c d0a4      	RCALL _ReadRawRC
00015d 2f5e      	MOV  R21,R30
00015e d35c      	RCALL SUBOPT_0xC
00015f 9731      	SBIW R30,1
000160 d35d      	RCALL SUBOPT_0xD
000161 d352      	RCALL SUBOPT_0xA
000162 9710      	SBIW R26,0
000163 f029      	BREQ _0x50
000164 fd50      	SBRC R21,0
000165 c003      	RJMP _0x50
000166 2fe3      	MOV  R30,R19
000167 23e5      	AND  R30,R21
000168 f009      	BREQ _0x51
                 _0x50:
000169 c001      	RJMP _0x4F
                 _0x51:
00016a cff0      	RJMP _0x4E
                 _0x4F:
00016b e0ed      	LDI  R30,LOW(13)
00016c d33b      	RCALL SUBOPT_0x7
00016d d0a2      	RCALL _ClearBitMask
00016e d34c      	RCALL SUBOPT_0xC
00016f 9730      	SBIW R30,0
000170 f409      	BRNE PC+2
000171 c049      	RJMP _0x52
000172 e0a6      	LDI  R26,LOW(6)
000173 d08d      	RCALL _ReadRawRC
000174 71eb      	ANDI R30,LOW(0x1B)
000175 f009      	BREQ PC+2
000176 c043      	RJMP _0x53
000177 e010      	LDI  R17,LOW(0)
000178 2fe0      	MOV  R30,R16
000179 23e5      	AND  R30,R21
00017a 70e1      	ANDI R30,LOW(0x1)
00017b f009      	BREQ _0x54
00017c ef1f      	LDI  R17,LOW(255)
                 _0x54:
00017d 85af      	LDD  R26,Y+15
00017e 30ac      	CPI  R26,LOW(0xC)
00017f f5c9      	BRNE _0x55
000180 e0aa      	LDI  R26,LOW(10)
000181 d07f      	RCALL _ReadRawRC
000182 2f5e      	MOV  R21,R30
000183 e0ac      	LDI  R26,LOW(12)
000184 d07c      	RCALL _ReadRawRC
000185 70e7      	ANDI R30,LOW(0x7)
000186 2f2e      	MOV  R18,R30
000187 3020      	CPI  R18,0
000188 f051      	BREQ _0x56
000189 2fe5      	MOV  R30,R21
00018a e0f0      	LDI  R31,0
00018b 9731      	SBIW R30,1
00018c d391      	RCALL __LSLW3
00018d 01df      	MOVW R26,R30
00018e 2fe2      	MOV  R30,R18
00018f e0f0      	LDI  R31,0
000190 0fea      	ADD  R30,R26
000191 1ffb      	ADC  R31,R27
000192 c003      	RJMP _0xA0
                 _0x56:
000193 e0e8      	LDI  R30,LOW(8)
000194 9fe5      	MUL  R30,R21
000195 01f0      	MOVW R30,R0
                 _0xA0:
000196 85a8      	LDD  R26,Y+8
000197 85b9      	LDD  R27,Y+8+1
000198 93ed      	ST   X+,R30
000199 93fc      	ST   X,R31
00019a 3050      	CPI  R21,0
00019b f409      	BRNE _0x58
00019c e051      	LDI  R21,LOW(1)
                 _0x58:
00019d 3153      	CPI  R21,19
00019e f008      	BRLO _0x59
00019f e152      	LDI  R21,LOW(18)
                 _0x59:
0001a0 e0e0      	LDI  R30,LOW(0)
0001a1 83ee      	STD  Y+6,R30
0001a2 83ef      	STD  Y+6+1,R30
                 _0x5B:
0001a3 2fe5      	MOV  R30,R21
0001a4 d30f      	RCALL SUBOPT_0xA
0001a5 e0f0      	LDI  R31,0
0001a6 17ae      	CP   R26,R30
0001a7 07bf      	CPC  R27,R31
0001a8 f480      	BRSH _0x5C
0001a9 d311      	RCALL SUBOPT_0xC
0001aa 85aa      	LDD  R26,Y+10
0001ab 85bb      	LDD  R27,Y+10+1
0001ac 0fea      	ADD  R30,R26
0001ad 1ffb      	ADC  R31,R27
0001ae 93ff      	PUSH R31
0001af 93ef      	PUSH R30
0001b0 e0a9      	LDI  R26,LOW(9)
0001b1 d04f      	RCALL _ReadRawRC
0001b2 91af      	POP  R26
0001b3 91bf      	POP  R27
0001b4 93ec      	ST   X,R30
0001b5 d305      	RCALL SUBOPT_0xC
0001b6 9631      	ADIW R30,1
0001b7 d306      	RCALL SUBOPT_0xD
0001b8 cfea      	RJMP _0x5B
                 _0x5C:
                 _0x55:
0001b9 c001      	RJMP _0x5D
                 _0x53:
0001ba ef1e      	LDI  R17,LOW(254)
                 _0x5D:
                 _0x52:
0001bb d2e3      	RCALL SUBOPT_0x4
0001bc e8a0      	LDI  R26,LOW(128)
0001bd d04f      	RCALL _SetBitMask
0001be d2d0      	RCALL SUBOPT_0x0
0001bf d2d2      	RCALL SUBOPT_0x1
0001c0 2fe1      	MOV  R30,R17
0001c1 d37c      	RCALL __LOADLOCR6
0001c2 9660      	ADIW R28,16
0001c3 9508      	RET
                 ; .FEND
                 _CalulateCRC:
                 ; .FSTART _CalulateCRC
0001c4 d2e0      	RCALL SUBOPT_0x6
0001c5 d375      	RCALL __SAVELOCR2
                 ;	*pIndata -> Y+5
                 ;	len -> Y+4
                 ;	*pOutData -> Y+2
                 ;	i -> R17
                 ;	n -> R16
0001c6 e0e5      	LDI  R30,LOW(5)
0001c7 93ea      	ST   -Y,R30
0001c8 e0a4      	LDI  R26,LOW(4)
0001c9 d046      	RCALL _ClearBitMask
0001ca d2c4      	RCALL SUBOPT_0x0
0001cb d2c6      	RCALL SUBOPT_0x1
0001cc e0ea      	LDI  R30,LOW(10)
0001cd d2da      	RCALL SUBOPT_0x7
0001ce d03e      	RCALL _SetBitMask
0001cf e010      	LDI  R17,LOW(0)
                 _0x5F:
0001d0 81ec      	LDD  R30,Y+4
0001d1 171e      	CP   R17,R30
0001d2 f440      	BRSH _0x60
0001d3 e0e9      	LDI  R30,LOW(9)
0001d4 93ea      	ST   -Y,R30
0001d5 2fe1      	MOV  R30,R17
0001d6 e0f0      	LDI  R31,0
0001d7 d2dc      	RCALL SUBOPT_0xA
0001d8 d2de      	RCALL SUBOPT_0xB
0001d9 5f1f      	SUBI R17,-1
0001da cff5      	RJMP _0x5F
                 _0x60:
0001db d2b3      	RCALL SUBOPT_0x0
0001dc e0a3      	LDI  R26,LOW(3)
0001dd d018      	RCALL _WriteRawRC
0001de ef1f      	LDI  R17,LOW(255)
                 _0x62:
0001df e0a5      	LDI  R26,LOW(5)
0001e0 d020      	RCALL _ReadRawRC
0001e1 2f0e      	MOV  R16,R30
0001e2 5011      	SUBI R17,1
0001e3 3010      	CPI  R17,0
0001e4 f011      	BREQ _0x64
0001e5 ff02      	SBRS R16,2
0001e6 c001      	RJMP _0x65
                 _0x64:
0001e7 c001      	RJMP _0x63
                 _0x65:
0001e8 cff6      	RJMP _0x62
                 _0x63:
0001e9 e2a2      	LDI  R26,LOW(34)
0001ea d016      	RCALL _ReadRawRC
0001eb d2d5      	RCALL SUBOPT_0xE
0001ec 93ec      	ST   X,R30
0001ed e2a1      	LDI  R26,LOW(33)
0001ee d012      	RCALL _ReadRawRC
                +
0001ef 81aa     +LDD R26 , Y + 2
0001f0 81bb     +LDD R27 , Y + 2 + 1
0001f1 9611     +ADIW R26 , 1
0001f2 93ec     +ST X , R30
                 	__PUTB1SNS 2,1
0001f3 d34e      	RCALL __LOADLOCR2
0001f4 9627      	ADIW R28,7
0001f5 9508      	RET
                 ; .FEND
                 _WriteRawRC:
                 ; .FSTART _WriteRawRC
0001f6 93aa      	ST   -Y,R26
                 ;	reg -> Y+1
                 ;	value -> Y+0
0001f7 98c2      	CBI  0x18,2
0001f8 81e9      	LDD  R30,Y+1
0001f9 0fee      	LSL  R30
0001fa 2fae      	MOV  R26,R30
0001fb d107      	RCALL _spi
0001fc 81a8      	LD   R26,Y
0001fd d105      	RCALL _spi
0001fe 9ac2      	SBI  0x18,2
0001ff 9622      	ADIW R28,2
000200 9508      	RET
                 ; .FEND
                 _ReadRawRC:
                 ; .FSTART _ReadRawRC
000201 93aa      	ST   -Y,R26
                 ;	reg -> Y+0
000202 98c2      	CBI  0x18,2
000203 81e8      	LD   R30,Y
000204 0fee      	LSL  R30
000205 68e0      	ORI  R30,0x80
000206 2fae      	MOV  R26,R30
000207 d0fb      	RCALL _spi
000208 e0a0      	LDI  R26,LOW(0)
000209 d0f9      	RCALL _spi
00020a 83e8      	ST   Y,R30
00020b 9ac2      	SBI  0x18,2
00020c c0fc      	RJMP _0x20A0003
                 ; .FEND
                 _SetBitMask:
                 ; .FSTART _SetBitMask
00020d d2b6      	RCALL SUBOPT_0xF
                 ;	reg -> Y+2
                 ;	mask -> Y+1
                 ;	tmp -> R17
00020e 2b1e      	OR   R17,R30
00020f c003      	RJMP _0x20A0005
                 ; .FEND
                 _ClearBitMask:
                 ; .FSTART _ClearBitMask
000210 d2b3      	RCALL SUBOPT_0xF
                 ;	reg -> Y+2
                 ;	mask -> Y+1
                 ;	tmp -> R17
000211 95e0      	COM  R30
000212 231e      	AND  R17,R30
                 _0x20A0005:
000213 81ea      	LDD  R30,Y+2
000214 93ea      	ST   -Y,R30
000215 2fa1      	MOV  R26,R17
000216 dfdf      	RCALL _WriteRawRC
000217 8118      	LDD  R17,Y+0
000218 9623      	ADIW R28,3
000219 9508      	RET
                 ; .FEND
                 ;	keyA -> Y+27
                 ;	keyB -> Y+25
                 ;	sector_num -> Y+24
                 ;	key -> Y+22
                 ;	dd -> Y+2
                 ;	stat -> R17
                 ;	k -> R16
                 ;	keyA -> Y+27
                 ;	keyB -> Y+25
                 ;	sector_num -> Y+24
                 ;	key -> Y+22
                 ;	dd -> Y+2
                 ;	stat -> R17
                 ;	k -> R16
                 ;	wrdata -> Y+28
                 ;	sector_num -> Y+27
                 ;	block_num -> Y+26
                 ;	key -> Y+24
                 ;	dd -> Y+4
                 ;	stat -> R17
                 ;	address -> R16
                 ;	k -> R19
                 ;	rddata -> Y+28
                 ;	sector_num -> Y+27
                 ;	block_num -> Y+26
                 ;	key -> Y+24
                 ;	dd -> Y+4
                 ;	flag_err -> R17
                 ;	stat -> R16
                 ;	k -> R19
                 ;	address -> R18
                 _rd_serial:
                 ; .FSTART _rd_serial
00021a d28a      	RCALL SUBOPT_0x6
00021b 9764      	SBIW R28,20
00021c 931a      	ST   -Y,R17
                 ;	serial -> Y+21
                 ;	dd -> Y+1
                 ;	stat -> R17
00021d e5e2      	LDI  R30,LOW(82)
00021e 93ea      	ST   -Y,R30
00021f 01de      	MOVW R26,R28
000220 9612      	ADIW R26,2
000221 de62      	RCALL _PcdRequest
000222 2f1e      	MOV  R17,R30
000223 3010      	CPI  R17,0
000224 f4f1      	BRNE _0x94
000225 01de      	MOVW R26,R28
000226 9611      	ADIW R26,1
000227 de8f      	RCALL _PcdAnticoll
000228 2f1e      	MOV  R17,R30
000229 decc      	RCALL _PcdHalt
00022a 81e9      	LDD  R30,Y+1
00022b 89ad      	LDD  R26,Y+21
00022c 89be      	LDD  R27,Y+21+1
00022d 93ec      	ST   X,R30
00022e 81ea      	LDD  R30,Y+2
                +
00022f 89ad     +LDD R26 , Y + 21
000230 89be     +LDD R27 , Y + 21 + 1
000231 9611     +ADIW R26 , 1
000232 93ec     +ST X , R30
                 	__PUTB1SNS 21,1
000233 81eb      	LDD  R30,Y+3
                +
000234 89ad     +LDD R26 , Y + 21
000235 89be     +LDD R27 , Y + 21 + 1
000236 9612     +ADIW R26 , 2
000237 93ec     +ST X , R30
                 	__PUTB1SNS 21,2
000238 81ec      	LDD  R30,Y+4
                +
000239 89ad     +LDD R26 , Y + 21
00023a 89be     +LDD R27 , Y + 21 + 1
00023b 9613     +ADIW R26 , 3
00023c 93ec     +ST X , R30
                 	__PUTB1SNS 21,3
00023d 3010      	CPI  R17,0
00023e f411      	BRNE _0x95
00023f e0e1      	LDI  R30,LOW(1)
000240 c003      	RJMP _0x20A0004
                 _0x95:
000241 e0e0      	LDI  R30,LOW(0)
000242 c001      	RJMP _0x20A0004
                 _0x94:
000243 e0e0      	LDI  R30,LOW(0)
                 _0x20A0004:
000244 8118      	LDD  R17,Y+0
000245 9667      	ADIW R28,23
000246 9508      	RET
                 ; .FEND
                 _reset_mfrc:
                 ; .FSTART _reset_mfrc
000247 de13      	RCALL _PcdReset
000248 d282      	RCALL SUBOPT_0x10
000249 de37      	RCALL _PcdAntennaOff
00024a d280      	RCALL SUBOPT_0x10
00024b de2b      	RCALL _PcdAntennaOn
00024c d27e      	RCALL SUBOPT_0x10
00024d dea8      	RCALL _PcdHalt
00024e 9508      	RET
                 ; .FEND
                 ;
                 ;unsigned char serial[4],d[16];
                 ;bit a;
                 ;
                 ;
                 ;void main(void){
                 ; 0000 000F void main(void){
                 _main:
                 ; .FSTART _main
                 ; 0000 0010 {
                 ; 0000 0011 // Declare your local variables here
                 ; 0000 0012 
                 ; 0000 0013 // Input/Output Ports initialization
                 ; 0000 0014 // Port A initialization
                 ; 0000 0015 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 0016 //DDRA=(0<<DDA7) | (0<<DDA6) | (0<<DDA5) | (0<<DDA4) | (0<<DDA3) | (0<<DDA2) | (0<<DDA1) | (0<<DDA0);
                 ; 0000 0017 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0000 0018 //PORTA=(0<<PORTA7) | (0<<PORTA6) | (0<<PORTA5) | (0<<PORTA4) | (0<<PORTA3) | (0<<PORTA2) | (0<<PORTA1) | (0<<PORTA0);
                 ; 0000 0019 
                 ; 0000 001A // Port B initialization
                 ; 0000 001B // Function: Bit7=Out Bit6=In Bit5=Out Bit4=Out Bit3=In Bit2=Out Bit1=In Bit0=In
                 ; 0000 001C DDRB=(1<<DDB7) | (0<<DDB6) | (1<<DDB5) | (1<<DDB4) | (0<<DDB3) | (1<<DDB2) | (0<<DDB1) | (0<<DDB0);
00024f ebe4      	LDI  R30,LOW(180)
000250 bbe7      	OUT  0x17,R30
                 ; 0000 001D // State: Bit7=0 Bit6=T Bit5=0 Bit4=0 Bit3=T Bit2=0 Bit1=T Bit0=T
                 ; 0000 001E PORTB=(0<<PORTB7) | (0<<PORTB6) | (0<<PORTB5) | (0<<PORTB4) | (0<<PORTB3) | (0<<PORTB2) | (0<<PORTB1) | (0<<PORTB0);
000251 e0e0      	LDI  R30,LOW(0)
000252 bbe8      	OUT  0x18,R30
                 ; 0000 001F 
                 ; 0000 0020 // Port C initialization
                 ; 0000 0021 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 0022 DDRC= (0<<DDC6) | (0<<DDC5) | (0<<DDC4) | (0<<DDC3) | (0<<DDC2) | (0<<DDC1) | (0<<DDC0);
000253 bbe4      	OUT  0x14,R30
                 ; 0000 0023 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0000 0024 PORTC= (0<<PORTC6) | (0<<PORTC5) | (0<<PORTC4) | (0<<PORTC3) | (0<<PORTC2) | (0<<PORTC1) | (0<<PORTC0);
000254 bbe5      	OUT  0x15,R30
                 ; 0000 0025 
                 ; 0000 0026 // Port D initialization
                 ; 0000 0027 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 0028 DDRD=(1<<DDD7) | (0<<DDD6) | (0<<DDD5) | (0<<DDD4) | (0<<DDD3) | (0<<DDD2) | (0<<DDD1) | (0<<DDD0);
000255 e8e0      	LDI  R30,LOW(128)
000256 bbe1      	OUT  0x11,R30
                 ; 0000 0029 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0000 002A PORTD=(0<<PORTD7) | (0<<PORTD6) | (0<<PORTD5) | (0<<PORTD4) | (0<<PORTD3) | (0<<PORTD2) | (0<<PORTD1) | (0<<PORTD0);
000257 e0e0      	LDI  R30,LOW(0)
000258 bbe2      	OUT  0x12,R30
                 ; 0000 002B 
                 ; 0000 002C // Timer/Counter 0 initialization
                 ; 0000 002D // Clock source: System Clock
                 ; 0000 002E // Clock value: Timer 0 Stopped
                 ; 0000 002F // Mode: Normal top=0xFF
                 ; 0000 0030 // OC0 output: Disconnected
                 ; 0000 0031 //TCCR0=(0<<WGM00) | (0<<COM01) | (0<<COM00) | (0<<WGM01) | (0<<CS02) | (0<<CS01) | (0<<CS00);
                 ; 0000 0032 //TCNT0=0x00;
                 ; 0000 0033 //OCR0=0x00;
                 ; 0000 0034 
                 ; 0000 0035 // Timer/Counter 1 initialization
                 ; 0000 0036 // Clock source: System Clock
                 ; 0000 0037 // Clock value: Timer1 Stopped
                 ; 0000 0038 // Mode: Normal top=0xFFFF
                 ; 0000 0039 // OC1A output: Disconnected
                 ; 0000 003A // OC1B output: Disconnected
                 ; 0000 003B // Noise Canceler: Off
                 ; 0000 003C // Input Capture on Falling Edge
                 ; 0000 003D // Timer1 Overflow Interrupt: Off
                 ; 0000 003E // Input Capture Interrupt: Off
                 ; 0000 003F // Compare A Match Interrupt: Off
                 ; 0000 0040 // Compare B Match Interrupt: Off
                 ; 0000 0041 TCCR1A=(0<<COM1A1) | (0<<COM1A0) | (0<<COM1B1) | (0<<COM1B0) | (0<<WGM11) | (0<<WGM10);
000259 bdef      	OUT  0x2F,R30
                 ; 0000 0042 TCCR1B=(0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (0<<WGM12) | (0<<CS12) | (0<<CS11) | (0<<CS10);
00025a bdee      	OUT  0x2E,R30
                 ; 0000 0043 TCNT1H=0x00;
00025b bded      	OUT  0x2D,R30
                 ; 0000 0044 TCNT1L=0x00;
00025c bdec      	OUT  0x2C,R30
                 ; 0000 0045 ICR1H=0x00;
00025d bde7      	OUT  0x27,R30
                 ; 0000 0046 ICR1L=0x00;
00025e bde6      	OUT  0x26,R30
                 ; 0000 0047 OCR1AH=0x00;
00025f bdeb      	OUT  0x2B,R30
                 ; 0000 0048 OCR1AL=0x00;
000260 bdea      	OUT  0x2A,R30
                 ; 0000 0049 OCR1BH=0x00;
000261 bde9      	OUT  0x29,R30
                 ; 0000 004A OCR1BL=0x00;
000262 bde8      	OUT  0x28,R30
                 ; 0000 004B 
                 ; 0000 004C // Timer/Counter 2 initialization
                 ; 0000 004D // Clock source: System Clock
                 ; 0000 004E // Clock value: Timer2 Stopped
                 ; 0000 004F // Mode: Normal top=0xFF
                 ; 0000 0050 // OC2 output: Disconnected
                 ; 0000 0051 ASSR=0<<AS2;
000263 bde2      	OUT  0x22,R30
                 ; 0000 0052 TCCR2=(0<<PWM2) | (0<<COM21) | (0<<COM20) | (0<<CTC2) | (0<<CS22) | (0<<CS21) | (0<<CS20);
000264 bde5      	OUT  0x25,R30
                 ; 0000 0053 TCNT2=0x00;
000265 bde4      	OUT  0x24,R30
                 ; 0000 0054 OCR2=0x00;
000266 bde3      	OUT  0x23,R30
                 ; 0000 0055 
                 ; 0000 0056 // Timer(s)/Counter(s) Interrupt(s) initialization
                 ; 0000 0057 TIMSK=(0<<OCIE2) | (0<<TOIE2) | (0<<TICIE1) | (0<<OCIE1A) | (0<<OCIE1B) | (0<<TOIE1)  | (0<<TOIE0);
000267 bfe9      	OUT  0x39,R30
                 ; 0000 0058 
                 ; 0000 0059 // External Interrupt(s) initialization
                 ; 0000 005A // INT0: Off
                 ; 0000 005B // INT1: Off
                 ; 0000 005C // INT2: Off
                 ; 0000 005D MCUCR=(0<<ISC11) | (0<<ISC10) | (0<<ISC01) | (0<<ISC00);
000268 bfe5      	OUT  0x35,R30
                 ; 0000 005E 
                 ; 0000 005F 
                 ; 0000 0060 // USART initialization
                 ; 0000 0061 // USART disabled
                 ; 0000 0062 UCSRB=(0<<RXCIE) | (0<<TXCIE) | (0<<UDRIE) | (0<<RXEN) | (0<<TXEN) | (0<<UCSZ2) | (0<<RXB8) | (0<<TXB8);
000269 b9ea      	OUT  0xA,R30
                 ; 0000 0063 
                 ; 0000 0064 // Analog Comparator initialization
                 ; 0000 0065 // Analog Comparator: Off
                 ; 0000 0066 // The Analog Comparator's positive input is
                 ; 0000 0067 // connected to the AIN0 pin
                 ; 0000 0068 // The Analog Comparator's negative input is
                 ; 0000 0069 // connected to the AIN1 pin
                 ; 0000 006A ACSR=(1<<ACD) | (0<<ACBG) | (0<<ACO) | (0<<ACI) | (0<<ACIE) | (0<<ACIC) | (0<<ACIS1) | (0<<ACIS0);
00026a e8e0      	LDI  R30,LOW(128)
00026b b9e8      	OUT  0x8,R30
                 ; 0000 006B SFIOR=(0<<ACME);
00026c e0e0      	LDI  R30,LOW(0)
00026d bfe0      	OUT  0x30,R30
                 ; 0000 006C 
                 ; 0000 006D // ADC initialization
                 ; 0000 006E // ADC disabled
                 ; 0000 006F ADCSRA=(0<<ADEN) | (0<<ADSC) |  (0<<ADIF) | (0<<ADIE) | (0<<ADPS2) | (0<<ADPS1) | (0<<ADPS0);
00026e b9e6      	OUT  0x6,R30
                 ; 0000 0070 
                 ; 0000 0071 // SPI initialization
                 ; 0000 0072 // SPI Type: Master
                 ; 0000 0073 // SPI Clock Rate: 500/000 kHz
                 ; 0000 0074 // SPI Clock Phase: Cycle Start
                 ; 0000 0075 // SPI Clock Polarity: Low
                 ; 0000 0076 // SPI Data Order: MSB First
                 ; 0000 0077 SPCR=(0<<SPIE) | (1<<SPE) | (0<<DORD) | (1<<MSTR) | (0<<CPOL) | (0<<CPHA) | (0<<SPR1) | (1<<SPR0);
00026f e5e1      	LDI  R30,LOW(81)
000270 b9ed      	OUT  0xD,R30
                 ; 0000 0078 SPSR=(0<<SPI2X);
000271 e0e0      	LDI  R30,LOW(0)
000272 b9ee      	OUT  0xE,R30
                 ; 0000 0079 
                 ; 0000 007A // TWI initialization
                 ; 0000 007B // TWI disabled
                 ; 0000 007C TWCR=(0<<TWEA) | (0<<TWSTA) | (0<<TWSTO) | (0<<TWEN) | (0<<TWIE);
000273 bfe6      	OUT  0x36,R30
                 ; 0000 007D 
                 ; 0000 007E // Alphanumeric LCD initialization
                 ; 0000 007F // Connections are specified in the
                 ; 0000 0080 // Project|Configure|C Compiler|Libraries|Alphanumeric LCD menu:
                 ; 0000 0081 // RS - PORTC Bit 0
                 ; 0000 0082 // RD - PORTC Bit 1
                 ; 0000 0083 // EN - PORTC Bit 2
                 ; 0000 0084 // D4 - PORTC Bit 3
                 ; 0000 0085 // D5 - PORTC Bit 4
                 ; 0000 0086 // D6 - PORTC Bit 5
                 ; 0000 0087 // D7 - PORTC Bit 6
                 ; 0000 0088 // Characters/line: 16
                 ; 0000 0089 lcd_init(16);
000274 e1a0      	LDI  R26,LOW(16)
000275 d063      	RCALL _lcd_init
                 ; 0000 008A }
                 ; 0000 008B 
                 ; 0000 008C delay_ms(500);
000276 efa4      	LDI  R26,LOW(500)
000277 e0b1      	LDI  R27,HIGH(500)
000278 d293      	RCALL _delay_ms
                 ; 0000 008D //PORTB.2 is sda pin
                 ; 0000 008E     reset_mfrc();
000279 dfcd      	RCALL _reset_mfrc
                 ; 0000 008F 
                 ; 0000 0090 while (1)
                 _0x98:
                 ; 0000 0091       {
                 ; 0000 0092           a=rd_serial(serial);
00027a e6a0      	LDI  R26,LOW(_serial)
00027b e0b1      	LDI  R27,HIGH(_serial)
00027c df9d      	RCALL _rd_serial
00027d d2b4      	RCALL __BSTB1
00027e f820      	BLD  R2,0
                 ; 0000 0093           //lcd_gotoxy(0,0);
                 ; 0000 0094           sprintf(d,"A:%3d %3d",serial[0],serial[1]);
00027f e6e4      	LDI  R30,LOW(_d)
000280 e0f1      	LDI  R31,HIGH(_d)
000281 d220      	RCALL SUBOPT_0x5
                +
000282 e3ea     +LDI R30 , LOW ( 2 * _0x0 + ( 0 ) )
000283 e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 0 ) )
                 	__POINTW1FN _0x0,0
000284 d21d      	RCALL SUBOPT_0x5
000285 91e0 0160 	LDS  R30,_serial
000287 d246      	RCALL SUBOPT_0x11
                +
000288 91e0 0161+LDS R30 , _serial + ( 1 )
                 	__GETB1MN _serial,1
00028a d243      	RCALL SUBOPT_0x11
00028b e088      	LDI  R24,8
00028c d1c2      	RCALL _sprintf
00028d 962c      	ADIW R28,12
                 ; 0000 0095           //lcd_puts(d);
                 ; 0000 0096           //putstr(d);
                 ; 0000 0097           //lcd_gotoxy(0,1);
                 ; 0000 0098           sprintf(d,"B:%3d %3d",serial[2],serial[3]);
00028e e6e4      	LDI  R30,LOW(_d)
00028f e0f1      	LDI  R31,HIGH(_d)
000290 d211      	RCALL SUBOPT_0x5
                +
000291 e4e4     +LDI R30 , LOW ( 2 * _0x0 + ( 10 ) )
000292 e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 10 ) )
                 	__POINTW1FN _0x0,10
000293 d20e      	RCALL SUBOPT_0x5
                +
000294 91e0 0162+LDS R30 , _serial + ( 2 )
                 	__GETB1MN _serial,2
000296 d237      	RCALL SUBOPT_0x11
                +
000297 91e0 0163+LDS R30 , _serial + ( 3 )
                 	__GETB1MN _serial,3
000299 d234      	RCALL SUBOPT_0x11
00029a e088      	LDI  R24,8
00029b d1b3      	RCALL _sprintf
00029c 962c      	ADIW R28,12
                 ; 0000 0099           //putstr(d);
                 ; 0000 009A 
                 ; 0000 009B           PORTD.7=1;
00029d 9a97      	SBI  0x12,7
                 ; 0000 009C           delay_ms(1000);
00029e eea8      	LDI  R26,LOW(1000)
00029f e0b3      	LDI  R27,HIGH(1000)
0002a0 d26b      	RCALL _delay_ms
                 ; 0000 009D           PORTD.7=0;
0002a1 9897      	CBI  0x12,7
                 ; 0000 009E           //lcd_puts(d);
                 ; 0000 009F 
                 ; 0000 00A0       }
0002a2 cfd7      	RJMP _0x98
                 ; 0000 00A1 }
                 _0x9F:
0002a3 cfff      	RJMP _0x9F
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.DSEG
                 
                 	.CSEG
                 __lcd_write_nibble_G100:
                 ; .FSTART __lcd_write_nibble_G100
0002a4 93aa      	ST   -Y,R26
0002a5 81e8      	LD   R30,Y
0002a6 71e0      	ANDI R30,LOW(0x10)
0002a7 f011      	BREQ _0x2000004
0002a8 9aab      	SBI  0x15,3
0002a9 c001      	RJMP _0x2000005
                 _0x2000004:
0002aa 98ab      	CBI  0x15,3
                 _0x2000005:
0002ab 81e8      	LD   R30,Y
0002ac 72e0      	ANDI R30,LOW(0x20)
0002ad f011      	BREQ _0x2000006
0002ae 9aac      	SBI  0x15,4
0002af c001      	RJMP _0x2000007
                 _0x2000006:
0002b0 98ac      	CBI  0x15,4
                 _0x2000007:
0002b1 81e8      	LD   R30,Y
0002b2 74e0      	ANDI R30,LOW(0x40)
0002b3 f011      	BREQ _0x2000008
0002b4 9aad      	SBI  0x15,5
0002b5 c001      	RJMP _0x2000009
                 _0x2000008:
0002b6 98ad      	CBI  0x15,5
                 _0x2000009:
0002b7 81e8      	LD   R30,Y
0002b8 78e0      	ANDI R30,LOW(0x80)
0002b9 f011      	BREQ _0x200000A
0002ba 9aae      	SBI  0x15,6
0002bb c001      	RJMP _0x200000B
                 _0x200000A:
0002bc 98ae      	CBI  0x15,6
                 _0x200000B:
0002bd d215      	RCALL SUBOPT_0x12
0002be 9aaa      	SBI  0x15,2
0002bf d213      	RCALL SUBOPT_0x12
0002c0 98aa      	CBI  0x15,2
0002c1 d211      	RCALL SUBOPT_0x12
0002c2 c046      	RJMP _0x20A0003
                 ; .FEND
                 __lcd_write_data:
                 ; .FSTART __lcd_write_data
0002c3 93aa      	ST   -Y,R26
0002c4 81a8      	LD   R26,Y
0002c5 dfde      	RCALL __lcd_write_nibble_G100
0002c6 81e8          ld    r30,y
0002c7 95e2          swap  r30
0002c8 83e8          st    y,r30
0002c9 81a8      	LD   R26,Y
0002ca dfd9      	RCALL __lcd_write_nibble_G100
                +
0002cb e885     +LDI R24 , LOW ( 133 )
                +__DELAY_USB_LOOP :
0002cc 958a     +DEC R24
0002cd f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 133
0002ce c03a      	RJMP _0x20A0003
                 ; .FEND
                 _lcd_clear:
                 ; .FSTART _lcd_clear
0002cf e0a2      	LDI  R26,LOW(2)
0002d0 d206      	RCALL SUBOPT_0x13
0002d1 e0ac      	LDI  R26,LOW(12)
0002d2 dff0      	RCALL __lcd_write_data
0002d3 e0a1      	LDI  R26,LOW(1)
0002d4 d202      	RCALL SUBOPT_0x13
0002d5 e0e0      	LDI  R30,LOW(0)
0002d6 2e4e      	MOV  R4,R30
0002d7 2e5e      	MOV  R5,R30
0002d8 9508      	RET
                 ; .FEND
                 _lcd_init:
                 ; .FSTART _lcd_init
0002d9 93aa      	ST   -Y,R26
0002da 9aa3      	SBI  0x14,3
0002db 9aa4      	SBI  0x14,4
0002dc 9aa5      	SBI  0x14,5
0002dd 9aa6      	SBI  0x14,6
0002de 9aa2      	SBI  0x14,2
0002df 9aa0      	SBI  0x14,0
0002e0 9aa1      	SBI  0x14,1
0002e1 98aa      	CBI  0x15,2
0002e2 98a8      	CBI  0x15,0
0002e3 98a9      	CBI  0x15,1
0002e4 8078      	LDD  R7,Y+0
0002e5 81e8      	LD   R30,Y
0002e6 58e0      	SUBI R30,-LOW(128)
                +
0002e7 93e0 0176+STS __base_y_G100 + ( 2 ) , R30
                 	__PUTB1MN __base_y_G100,2
0002e9 81e8      	LD   R30,Y
0002ea 54e0      	SUBI R30,-LOW(192)
                +
0002eb 93e0 0177+STS __base_y_G100 + ( 3 ) , R30
                 	__PUTB1MN __base_y_G100,3
0002ed e1a4      	LDI  R26,LOW(20)
0002ee e0b0      	LDI  R27,0
0002ef d21c      	RCALL _delay_ms
0002f0 d1ea      	RCALL SUBOPT_0x14
0002f1 d1e9      	RCALL SUBOPT_0x14
0002f2 d1e8      	RCALL SUBOPT_0x14
0002f3 e2a0      	LDI  R26,LOW(32)
0002f4 dfaf      	RCALL __lcd_write_nibble_G100
                +
0002f5 ec88     +LDI R24 , LOW ( 200 )
0002f6 e090     +LDI R25 , HIGH ( 200 )
                +__DELAY_USW_LOOP :
0002f7 9701     +SBIW R24 , 1
0002f8 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 200
0002f9 e2a8      	LDI  R26,LOW(40)
0002fa dfc8      	RCALL __lcd_write_data
0002fb e0a4      	LDI  R26,LOW(4)
0002fc dfc6      	RCALL __lcd_write_data
0002fd e8a5      	LDI  R26,LOW(133)
0002fe dfc4      	RCALL __lcd_write_data
0002ff e0a6      	LDI  R26,LOW(6)
000300 dfc2      	RCALL __lcd_write_data
000301 dfcd      	RCALL _lcd_clear
000302 c006      	RJMP _0x20A0003
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.CSEG
                 _spi:
                 ; .FSTART _spi
000303 93aa      	ST   -Y,R26
000304 81e8      	LD   R30,Y
000305 b9ef      	OUT  0xF,R30
                 _0x2020003:
000306 9b77      	SBIS 0xE,7
000307 cffe      	RJMP _0x2020003
000308 b1ef      	IN   R30,0xF
                 _0x20A0003:
000309 9621      	ADIW R28,1
00030a 9508      	RET
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.CSEG
                 _put_buff_G102:
                 ; .FSTART _put_buff_G102
00030b d199      	RCALL SUBOPT_0x6
00030c d22e      	RCALL __SAVELOCR2
00030d d1b3      	RCALL SUBOPT_0xE
00030e 9612      	ADIW R26,2
00030f d215      	RCALL __GETW1P
000310 9730      	SBIW R30,0
000311 f0f1      	BREQ _0x2040010
000312 d1ae      	RCALL SUBOPT_0xE
000313 d1ce      	RCALL SUBOPT_0x15
000314 018f      	MOVW R16,R30
000315 9730      	SBIW R30,0
000316 f061      	BREQ _0x2040012
                +
000317 3002     +CPI R16 , LOW ( 2 )
000318 e0e0     +LDI R30 , HIGH ( 2 )
000319 071e     +CPC R17 , R30
                 	__CPWRN 16,17,2
00031a f070      	BRLO _0x2040013
00031b 01f8      	MOVW R30,R16
00031c 9731      	SBIW R30,1
00031d 018f      	MOVW R16,R30
                +
00031e 81aa     +LDD R26 , Y + 2
00031f 81bb     +LDD R27 , Y + 2 + 1
000320 9614     +ADIW R26 , 4
000321 93ed     +ST X + , R30
000322 93fc     +ST X , R31
                 	__PUTW1SNS 2,4
                 _0x2040012:
000323 d19d      	RCALL SUBOPT_0xE
000324 9612      	ADIW R26,2
000325 d1bf      	RCALL SUBOPT_0x16
000326 9731      	SBIW R30,1
000327 81ac      	LDD  R26,Y+4
000328 83a0      	STD  Z+0,R26
                 _0x2040013:
000329 d197      	RCALL SUBOPT_0xE
00032a d1fa      	RCALL __GETW1P
00032b 23ff      	TST  R31
00032c f012      	BRMI _0x2040014
00032d d193      	RCALL SUBOPT_0xE
00032e d1b6      	RCALL SUBOPT_0x16
                 _0x2040014:
00032f c005      	RJMP _0x2040015
                 _0x2040010:
000330 d190      	RCALL SUBOPT_0xE
000331 efef      	LDI  R30,LOW(65535)
000332 efff      	LDI  R31,HIGH(65535)
000333 93ed      	ST   X+,R30
000334 93fc      	ST   X,R31
                 _0x2040015:
000335 d20c      	RCALL __LOADLOCR2
000336 9625      	ADIW R28,5
000337 9508      	RET
                 ; .FEND
                 __print_G102:
                 ; .FSTART __print_G102
000338 d16c      	RCALL SUBOPT_0x6
000339 9726      	SBIW R28,6
00033a d1fc      	RCALL __SAVELOCR6
00033b e010      	LDI  R17,0
00033c 85ac      	LDD  R26,Y+12
00033d 85bd      	LDD  R27,Y+12+1
00033e e0e0      	LDI  R30,LOW(0)
00033f e0f0      	LDI  R31,HIGH(0)
000340 93ed      	ST   X+,R30
000341 93fc      	ST   X,R31
                 _0x2040016:
000342 89ea      	LDD  R30,Y+18
000343 89fb      	LDD  R31,Y+18+1
000344 9631      	ADIW R30,1
000345 8bea      	STD  Y+18,R30
000346 8bfb      	STD  Y+18+1,R31
000347 9731      	SBIW R30,1
000348 91e4      	LPM  R30,Z
000349 2f2e      	MOV  R18,R30
00034a 30e0      	CPI  R30,0
00034b f409      	BRNE PC+2
00034c c0fc      	RJMP _0x2040018
00034d 2fe1      	MOV  R30,R17
00034e 30e0      	CPI  R30,0
00034f f431      	BRNE _0x204001C
000350 3225      	CPI  R18,37
000351 f411      	BRNE _0x204001D
000352 e011      	LDI  R17,LOW(1)
000353 c001      	RJMP _0x204001E
                 _0x204001D:
000354 d196      	RCALL SUBOPT_0x17
                 _0x204001E:
000355 c0f2      	RJMP _0x204001B
                 _0x204001C:
000356 30e1      	CPI  R30,LOW(0x1)
000357 f4a1      	BRNE _0x204001F
000358 3225      	CPI  R18,37
000359 f411      	BRNE _0x2040020
00035a d190      	RCALL SUBOPT_0x17
00035b c0eb      	RJMP _0x20400CC
                 _0x2040020:
00035c e012      	LDI  R17,LOW(2)
00035d e040      	LDI  R20,LOW(0)
00035e e000      	LDI  R16,LOW(0)
00035f 322d      	CPI  R18,45
000360 f411      	BRNE _0x2040021
000361 e001      	LDI  R16,LOW(1)
000362 c0e5      	RJMP _0x204001B
                 _0x2040021:
000363 322b      	CPI  R18,43
000364 f411      	BRNE _0x2040022
000365 e24b      	LDI  R20,LOW(43)
000366 c0e1      	RJMP _0x204001B
                 _0x2040022:
000367 3220      	CPI  R18,32
000368 f411      	BRNE _0x2040023
000369 e240      	LDI  R20,LOW(32)
00036a c0dd      	RJMP _0x204001B
                 _0x2040023:
00036b c002      	RJMP _0x2040024
                 _0x204001F:
00036c 30e2      	CPI  R30,LOW(0x2)
00036d f439      	BRNE _0x2040025
                 _0x2040024:
00036e e050      	LDI  R21,LOW(0)
00036f e013      	LDI  R17,LOW(3)
000370 3320      	CPI  R18,48
000371 f411      	BRNE _0x2040026
000372 6800      	ORI  R16,LOW(128)
000373 c0d4      	RJMP _0x204001B
                 _0x2040026:
000374 c003      	RJMP _0x2040027
                 _0x2040025:
000375 30e3      	CPI  R30,LOW(0x3)
000376 f009      	BREQ PC+2
000377 c0d0      	RJMP _0x204001B
                 _0x2040027:
000378 3320      	CPI  R18,48
000379 f010      	BRLO _0x204002A
00037a 332a      	CPI  R18,58
00037b f008      	BRLO _0x204002B
                 _0x204002A:
00037c c007      	RJMP _0x2040029
                 _0x204002B:
00037d e0aa      	LDI  R26,LOW(10)
00037e 9f5a      	MUL  R21,R26
00037f 2d50      	MOV  R21,R0
000380 2fe2      	MOV  R30,R18
000381 53e0      	SUBI R30,LOW(48)
000382 0f5e      	ADD  R21,R30
000383 c0c4      	RJMP _0x204001B
                 _0x2040029:
000384 2fe2      	MOV  R30,R18
000385 36e3      	CPI  R30,LOW(0x63)
000386 f439      	BRNE _0x204002F
000387 d16a      	RCALL SUBOPT_0x18
000388 d16c      	RCALL SUBOPT_0x19
000389 d168      	RCALL SUBOPT_0x18
00038a 81a4      	LDD  R26,Z+4
00038b 93aa      	ST   -Y,R26
00038c d16c      	RCALL SUBOPT_0x1A
00038d c0b9      	RJMP _0x2040030
                 _0x204002F:
00038e 37e3      	CPI  R30,LOW(0x73)
00038f f439      	BRNE _0x2040032
000390 d16e      	RCALL SUBOPT_0x1B
000391 d16f      	RCALL SUBOPT_0x1C
000392 d12b      	RCALL SUBOPT_0xD
000393 d120      	RCALL SUBOPT_0xA
000394 d0e3      	RCALL _strlen
000395 2f1e      	MOV  R17,R30
000396 c009      	RJMP _0x2040033
                 _0x2040032:
000397 37e0      	CPI  R30,LOW(0x70)
000398 f459      	BRNE _0x2040035
000399 d165      	RCALL SUBOPT_0x1B
00039a d166      	RCALL SUBOPT_0x1C
00039b d122      	RCALL SUBOPT_0xD
00039c d117      	RCALL SUBOPT_0xA
00039d d0e5      	RCALL _strlenf
00039e 2f1e      	MOV  R17,R30
00039f 6008      	ORI  R16,LOW(8)
                 _0x2040033:
0003a0 6002      	ORI  R16,LOW(2)
0003a1 770f      	ANDI R16,LOW(127)
0003a2 e030      	LDI  R19,LOW(0)
0003a3 c02e      	RJMP _0x2040036
                 _0x2040035:
0003a4 36e4      	CPI  R30,LOW(0x64)
0003a5 f011      	BREQ _0x2040039
0003a6 36e9      	CPI  R30,LOW(0x69)
0003a7 f411      	BRNE _0x204003A
                 _0x2040039:
0003a8 6004      	ORI  R16,LOW(4)
0003a9 c002      	RJMP _0x204003B
                 _0x204003A:
0003aa 37e5      	CPI  R30,LOW(0x75)
0003ab f429      	BRNE _0x204003C
                 _0x204003B:
0003ac e2e6      	LDI  R30,LOW(_tbl10_G102*2)
0003ad e0f0      	LDI  R31,HIGH(_tbl10_G102*2)
0003ae d10f      	RCALL SUBOPT_0xD
0003af e015      	LDI  R17,LOW(5)
0003b0 c00b      	RJMP _0x204003D
                 _0x204003C:
0003b1 35e8      	CPI  R30,LOW(0x58)
0003b2 f411      	BRNE _0x204003F
0003b3 6008      	ORI  R16,LOW(8)
0003b4 c003      	RJMP _0x2040040
                 _0x204003F:
0003b5 37e8      	CPI  R30,LOW(0x78)
0003b6 f009      	BREQ PC+2
0003b7 c08f      	RJMP _0x2040071
                 _0x2040040:
0003b8 e3e0      	LDI  R30,LOW(_tbl16_G102*2)
0003b9 e0f0      	LDI  R31,HIGH(_tbl16_G102*2)
0003ba d103      	RCALL SUBOPT_0xD
0003bb e014      	LDI  R17,LOW(4)
                 _0x204003D:
0003bc ff02      	SBRS R16,2
0003bd c011      	RJMP _0x2040042
0003be d140      	RCALL SUBOPT_0x1B
0003bf d141      	RCALL SUBOPT_0x1C
0003c0 d143      	RCALL SUBOPT_0x1D
0003c1 85ab      	LDD  R26,Y+11
0003c2 23aa      	TST  R26
0003c3 f42a      	BRPL _0x2040043
0003c4 85ea      	LDD  R30,Y+10
0003c5 85fb      	LDD  R31,Y+10+1
0003c6 d153      	RCALL __ANEGW1
0003c7 d13c      	RCALL SUBOPT_0x1D
0003c8 e24d      	LDI  R20,LOW(45)
                 _0x2040043:
0003c9 3040      	CPI  R20,0
0003ca f011      	BREQ _0x2040044
0003cb 5f1f      	SUBI R17,-LOW(1)
0003cc c001      	RJMP _0x2040045
                 _0x2040044:
0003cd 7f0b      	ANDI R16,LOW(251)
                 _0x2040045:
0003ce c003      	RJMP _0x2040046
                 _0x2040042:
0003cf d12f      	RCALL SUBOPT_0x1B
0003d0 d130      	RCALL SUBOPT_0x1C
0003d1 d132      	RCALL SUBOPT_0x1D
                 _0x2040046:
                 _0x2040036:
0003d2 fd00      	SBRC R16,0
0003d3 c010      	RJMP _0x2040047
                 _0x2040048:
0003d4 1715      	CP   R17,R21
0003d5 f470      	BRSH _0x204004A
0003d6 ff07      	SBRS R16,7
0003d7 c008      	RJMP _0x204004B
0003d8 ff02      	SBRS R16,2
0003d9 c004      	RJMP _0x204004C
0003da 7f0b      	ANDI R16,LOW(251)
0003db 2f24      	MOV  R18,R20
0003dc 5011      	SUBI R17,LOW(1)
0003dd c001      	RJMP _0x204004D
                 _0x204004C:
0003de e320      	LDI  R18,LOW(48)
                 _0x204004D:
0003df c001      	RJMP _0x204004E
                 _0x204004B:
0003e0 e220      	LDI  R18,LOW(32)
                 _0x204004E:
0003e1 d109      	RCALL SUBOPT_0x17
0003e2 5051      	SUBI R21,LOW(1)
0003e3 cff0      	RJMP _0x2040048
                 _0x204004A:
                 _0x2040047:
0003e4 2f31      	MOV  R19,R17
0003e5 ff01      	SBRS R16,1
0003e6 c013      	RJMP _0x204004F
                 _0x2040050:
0003e7 3030      	CPI  R19,0
0003e8 f081      	BREQ _0x2040052
0003e9 ff03      	SBRS R16,3
0003ea c004      	RJMP _0x2040053
0003eb d0cf      	RCALL SUBOPT_0xC
0003ec 9125      	LPM  R18,Z+
0003ed d0d0      	RCALL SUBOPT_0xD
0003ee c004      	RJMP _0x2040054
                 _0x2040053:
0003ef d0c4      	RCALL SUBOPT_0xA
0003f0 912d      	LD   R18,X+
0003f1 83ae      	STD  Y+6,R26
0003f2 83bf      	STD  Y+6+1,R27
                 _0x2040054:
0003f3 d0f7      	RCALL SUBOPT_0x17
0003f4 3050      	CPI  R21,0
0003f5 f009      	BREQ _0x2040055
0003f6 5051      	SUBI R21,LOW(1)
                 _0x2040055:
0003f7 5031      	SUBI R19,LOW(1)
0003f8 cfee      	RJMP _0x2040050
                 _0x2040052:
0003f9 c044      	RJMP _0x2040056
                 _0x204004F:
                 _0x2040058:
0003fa e320      	LDI  R18,LOW(48)
0003fb d0bf      	RCALL SUBOPT_0xC
0003fc d12c      	RCALL __GETW1PF
0003fd 87e8      	STD  Y+8,R30
0003fe 87f9      	STD  Y+8+1,R31
0003ff d0bb      	RCALL SUBOPT_0xC
000400 9632      	ADIW R30,2
000401 d0bc      	RCALL SUBOPT_0xD
                 _0x204005A:
000402 85e8      	LDD  R30,Y+8
000403 85f9      	LDD  R31,Y+8+1
000404 85aa      	LDD  R26,Y+10
000405 85bb      	LDD  R27,Y+10+1
000406 17ae      	CP   R26,R30
000407 07bf      	CPC  R27,R31
000408 f048      	BRLO _0x204005C
000409 5f2f      	SUBI R18,-LOW(1)
00040a 85a8      	LDD  R26,Y+8
00040b 85b9      	LDD  R27,Y+8+1
00040c 85ea      	LDD  R30,Y+10
00040d 85fb      	LDD  R31,Y+10+1
00040e 1bea      	SUB  R30,R26
00040f 0bfb      	SBC  R31,R27
000410 d0f3      	RCALL SUBOPT_0x1D
000411 cff0      	RJMP _0x204005A
                 _0x204005C:
000412 332a      	CPI  R18,58
000413 f028      	BRLO _0x204005D
000414 ff03      	SBRS R16,3
000415 c002      	RJMP _0x204005E
000416 5f29      	SUBI R18,-LOW(7)
000417 c001      	RJMP _0x204005F
                 _0x204005E:
000418 5d29      	SUBI R18,-LOW(39)
                 _0x204005F:
                 _0x204005D:
000419 fd04      	SBRC R16,4
00041a c019      	RJMP _0x2040061
00041b 3321      	CPI  R18,49
00041c f420      	BRSH _0x2040063
00041d 85a8      	LDD  R26,Y+8
00041e 85b9      	LDD  R27,Y+8+1
00041f 9711      	SBIW R26,1
000420 f409      	BRNE _0x2040062
                 _0x2040063:
000421 c009      	RJMP _0x20400CD
                 _0x2040062:
000422 1753      	CP   R21,R19
000423 f010      	BRLO _0x2040067
000424 ff00      	SBRS R16,0
000425 c001      	RJMP _0x2040068
                 _0x2040067:
000426 c011      	RJMP _0x2040066
                 _0x2040068:
000427 e220      	LDI  R18,LOW(32)
000428 ff07      	SBRS R16,7
000429 c00a      	RJMP _0x2040069
00042a e320      	LDI  R18,LOW(48)
                 _0x20400CD:
00042b 6100      	ORI  R16,LOW(16)
00042c ff02      	SBRS R16,2
00042d c006      	RJMP _0x204006A
00042e 7f0b      	ANDI R16,LOW(251)
00042f 934a      	ST   -Y,R20
000430 d0c8      	RCALL SUBOPT_0x1A
000431 3050      	CPI  R21,0
000432 f009      	BREQ _0x204006B
000433 5051      	SUBI R21,LOW(1)
                 _0x204006B:
                 _0x204006A:
                 _0x2040069:
                 _0x2040061:
000434 d0b6      	RCALL SUBOPT_0x17
000435 3050      	CPI  R21,0
000436 f009      	BREQ _0x204006C
000437 5051      	SUBI R21,LOW(1)
                 _0x204006C:
                 _0x2040066:
000438 5031      	SUBI R19,LOW(1)
000439 85a8      	LDD  R26,Y+8
00043a 85b9      	LDD  R27,Y+8+1
00043b 9712      	SBIW R26,2
00043c f008      	BRLO _0x2040059
00043d cfbc      	RJMP _0x2040058
                 _0x2040059:
                 _0x2040056:
00043e ff00      	SBRS R16,0
00043f c007      	RJMP _0x204006D
                 _0x204006E:
000440 3050      	CPI  R21,0
000441 f029      	BREQ _0x2040070
000442 5051      	SUBI R21,LOW(1)
000443 e2e0      	LDI  R30,LOW(32)
000444 93ea      	ST   -Y,R30
000445 d0b3      	RCALL SUBOPT_0x1A
000446 cff9      	RJMP _0x204006E
                 _0x2040070:
                 _0x204006D:
                 _0x2040071:
                 _0x2040030:
                 _0x20400CC:
000447 e010      	LDI  R17,LOW(0)
                 _0x204001B:
000448 cef9      	RJMP _0x2040016
                 _0x2040018:
000449 85ac      	LDD  R26,Y+12
00044a 85bd      	LDD  R27,Y+12+1
00044b d0d9      	RCALL __GETW1P
00044c d0f1      	RCALL __LOADLOCR6
                 _0x20A0002:
00044d 9664      	ADIW R28,20
00044e 9508      	RET
                 ; .FEND
                 _sprintf:
                 ; .FSTART _sprintf
00044f 92ff      	PUSH R15
000450 2ef8      	MOV  R15,R24
000451 9726      	SBIW R28,6
000452 d0e6      	RCALL __SAVELOCR4
000453 d0b3      	RCALL SUBOPT_0x1E
000454 9730      	SBIW R30,0
000455 f419      	BRNE _0x2040072
000456 efef      	LDI  R30,LOW(65535)
000457 efff      	LDI  R31,HIGH(65535)
000458 c01b      	RJMP _0x20A0001
                 _0x2040072:
000459 01de      	MOVW R26,R28
00045a 9616      	ADIW R26,6
00045b d0ba      	RCALL __ADDW2R15
00045c 018d      	MOVW R16,R26
00045d d0a9      	RCALL SUBOPT_0x1E
00045e d05f      	RCALL SUBOPT_0xD
00045f e0e0      	LDI  R30,LOW(0)
000460 87e8      	STD  Y+8,R30
000461 87e9      	STD  Y+8+1,R30
000462 01de      	MOVW R26,R28
000463 961a      	ADIW R26,10
000464 d0b1      	RCALL __ADDW2R15
000465 d0bf      	RCALL __GETW1P
000466 d03b      	RCALL SUBOPT_0x5
000467 931a      	ST   -Y,R17
000468 930a      	ST   -Y,R16
000469 e0eb      	LDI  R30,LOW(_put_buff_G102)
00046a e0f3      	LDI  R31,HIGH(_put_buff_G102)
00046b d036      	RCALL SUBOPT_0x5
00046c 01de      	MOVW R26,R28
00046d 961a      	ADIW R26,10
00046e dec9      	RCALL __print_G102
00046f 019f      	MOVW R18,R30
000470 d043      	RCALL SUBOPT_0xA
000471 e0e0      	LDI  R30,LOW(0)
000472 93ec      	ST   X,R30
000473 01f9      	MOVW R30,R18
                 _0x20A0001:
000474 d0cb      	RCALL __LOADLOCR4
000475 962a      	ADIW R28,10
000476 90ff      	POP  R15
000477 9508      	RET
                 ; .FEND
                 
                 	.CSEG
                 
                 	.CSEG
                 _strlen:
                 ; .FSTART _strlen
000478 d02c      	RCALL SUBOPT_0x6
000479 91a9          ld   r26,y+
00047a 91b9          ld   r27,y+
00047b 27ee          clr  r30
00047c 27ff          clr  r31
                 strlen0:
00047d 916d          ld   r22,x+
00047e 2366          tst  r22
00047f f011          breq strlen1
000480 9631          adiw r30,1
000481 cffb          rjmp strlen0
                 strlen1:
000482 9508          ret
                 ; .FEND
                 _strlenf:
                 ; .FSTART _strlenf
000483 d021      	RCALL SUBOPT_0x6
000484 27aa          clr  r26
000485 27bb          clr  r27
000486 91e9          ld   r30,y+
000487 91f9          ld   r31,y+
                 strlenf0:
000488 9005      	lpm  r0,z+
000489 2000          tst  r0
00048a f011          breq strlenf1
00048b 9611          adiw r26,1
00048c cffb          rjmp strlenf0
                 strlenf1:
00048d 01fd          movw r30,r26
00048e 9508          ret
                 ; .FEND
                 
                 	.DSEG
                 _serial:
000160           	.BYTE 0x4
                 _d:
000164           	.BYTE 0x10
                 __base_y_G100:
000174           	.BYTE 0x4
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 7 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x0:
00048f e0e1      	LDI  R30,LOW(1)
000490 93ea      	ST   -Y,R30
000491 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x1:
000492 e0a0      	LDI  R26,LOW(0)
000493 cd62      	RJMP _WriteRawRC
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x2:
000494 e1e4      	LDI  R30,LOW(20)
000495 93ea      	ST   -Y,R30
000496 e0a3      	LDI  R26,LOW(3)
000497 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x3:
000498 e0e8      	LDI  R30,LOW(8)
000499 93ea      	ST   -Y,R30
00049a e0a8      	LDI  R26,LOW(8)
00049b dd74      	RCALL _ClearBitMask
00049c e0ed      	LDI  R30,LOW(13)
00049d 93ea      	ST   -Y,R30
00049e 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x4:
00049f e0ec      	LDI  R30,LOW(12)
0004a0 93ea      	ST   -Y,R30
0004a1 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 13 TIMES, CODE SIZE REDUCTION:10 WORDS
                 SUBOPT_0x5:
0004a2 93fa      	ST   -Y,R31
0004a3 93ea      	ST   -Y,R30
0004a4 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 8 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x6:
0004a5 93ba      	ST   -Y,R27
0004a6 93aa      	ST   -Y,R26
0004a7 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 7 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x7:
0004a8 93ea      	ST   -Y,R30
0004a9 e8a0      	LDI  R26,LOW(128)
0004aa 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x8:
0004ab 2fe0      	MOV  R30,R16
0004ac e0f0      	LDI  R31,0
0004ad 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x9:
0004ae 01de      	MOVW R26,R28
0004af 9616      	ADIW R26,6
0004b0 0fae      	ADD  R26,R30
0004b1 1fbf      	ADC  R27,R31
0004b2 91ec      	LD   R30,X
0004b3 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 8 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0xA:
0004b4 81ae      	LDD  R26,Y+6
0004b5 81bf      	LDD  R27,Y+6+1
0004b6 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0xB:
0004b7 0fae      	ADD  R26,R30
0004b8 1fbf      	ADC  R27,R31
0004b9 91ac      	LD   R26,X
0004ba cd3b      	RJMP _WriteRawRC
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 8 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0xC:
0004bb 81ee      	LDD  R30,Y+6
0004bc 81ff      	LDD  R31,Y+6+1
0004bd 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 11 TIMES, CODE SIZE REDUCTION:8 WORDS
                 SUBOPT_0xD:
0004be 83ee      	STD  Y+6,R30
0004bf 83ff      	STD  Y+6+1,R31
0004c0 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 7 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0xE:
0004c1 81aa      	LDD  R26,Y+2
0004c2 81bb      	LDD  R27,Y+2+1
0004c3 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0xF:
0004c4 93aa      	ST   -Y,R26
0004c5 931a      	ST   -Y,R17
0004c6 81aa      	LDD  R26,Y+2
0004c7 dd39      	RCALL _ReadRawRC
0004c8 2f1e      	MOV  R17,R30
0004c9 81e9      	LDD  R30,Y+1
0004ca 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x10:
0004cb e0a1      	LDI  R26,LOW(1)
0004cc e0b0      	LDI  R27,0
0004cd c03e      	RJMP _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x11:
0004ce 27ff      	CLR  R31
0004cf 2766      	CLR  R22
0004d0 2777      	CLR  R23
0004d1 d05b      	RCALL __PUTPARD1
0004d2 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x12:
                +
0004d3 e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
0004d4 958a     +DEC R24
0004d5 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
0004d6 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x13:
0004d7 ddeb      	RCALL __lcd_write_data
0004d8 e0a3      	LDI  R26,LOW(3)
0004d9 e0b0      	LDI  R27,0
0004da c031      	RJMP _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:8 WORDS
                 SUBOPT_0x14:
0004db e3a0      	LDI  R26,LOW(48)
0004dc ddc7      	RCALL __lcd_write_nibble_G100
                +
0004dd ec88     +LDI R24 , LOW ( 200 )
0004de e090     +LDI R25 , HIGH ( 200 )
                +__DELAY_USW_LOOP :
0004df 9701     +SBIW R24 , 1
0004e0 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 200
0004e1 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x15:
0004e2 9614      	ADIW R26,4
0004e3 d041      	RCALL __GETW1P
0004e4 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x16:
0004e5 91ed      	LD   R30,X+
0004e6 91fd      	LD   R31,X+
0004e7 9631      	ADIW R30,1
0004e8 93fe      	ST   -X,R31
0004e9 93ee      	ST   -X,R30
0004ea 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:18 WORDS
                 SUBOPT_0x17:
0004eb 932a      	ST   -Y,R18
0004ec 85ad      	LDD  R26,Y+13
0004ed 85be      	LDD  R27,Y+13+1
0004ee 85ef      	LDD  R30,Y+15
0004ef 89f8      	LDD  R31,Y+15+1
0004f0 9509      	ICALL
0004f1 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x18:
0004f2 89e8      	LDD  R30,Y+16
0004f3 89f9      	LDD  R31,Y+16+1
0004f4 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x19:
0004f5 9734      	SBIW R30,4
0004f6 8be8      	STD  Y+16,R30
0004f7 8bf9      	STD  Y+16+1,R31
0004f8 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x1A:
0004f9 85ad      	LDD  R26,Y+13
0004fa 85be      	LDD  R27,Y+13+1
0004fb 85ef      	LDD  R30,Y+15
0004fc 89f8      	LDD  R31,Y+15+1
0004fd 9509      	ICALL
0004fe 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x1B:
0004ff dff2      	RCALL SUBOPT_0x18
000500 cff4      	RJMP SUBOPT_0x19
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x1C:
000501 89a8      	LDD  R26,Y+16
000502 89b9      	LDD  R27,Y+16+1
000503 cfde      	RJMP SUBOPT_0x15
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x1D:
000504 87ea      	STD  Y+10,R30
000505 87fb      	STD  Y+10+1,R31
000506 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x1E:
000507 01de      	MOVW R26,R28
000508 961c      	ADIW R26,12
000509 d00c      	RCALL __ADDW2R15
00050a d01a      	RCALL __GETW1P
00050b 9508      	RET
                 
                 
                 	.CSEG
                 _delay_ms:
00050c 9610      	adiw r26,0
00050d f039      	breq __delay_ms1
                 __delay_ms0:
                +
00050e ed80     +LDI R24 , LOW ( 0x7D0 )
00050f e097     +LDI R25 , HIGH ( 0x7D0 )
                +__DELAY_USW_LOOP :
000510 9701     +SBIW R24 , 1
000511 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0x7D0
000512 95a8      	wdr
000513 9711      	sbiw r26,1
000514 f7c9      	brne __delay_ms0
                 __delay_ms1:
000515 9508      	ret
                 
                 __ADDW2R15:
000516 2400      	CLR  R0
000517 0daf      	ADD  R26,R15
000518 1db0      	ADC  R27,R0
000519 9508      	RET
                 
                 __ANEGW1:
00051a 95f1      	NEG  R31
00051b 95e1      	NEG  R30
00051c 40f0      	SBCI R31,0
00051d 9508      	RET
                 
                 __LSLW3:
00051e 0fee      	LSL  R30
00051f 1fff      	ROL  R31
                 __LSLW2:
000520 0fee      	LSL  R30
000521 1fff      	ROL  R31
000522 0fee      	LSL  R30
000523 1fff      	ROL  R31
000524 9508      	RET
                 
                 __GETW1P:
000525 91ed      	LD   R30,X+
000526 91fc      	LD   R31,X
000527 9711      	SBIW R26,1
000528 9508      	RET
                 
                 __GETW1PF:
000529 9005      	LPM  R0,Z+
00052a 91f4      	LPM  R31,Z
00052b 2de0      	MOV  R30,R0
00052c 9508      	RET
                 
                 __PUTPARD1:
00052d 937a      	ST   -Y,R23
00052e 936a      	ST   -Y,R22
00052f 93fa      	ST   -Y,R31
000530 93ea      	ST   -Y,R30
000531 9508      	RET
                 
                 __BSTB1:
000532 94e8      	CLT
000533 23ee      	TST  R30
000534 f009      	BREQ PC+2
000535 9468      	SET
000536 9508      	RET
                 
                 __SAVELOCR6:
000537 935a      	ST   -Y,R21
                 __SAVELOCR5:
000538 934a      	ST   -Y,R20
                 __SAVELOCR4:
000539 933a      	ST   -Y,R19
                 __SAVELOCR3:
00053a 932a      	ST   -Y,R18
                 __SAVELOCR2:
00053b 931a      	ST   -Y,R17
00053c 930a      	ST   -Y,R16
00053d 9508      	RET
                 
                 __LOADLOCR6:
00053e 815d      	LDD  R21,Y+5
                 __LOADLOCR5:
00053f 814c      	LDD  R20,Y+4
                 __LOADLOCR4:
000540 813b      	LDD  R19,Y+3
                 __LOADLOCR3:
000541 812a      	LDD  R18,Y+2
                 __LOADLOCR2:
000542 8119      	LDD  R17,Y+1
000543 8108      	LD   R16,Y
000544 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega8 register use summary:
r0 :  14 r1 :   1 r2 :   1 r3 :   0 r4 :   1 r5 :   1 r6 :   0 r7 :   1 
r8 :   0 r9 :   0 r10:   0 r11:   0 r12:   0 r13:   0 r14:   0 r15:   4 
r16:  45 r17:  55 r18:  35 r19:  18 r20:  11 r21:  31 r22:   6 r23:   2 
r24:  20 r25:   5 r26: 157 r27:  50 r28:  36 r29:   1 r30: 339 r31:  68 
x  :  32 y  : 187 z  :  14 
Registers used: 26 out of 35 (74.3%)

ATmega8 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :   6 add   :   7 
adiw  :  45 and   :   3 andi  :  12 asr   :   0 bclr  :   0 bld   :   1 
brbc  :   0 brbs  :   0 brcc  :   0 brcs  :   0 break :   0 breq  :  28 
brge  :   0 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   8 
brlt  :   0 brmi  :   1 brne  :  38 brpl  :   1 brsh  :   6 brtc  :   0 
brts  :   0 brvc  :   0 brvs  :   0 bset  :   0 bst   :   0 cbi   :  11 
cbr   :   0 clc   :   0 clh   :   0 cli   :   1 cln   :   0 clr   :  10 
cls   :   0 clt   :   1 clv   :   0 clz   :   0 com   :   1 cp    :   8 
cpc   :   7 cpi   :  43 cpse  :   0 dec   :   3 des   :   0 eor   :   1 
fmul  :   0 fmuls :   0 fmulsu:   0 icall :   2 ijmp  :   0 in    :   7 
inc   :   0 ld    :  26 ldd   :  92 ldi   : 191 lds   :   4 lpm   :  14 
lsl   :   5 lsr   :   0 mov   :  38 movw  :  29 mul   :   2 muls  :   0 
mulsu :   0 neg   :   2 nop   :   0 or    :   1 ori   :   8 out   :  36 
pop   :   9 push  :   9 rcall : 239 ret   :  53 reti  :   0 rjmp  : 110 
rol   :   3 ror   :   0 sbc   :   1 sbci  :   1 sbi   :  15 sbic  :   0 
sbis  :   1 sbiw  :  31 sbr   :   0 sbrc  :   3 sbrs  :  11 sec   :   0 
seh   :   0 sei   :   0 sen   :   0 ser   :   0 ses   :   0 set   :   1 
sev   :   0 sez   :   0 sleep :   0 spm   :   0 st    :  79 std   :  24 
sts   :   2 sub   :   1 subi  :  18 swap  :   1 tst   :   5 wdr   :   1 

Instructions used: 59 out of 114 (51.8%)

ATmega8 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x000a8a   2642     56   2698    8192  32.9%
[.dseg] 0x000060 0x000178      0     24     24    1024   2.3%
[.eseg] 0x000000 0x000000      0      0      0     512   0.0%

Assembly complete, 0 errors, 3 warnings
