;
;#include <includes.c>
;
;#include <mega8.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x80
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x70
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x60
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x70
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;
;// Alphanumeric LCD functions
;#include <alcd.h>
;#include <delay.h>
;
;
;// Declare your global variables here
;
;char heater,cooler,motor;
;
;#define DATA_REGISTER_EMPTY (1<<UDRE)
;#define RX_COMPLETE (1<<RXC)
;#define FRAMING_ERROR (1<<FE)
;#define PARITY_ERROR (1<<UPE)
;#define DATA_OVERRUN (1<<DOR)
;
;// USART Receiver buffer
;#define RX_BUFFER_SIZE 8
;char rx_buffer[RX_BUFFER_SIZE];
;
;#if RX_BUFFER_SIZE <= 256
;unsigned char rx_wr_index=0,rx_rd_index=0;
;#else
;unsigned int rx_wr_index=0,rx_rd_index=0;
;#endif
;
;#if RX_BUFFER_SIZE < 256
;unsigned char rx_counter=0;
;#else
;unsigned int rx_counter=0;
;#endif
;
;// This flag is set on USART Receiver buffer overflow
;bit rx_buffer_overflow;
;
;// USART Receiver interrupt service routine
;interrupt [USART_RXC] void usart_rx_isr(void)
; 0000 0002 {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
;char status,data;
;status=UCSRA;
;PCODE: $0000000F VOL: 0
;	status -> R17
;	data -> R16
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
;data=UDR;
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
;if ((status & (FRAMING_ERROR | PARITY_ERROR | DATA_OVERRUN))==0)
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
;   {
;   rx_buffer[rx_wr_index++]=data;
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
;#if RX_BUFFER_SIZE == 256
;   // special case for receiver buffer size=256
;   if (++rx_counter == 0) rx_buffer_overflow=1;
;#else
;   if (rx_wr_index == RX_BUFFER_SIZE) rx_wr_index=0;
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
;   if (++rx_counter == RX_BUFFER_SIZE)
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
;      {
;      rx_counter=0;
;PCODE: $00000025 VOL: 0
;      rx_buffer_overflow=1;
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
;      }
;#endif
;   }
;PCODE: $00000029 VOL: 0
;}
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
;
;#ifndef _DEBUG_TERMINAL_IO_
;// Get a character from the USART Receiver buffer
;#define _ALTERNATE_GETCHAR_
;#pragma used+
;char getchar(void)
;{
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
;char data;
;while (rx_counter==0);
;PCODE: $00000031 VOL: 0
;	data -> R17
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
;data=rx_buffer[rx_rd_index++];
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
;#if RX_BUFFER_SIZE != 256
;if (rx_rd_index == RX_BUFFER_SIZE) rx_rd_index=0;
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
;#endif
;#asm("cli")
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
	cli
;PCODE: $00000042 VOL: 0
;--rx_counter;
;PCODE: $00000043 VOL: 0
;#asm("sei")
;PCODE: $00000044 VOL: 0
	sei
;PCODE: $00000045 VOL: 0
;return data;
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
;}
;PCODE: $00000049 VOL: 0
;#pragma used-
;#endif
;
;// Standard Input/Output functions
;#include <stdio.h>
;
;void main(void)
;{
;PCODE: $0000004A VOL: 0
;// Declare your local variables here
;
;// Input/Output Ports initialization
;// Port B initialization
;// Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
;DDRB=(0<<DDB7) | (0<<DDB6) | (0<<DDB5) | (0<<DDB4) | (0<<DDB3) | (0<<DDB2) | (0<<DDB1) | (0<<DDB0);
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
;// State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
;PORTB=(0<<PORTB7) | (0<<PORTB6) | (0<<PORTB5) | (0<<PORTB4) | (0<<PORTB3) | (0<<PORTB2) | (0<<PORTB1) | (0<<PORTB0);
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
;
;// Port C initialization
;// Function: Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
;DDRC=(0<<DDC6) | (0<<DDC5) | (0<<DDC4) | (0<<DDC3) | (0<<DDC2) | (0<<DDC1) | (0<<DDC0);
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
;// State: Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
;PORTC=(0<<PORTC6) | (0<<PORTC5) | (0<<PORTC4) | (0<<PORTC3) | (0<<PORTC2) | (0<<PORTC1) | (0<<PORTC0);
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
;
;// Port D initialization
;// Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
;DDRD=(0<<DDD7) | (0<<DDD6) | (0<<DDD5) | (0<<DDD4) | (0<<DDD3) | (0<<DDD2) | (0<<DDD1) | (0<<DDD0);
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
;// State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
;PORTD=(0<<PORTD7) | (0<<PORTD6) | (0<<PORTD5) | (0<<PORTD4) | (0<<PORTD3) | (0<<PORTD2) | (0<<PORTD1) | (0<<PORTD0);
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
;
;// Timer/Counter 0 initialization
;// Clock source: System Clock
;// Clock value: Timer 0 Stopped
;TCCR0=(0<<CS02) | (0<<CS01) | (0<<CS00);
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
;TCNT0=0x00;
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
;
;// Timer/Counter 1 initialization
;// Clock source: System Clock
;// Clock value: Timer1 Stopped
;// Mode: Normal top=0xFFFF
;// OC1A output: Disconnected
;// OC1B output: Disconnected
;// Noise Canceler: Off
;// Input Capture on Falling Edge
;// Timer1 Overflow Interrupt: Off
;// Input Capture Interrupt: Off
;// Compare A Match Interrupt: Off
;// Compare B Match Interrupt: Off
;TCCR1A=(0<<COM1A1) | (0<<COM1A0) | (0<<COM1B1) | (0<<COM1B0) | (0<<WGM11) | (0<<WGM10);
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
;TCCR1B=(0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (0<<WGM12) | (0<<CS12) | (0<<CS11) | (0<<CS10);
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
;TCNT1H=0x00;
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
;TCNT1L=0x00;
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
;ICR1H=0x00;
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
;ICR1L=0x00;
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
;OCR1AH=0x00;
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
;OCR1AL=0x00;
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
;OCR1BH=0x00;
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
;OCR1BL=0x00;
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
;
;// Timer/Counter 2 initialization
;// Clock source: System Clock
;// Clock value: Timer2 Stopped
;// Mode: Normal top=0xFF
;// OC2 output: Disconnected
;ASSR=0<<AS2;
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
;TCCR2=(0<<PWM2) | (0<<COM21) | (0<<COM20) | (0<<CTC2) | (0<<CS22) | (0<<CS21) | (0<<CS20);
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
;TCNT2=0x00;
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
;OCR2=0x00;
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
;
;// Timer(s)/Counter(s) Interrupt(s) initialization
;TIMSK=(0<<OCIE2) | (0<<TOIE2) | (0<<TICIE1) | (0<<OCIE1A) | (0<<OCIE1B) | (0<<TOIE1) | (0<<TOIE0);
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
;
;// External Interrupt(s) initialization
;// INT0: Off
;// INT1: Off
;MCUCR=(0<<ISC11) | (0<<ISC10) | (0<<ISC01) | (0<<ISC00);
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
;
;// USART initialization
;// Communication Parameters: 8 Data, 1 Stop, No Parity
;// USART Receiver: On
;// USART Transmitter: On
;// USART Mode: Asynchronous
;// USART Baud Rate: 9600
;UCSRA=(0<<RXC) | (0<<TXC) | (0<<UDRE) | (0<<FE) | (0<<DOR) | (0<<UPE) | (0<<U2X) | (0<<MPCM);
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
;UCSRB=(1<<RXCIE) | (0<<TXCIE) | (0<<UDRIE) | (1<<RXEN) | (1<<TXEN) | (0<<UCSZ2) | (0<<RXB8) | (0<<TXB8);
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
;UCSRC=(1<<URSEL) | (0<<UMSEL) | (0<<UPM1) | (0<<UPM0) | (0<<USBS) | (1<<UCSZ1) | (1<<UCSZ0) | (0<<UCPOL);
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
;UBRRH=0x00;
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
;UBRRL=0x47;
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
;
;// Analog Comparator initialization
;// Analog Comparator: Off
;// The Analog Comparator's positive input is
;// connected to the AIN0 pin
;// The Analog Comparator's negative input is
;// connected to the AIN1 pin
;ACSR=(1<<ACD) | (0<<ACBG) | (0<<ACO) | (0<<ACI) | (0<<ACIE) | (0<<ACIC) | (0<<ACIS1) | (0<<ACIS0);
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
;SFIOR=(0<<ACME);
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
;
;// ADC initialization
;// ADC disabled
;ADCSRA=(0<<ADEN) | (0<<ADSC) | (0<<ADFR) | (0<<ADIF) | (0<<ADIE) | (0<<ADPS2) | (0<<ADPS1) | (0<<ADPS0);
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
;
;// SPI initialization
;// SPI disabled
;SPCR=(0<<SPIE) | (0<<SPE) | (0<<DORD) | (0<<MSTR) | (0<<CPOL) | (0<<CPHA) | (0<<SPR1) | (0<<SPR0);
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
;
;// TWI initialization
;// TWI disabled
;TWCR=(0<<TWEA) | (0<<TWSTA) | (0<<TWSTO) | (0<<TWEN) | (0<<TWIE);
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
;
;// Alphanumeric LCD initialization
;// Connections are specified in the
;// Project|Configure|C Compiler|Libraries|Alphanumeric LCD menu:
;// RS - PORTC Bit 0
;// RD - PORTC Bit 6
;// EN - PORTC Bit 1
;// D4 - PORTC Bit 2
;// D5 - PORTC Bit 3
;// D6 - PORTC Bit 4
;// D7 - PORTC Bit 5
;// Characters/line: 8
;lcd_init(8);
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
; 0000 0003 
; 0000 0004 // Global enable interrupts
; 0000 0005 #asm("sei")
;PCODE: $00000091 VOL: 0
	sei
;PCODE: $00000092 VOL: 0
; 0000 0006       lcd_puts("hi");
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
; 0000 0007       delay_ms(2000);
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
; 0000 0008       lcd_clear();
;PCODE: $00000098 VOL: 0
; 0000 0009       delay_ms(500);
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
; 0000 000A while (1)
;PCODE: $0000009B VOL: 0
; 0000 000B       {
; 0000 000C       // Place your code here
; 0000 000D         lcd_putchar(heater);
;PCODE: $0000009C VOL: 0
;PCODE: $0000009D VOL: 0
; 0000 000E         lcd_putchar(cooler);
;PCODE: $0000009E VOL: 0
;PCODE: $0000009F VOL: 0
; 0000 000F         lcd_putchar(motor);
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
; 0000 0010       }
;PCODE: $000000A2 VOL: 0
;PCODE: $000000A3 VOL: 0
; 0000 0011 }
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0

	.DSEG
_0xA:
	.BYTE 0x3
