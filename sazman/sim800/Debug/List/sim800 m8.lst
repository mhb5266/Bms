
AVRASM ver. 2.1.30  C:\Users\Barouei\Desktop\Bms\sazman\sim800\Debug\List\sim800 m8.asm Sun Aug 08 17:03:26 2021

C:\Users\Barouei\Desktop\Bms\sazman\sim800\Debug\List\sim800 m8.asm(1086): warning: Register r5 already defined by the .DEF directive
C:\Users\Barouei\Desktop\Bms\sazman\sim800\Debug\List\sim800 m8.asm(1087): warning: Register r4 already defined by the .DEF directive
C:\Users\Barouei\Desktop\Bms\sazman\sim800\Debug\List\sim800 m8.asm(1088): warning: Register r7 already defined by the .DEF directive
C:\Users\Barouei\Desktop\Bms\sazman\sim800\Debug\List\sim800 m8.asm(1089): warning: Register r6 already defined by the .DEF directive
C:\Users\Barouei\Desktop\Bms\sazman\sim800\Debug\List\sim800 m8.asm(1090): warning: Register r9 already defined by the .DEF directive
C:\Users\Barouei\Desktop\Bms\sazman\sim800\Debug\List\sim800 m8.asm(1091): warning: Register r8 already defined by the .DEF directive
C:\Users\Barouei\Desktop\Bms\sazman\sim800\Debug\List\sim800 m8.asm(1092): warning: Register r11 already defined by the .DEF directive
C:\Users\Barouei\Desktop\Bms\sazman\sim800\Debug\List\sim800 m8.asm(1093): warning: Register r10 already defined by the .DEF directive
C:\Users\Barouei\Desktop\Bms\sazman\sim800\Debug\List\sim800 m8.asm(1094): warning: Register r13 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.12 Advanced
                 ;(C) Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega8A
                 ;Program type           : Application
                 ;Clock frequency        : 11.059200 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 256 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: Yes
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega8A
                 	#pragma AVRPART MEMORY PROG_FLASH 8192
                 	#pragma AVRPART MEMORY EEPROM 512
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 1024
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU GICR=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x045F
                 	.EQU __DSTACK_SIZE=0x0100
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	RCALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	RCALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	RCALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	RCALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	RCALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	RCALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _rx_wr_index=R5
                 	.DEF _rx_rd_index=R4
                 	.DEF _rx_counter=R7
                 	.DEF _tx_wr_index=R6
                 	.DEF _tx_rd_index=R9
                 	.DEF _tx_counter=R8
                 	.DEF __lcd_x=R11
                 	.DEF __lcd_y=R10
                 	.DEF __lcd_maxx=R13
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 c040      	RJMP __RESET
000001 cffe      	RJMP 0x00
000002 cffd      	RJMP 0x00
000003 cffc      	RJMP 0x00
000004 cffb      	RJMP 0x00
000005 cffa      	RJMP 0x00
000006 cff9      	RJMP 0x00
000007 cff8      	RJMP 0x00
000008 c0ad      	RJMP _timer1_ovf_isr
000009 cff6      	RJMP 0x00
00000a cff5      	RJMP 0x00
00000b c061      	RJMP _usart_rx_isr
00000c cff3      	RJMP 0x00
00000d c07a      	RJMP _usart_tx_isr
00000e cff1      	RJMP 0x00
00000f cff0      	RJMP 0x00
000010 cfef      	RJMP 0x00
000011 cfee      	RJMP 0x00
000012 cfed      	RJMP 0x00
                 
                 _tbl10_G102:
000013 2710
000014 03e8
000015 0064
000016 000a      	.DB  0x10,0x27,0xE8,0x3,0x64,0x0,0xA,0x0
000017 0001      	.DB  0x1,0x0
                 _tbl16_G102:
000018 1000
000019 0100
00001a 0010
00001b 0001      	.DB  0x0,0x10,0x0,0x1,0x10,0x0,0x1,0x0
                 
                 ;REGISTER BIT VARIABLES INITIALIZATION
                 __REG_BIT_VARS:
00001c 0000      	.DW  0x0000
                 
                 ;GLOBAL REGISTER VARIABLES INITIALIZATION
                 __REG_VARS:
00001d 0000
00001e 0000      	.DB  0x0,0x0,0x0,0x0
00001f 0000      	.DB  0x0,0x0
                 
                 _0x0:
000020 2a2a
000021 732a
000022 6d69
000023 3038      	.DB  0x2A,0x2A,0x2A,0x73,0x69,0x6D,0x38,0x30
000024 6330
000025 2a2a
000026 002a
000027 7777      	.DB  0x30,0x63,0x2A,0x2A,0x2A,0x0,0x77,0x77
000028 2e77
000029 6d45
00002a 6574
00002b 6863      	.DB  0x77,0x2E,0x45,0x6D,0x74,0x65,0x63,0x68
00002c 696e
00002d 2e63
00002e 7269
00002f 4800      	.DB  0x6E,0x69,0x63,0x2E,0x69,0x72,0x0,0x48
000030 0069
000031 5441
C:\Users\Barouei\Desktop\Bms\sazman\sim800\Debug\List\sim800 m8.asm(1143): warning: .cseg .db misalignment - padding zero byte
000032 0000      	.DB  0x69,0x0,0x41,0x54,0x0
                 _0x2020003:
000033 c080      	.DB  0x80,0xC0
                 
                 __GLOBAL_INI_TBL:
000034 0001      	.DW  0x01
000035 0002      	.DW  0x02
000036 0038      	.DW  __REG_BIT_VARS*2
                 
000037 0006      	.DW  0x06
000038 0004      	.DW  0x04
000039 003a      	.DW  __REG_VARS*2
                 
00003a 0003      	.DW  0x03
00003b 0160      	.DW  _0x17
00003c 005f      	.DW  _0x0*2+31
                 
00003d 0002      	.DW  0x02
00003e 01a1      	.DW  __base_y_G101
00003f 0066      	.DW  _0x2020003*2
                 
                 _0xFFFFFFFF:
000040 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
000041 94f8      	CLI
000042 27ee      	CLR  R30
000043 bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
000044 e0f1      	LDI  R31,1
000045 bffb      	OUT  GICR,R31
000046 bfeb      	OUT  GICR,R30
000047 bfe5      	OUT  MCUCR,R30
                 
                 ;CLEAR R2-R14
000048 e08d      	LDI  R24,(14-2)+1
000049 e0a2      	LDI  R26,2
00004a 27bb      	CLR  R27
                 __CLEAR_REG:
00004b 93ed      	ST   X+,R30
00004c 958a      	DEC  R24
00004d f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
00004e e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
00004f e094      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
000050 e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
000051 93ed      	ST   X+,R30
000052 9701      	SBIW R24,1
000053 f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
000054 e6e8      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
000055 e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
000056 9185      	LPM  R24,Z+
000057 9195      	LPM  R25,Z+
000058 9700      	SBIW R24,0
000059 f061      	BREQ __GLOBAL_INI_END
00005a 91a5      	LPM  R26,Z+
00005b 91b5      	LPM  R27,Z+
00005c 9005      	LPM  R0,Z+
00005d 9015      	LPM  R1,Z+
00005e 01bf      	MOVW R22,R30
00005f 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
000060 9005      	LPM  R0,Z+
000061 920d      	ST   X+,R0
000062 9701      	SBIW R24,1
000063 f7e1      	BRNE __GLOBAL_INI_LOOP
000064 01fb      	MOVW R30,R22
000065 cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
000066 e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
000067 bfed      	OUT  SPL,R30
000068 e0e4      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
000069 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
00006a e6c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
00006b e0d1      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
00006c c04d      	RJMP _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x160
                 
                 	.CSEG
                 ;
                 ;#include <mega8.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x80
                 	.EQU __sm_mask=0x70
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0x60
                 	.EQU __sm_ext_standby=0x70
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;#include <string.h>
                 ;#include <defines.c>
                 ;#define simreset PORTD.7
                 ;
                 ;
                 ;#define enter 0x0d
                 ;#define ctrl_z 0x1a
                 ;
                 ;char datain[30];
                 ;//char strin;
                 ;#include <uartdef.c>
                 ;#define DATA_REGISTER_EMPTY (1<<UDRE)
                 ;#define RX_COMPLETE (1<<RXC)
                 ;#define FRAMING_ERROR (1<<FE)
                 ;#define PARITY_ERROR (1<<UPE)
                 ;#define DATA_OVERRUN (1<<DOR)
                 ;
                 ;// USART Receiver buffer
                 ;#define RX_BUFFER_SIZE 16
                 ;char rx_buffer[RX_BUFFER_SIZE];
                 ;
                 ;#if RX_BUFFER_SIZE <= 256
                 ;unsigned char rx_wr_index=0,rx_rd_index=0;
                 ;#else
                 ;unsigned int rx_wr_index=0,rx_rd_index=0;
                 ;#endif
                 ;
                 ;#if RX_BUFFER_SIZE < 256
                 ;unsigned char rx_counter=0;
                 ;#else
                 ;unsigned int rx_counter=0;
                 ;#endif
                 ;
                 ;// This flag is set on USART Receiver buffer overflow
                 ;bit rx_buffer_overflow;
                 ;
                 ;// USART Receiver interrupt service routine
                 ;interrupt [USART_RXC] void usart_rx_isr(void)
                 ; 0000 0005 {
                 
                 	.CSEG
                 _usart_rx_isr:
                 ; .FSTART _usart_rx_isr
00006d d29e      	RCALL SUBOPT_0x0
                 ;char status,data;
                 ;status=UCSRA;
00006e d300      	RCALL __SAVELOCR2
                 ;	status -> R17
                 ;	data -> R16
00006f b11b      	IN   R17,11
                 ;data=UDR;
000070 b10c      	IN   R16,12
                 ;
                 ;if ((status & (FRAMING_ERROR | PARITY_ERROR | DATA_OVERRUN))==0)
000071 2fe1      	MOV  R30,R17
000072 71ec      	ANDI R30,LOW(0x1C)
000073 f489      	BRNE _0x3
                 ;   {
                 ;   rx_buffer[rx_wr_index++]=data;
000074 2de5      	MOV  R30,R5
000075 9453      	INC  R5
000076 e0f0      	LDI  R31,0
000077 57ef      	SUBI R30,LOW(-_rx_buffer)
000078 4ffe      	SBCI R31,HIGH(-_rx_buffer)
000079 8300      	ST   Z,R16
                 ;#if RX_BUFFER_SIZE == 256
                 ;   // special case for receiver buffer size=256
                 ;   if (++rx_counter == 0) rx_buffer_overflow=1;
                 ;#else
                 ;   if (rx_wr_index == RX_BUFFER_SIZE) rx_wr_index=0;
00007a e1e0      	LDI  R30,LOW(16)
00007b 15e5      	CP   R30,R5
00007c f409      	BRNE _0x4
00007d 2455      	CLR  R5
                 ;   if (++rx_counter == RX_BUFFER_SIZE)
                 _0x4:
00007e 9473      	INC  R7
00007f e1e0      	LDI  R30,LOW(16)
000080 15e7      	CP   R30,R7
000081 f419      	BRNE _0x5
                 ;      {
                 ;      rx_counter=0;
000082 2477      	CLR  R7
                 ;      rx_buffer_overflow=1;
000083 9468      	SET
000084 f820      	BLD  R2,0
                 ;      }
                 ;#endif
                 ;   }
                 _0x5:
                 ;}
                 _0x3:
000085 9109      	LD   R16,Y+
000086 9119      	LD   R17,Y+
000087 c00f      	RJMP _0x19
                 ; .FEND
                 ;
                 ;#ifndef _DEBUG_TERMINAL_IO_
                 ;// Get a character from the USART Receiver buffer
                 ;#define _ALTERNATE_GETCHAR_
                 ;#pragma used+
                 ;char getchar(void)
                 ;{
                 ;char data;
                 ;while (rx_counter==0);
                 ;	data -> R17
                 ;data=rx_buffer[rx_rd_index++];
                 ;#if RX_BUFFER_SIZE != 256
                 ;if (rx_rd_index == RX_BUFFER_SIZE) rx_rd_index=0;
                 ;#endif
                 ;#asm("cli")
                 ;--rx_counter;
                 ;#asm("sei")
                 ;return data;
                 ;}
                 ;#pragma used-
                 ;#endif
                 ;
                 ;// USART Transmitter buffer
                 ;#define TX_BUFFER_SIZE 16
                 ;char tx_buffer[TX_BUFFER_SIZE];
                 ;
                 ;#if TX_BUFFER_SIZE <= 256
                 ;unsigned char tx_wr_index=0,tx_rd_index=0;
                 ;#else
                 ;unsigned int tx_wr_index=0,tx_rd_index=0;
                 ;#endif
                 ;
                 ;#if TX_BUFFER_SIZE < 256
                 ;unsigned char tx_counter=0;
                 ;#else
                 ;unsigned int tx_counter=0;
                 ;#endif
                 ;
                 ;// USART Transmitter interrupt service routine
                 ;interrupt [USART_TXC] void usart_tx_isr(void)
                 ;{
                 _usart_tx_isr:
                 ; .FSTART _usart_tx_isr
000088 d283      	RCALL SUBOPT_0x0
                 ;if (tx_counter)
000089 2088      	TST  R8
00008a f061      	BREQ _0xA
                 ;   {
                 ;   --tx_counter;
00008b 948a      	DEC  R8
                 ;   UDR=tx_buffer[tx_rd_index++];
00008c 2de9      	MOV  R30,R9
00008d 9493      	INC  R9
00008e e0f0      	LDI  R31,0
00008f 56ef      	SUBI R30,LOW(-_tx_buffer)
000090 4ffe      	SBCI R31,HIGH(-_tx_buffer)
000091 81e0      	LD   R30,Z
000092 b9ec      	OUT  0xC,R30
                 ;#if TX_BUFFER_SIZE != 256
                 ;   if (tx_rd_index == TX_BUFFER_SIZE) tx_rd_index=0;
000093 e1e0      	LDI  R30,LOW(16)
000094 15e9      	CP   R30,R9
000095 f409      	BRNE _0xB
000096 2499      	CLR  R9
                 ;#endif
                 ;   }
                 _0xB:
                 ;}
                 _0xA:
                 _0x19:
000097 91e9      	LD   R30,Y+
000098 bfef      	OUT  SREG,R30
000099 91f9      	LD   R31,Y+
00009a 91e9      	LD   R30,Y+
00009b 9518      	RETI
                 ; .FEND
                 ;
                 ;#ifndef _DEBUG_TERMINAL_IO_
                 ;// Write a character to the USART Transmitter buffer
                 ;#define _ALTERNATE_PUTCHAR_
                 ;#pragma used+
                 ;void putchar(char c)
                 ;{
                 _putchar:
                 ; .FSTART _putchar
                 ;while (tx_counter == TX_BUFFER_SIZE);
00009c 93aa      	ST   -Y,R26
                 ;	c -> Y+0
                 _0xC:
00009d e1e0      	LDI  R30,LOW(16)
00009e 15e8      	CP   R30,R8
00009f f3e9      	BREQ _0xC
                 ;#asm("cli")
0000a0 94f8      	cli
                 ;if (tx_counter || ((UCSRA & DATA_REGISTER_EMPTY)==0))
0000a1 2088      	TST  R8
0000a2 f411      	BRNE _0x10
0000a3 995d      	SBIC 0xB,5
0000a4 c00d      	RJMP _0xF
                 _0x10:
                 ;   {
                 ;   tx_buffer[tx_wr_index++]=c;
0000a5 2de6      	MOV  R30,R6
0000a6 9463      	INC  R6
0000a7 e0f0      	LDI  R31,0
0000a8 56ef      	SUBI R30,LOW(-_tx_buffer)
0000a9 4ffe      	SBCI R31,HIGH(-_tx_buffer)
0000aa 81a8      	LD   R26,Y
0000ab 83a0      	STD  Z+0,R26
                 ;#if TX_BUFFER_SIZE != 256
                 ;   if (tx_wr_index == TX_BUFFER_SIZE) tx_wr_index=0;
0000ac e1e0      	LDI  R30,LOW(16)
0000ad 15e6      	CP   R30,R6
0000ae f409      	BRNE _0x12
0000af 2466      	CLR  R6
                 ;#endif
                 ;   ++tx_counter;
                 _0x12:
0000b0 9483      	INC  R8
                 ;   }
                 ;else
0000b1 c002      	RJMP _0x13
                 _0xF:
                 ;   UDR=c;
0000b2 81e8      	LD   R30,Y
0000b3 b9ec      	OUT  0xC,R30
                 ;#asm("sei")
                 _0x13:
0000b4 9478      	sei
                 ;}
0000b5 c111      	RJMP _0x2080002
                 ; .FEND
                 ;#pragma used-
                 ;#endif
                 ;
                 ;// Alphanumeric LCD functions
                 ;#include <alcd.h>
                 ;#include <delay.h>
                 ;
                 ;// Declare your global variables here
                 ;
                 ;// Standard Input/Output functions
                 ;#include <stdio.h>
                 ;
                 ;// Timer1 overflow interrupt service routine
                 ;interrupt [TIM1_OVF] void timer1_ovf_isr(void)
                 ; 0000 0012 {
                 _timer1_ovf_isr:
                 ; .FSTART _timer1_ovf_isr
0000b6 93ea      	ST   -Y,R30
                 ; 0000 0013 // Reinitialize Timer1 value
                 ; 0000 0014 TCNT1H=0x5740 >> 8;
0000b7 d259      	RCALL SUBOPT_0x1
                 ; 0000 0015 TCNT1L=0x5740 & 0xff;
                 ; 0000 0016 // Place your code here
                 ; 0000 0017 
                 ; 0000 0018 }
0000b8 91e9      	LD   R30,Y+
0000b9 9518      	RETI
                 ; .FEND
                 ;
                 ;void main(void)
                 ; 0000 001B {
                 _main:
                 ; .FSTART _main
                 ; 0000 001C // Declare your local variables here
                 ; 0000 001D 
                 ; 0000 001E // Input/Output Ports initialization
                 ; 0000 001F // Port B initialization
                 ; 0000 0020 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 0021 DDRB=(0<<DDB7) | (0<<DDB6) | (0<<DDB5) | (0<<DDB4) | (0<<DDB3) | (0<<DDB2) | (0<<DDB1) | (0<<DDB0);
0000ba e0e0      	LDI  R30,LOW(0)
0000bb bbe7      	OUT  0x17,R30
                 ; 0000 0022 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0000 0023 PORTB=(0<<PORTB7) | (0<<PORTB6) | (0<<PORTB5) | (0<<PORTB4) | (0<<PORTB3) | (0<<PORTB2) | (0<<PORTB1) | (0<<PORTB0);
0000bc bbe8      	OUT  0x18,R30
                 ; 0000 0024 
                 ; 0000 0025 // Port C initialization
                 ; 0000 0026 // Function: Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 0027 DDRC=(0<<DDC6) | (0<<DDC5) | (0<<DDC4) | (0<<DDC3) | (0<<DDC2) | (0<<DDC1) | (0<<DDC0);
0000bd bbe4      	OUT  0x14,R30
                 ; 0000 0028 // State: Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0000 0029 PORTC=(0<<PORTC6) | (0<<PORTC5) | (0<<PORTC4) | (0<<PORTC3) | (0<<PORTC2) | (0<<PORTC1) | (0<<PORTC0);
0000be bbe5      	OUT  0x15,R30
                 ; 0000 002A 
                 ; 0000 002B // Port D initialization
                 ; 0000 002C // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 002D DDRD=(1<<DDD7) | (0<<DDD6) | (0<<DDD5) | (0<<DDD4) | (0<<DDD3) | (0<<DDD2) | (0<<DDD1) | (0<<DDD0);
0000bf e8e0      	LDI  R30,LOW(128)
0000c0 bbe1      	OUT  0x11,R30
                 ; 0000 002E // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0000 002F PORTD=(1<<PORTD7) | (0<<PORTD6) | (0<<PORTD5) | (0<<PORTD4) | (0<<PORTD3) | (0<<PORTD2) | (0<<PORTD1) | (0<<PORTD0);
0000c1 bbe2      	OUT  0x12,R30
                 ; 0000 0030 
                 ; 0000 0031 // Timer/Counter 0 initialization
                 ; 0000 0032 // Clock source: System Clock
                 ; 0000 0033 // Clock value: Timer 0 Stopped
                 ; 0000 0034 TCCR0=(0<<CS02) | (0<<CS01) | (0<<CS00);
0000c2 e0e0      	LDI  R30,LOW(0)
0000c3 bfe3      	OUT  0x33,R30
                 ; 0000 0035 TCNT0=0x00;
0000c4 bfe2      	OUT  0x32,R30
                 ; 0000 0036 
                 ; 0000 0037 // Timer/Counter 1 initialization
                 ; 0000 0038 // Clock source: System Clock
                 ; 0000 0039 // Clock value: 43.200 kHz
                 ; 0000 003A // Mode: Normal top=0xFFFF
                 ; 0000 003B // OC1A output: Disconnected
                 ; 0000 003C // OC1B output: Disconnected
                 ; 0000 003D // Noise Canceler: Off
                 ; 0000 003E // Input Capture on Falling Edge
                 ; 0000 003F // Timer Period: 1 s
                 ; 0000 0040 // Timer1 Overflow Interrupt: On
                 ; 0000 0041 // Input Capture Interrupt: Off
                 ; 0000 0042 // Compare A Match Interrupt: Off
                 ; 0000 0043 // Compare B Match Interrupt: Off
                 ; 0000 0044 TCCR1A=(0<<COM1A1) | (0<<COM1A0) | (0<<COM1B1) | (0<<COM1B0) | (0<<WGM11) | (0<<WGM10);
0000c5 bdef      	OUT  0x2F,R30
                 ; 0000 0045 TCCR1B=(0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (0<<WGM12) | (1<<CS12) | (0<<CS11) | (0<<CS10);
0000c6 e0e4      	LDI  R30,LOW(4)
0000c7 bdee      	OUT  0x2E,R30
                 ; 0000 0046 TCNT1H=0x57;
0000c8 d248      	RCALL SUBOPT_0x1
                 ; 0000 0047 TCNT1L=0x40;
                 ; 0000 0048 ICR1H=0x00;
0000c9 e0e0      	LDI  R30,LOW(0)
0000ca bde7      	OUT  0x27,R30
                 ; 0000 0049 ICR1L=0x00;
0000cb bde6      	OUT  0x26,R30
                 ; 0000 004A OCR1AH=0x00;
0000cc bdeb      	OUT  0x2B,R30
                 ; 0000 004B OCR1AL=0x00;
0000cd bdea      	OUT  0x2A,R30
                 ; 0000 004C OCR1BH=0x00;
0000ce bde9      	OUT  0x29,R30
                 ; 0000 004D OCR1BL=0x00;
0000cf bde8      	OUT  0x28,R30
                 ; 0000 004E 
                 ; 0000 004F // Timer/Counter 2 initialization
                 ; 0000 0050 // Clock source: System Clock
                 ; 0000 0051 // Clock value: Timer2 Stopped
                 ; 0000 0052 // Mode: Normal top=0xFF
                 ; 0000 0053 // OC2 output: Disconnected
                 ; 0000 0054 ASSR=0<<AS2;
0000d0 bde2      	OUT  0x22,R30
                 ; 0000 0055 TCCR2=(0<<PWM2) | (0<<COM21) | (0<<COM20) | (0<<CTC2) | (0<<CS22) | (0<<CS21) | (0<<CS20);
0000d1 bde5      	OUT  0x25,R30
                 ; 0000 0056 TCNT2=0x00;
0000d2 bde4      	OUT  0x24,R30
                 ; 0000 0057 OCR2=0x00;
0000d3 bde3      	OUT  0x23,R30
                 ; 0000 0058 
                 ; 0000 0059 // Timer(s)/Counter(s) Interrupt(s) initialization
                 ; 0000 005A TIMSK=(0<<OCIE2) | (0<<TOIE2) | (0<<TICIE1) | (0<<OCIE1A) | (0<<OCIE1B) | (1<<TOIE1) | (0<<TOIE0);
0000d4 e0e4      	LDI  R30,LOW(4)
0000d5 bfe9      	OUT  0x39,R30
                 ; 0000 005B 
                 ; 0000 005C // External Interrupt(s) initialization
                 ; 0000 005D // INT0: Off
                 ; 0000 005E // INT1: Off
                 ; 0000 005F MCUCR=(0<<ISC11) | (0<<ISC10) | (0<<ISC01) | (0<<ISC00);
0000d6 e0e0      	LDI  R30,LOW(0)
0000d7 bfe5      	OUT  0x35,R30
                 ; 0000 0060 
                 ; 0000 0061 // USART initialization
                 ; 0000 0062 // Communication Parameters: 8 Data, 1 Stop, No Parity
                 ; 0000 0063 // USART Receiver: On
                 ; 0000 0064 // USART Transmitter: On
                 ; 0000 0065 // USART Mode: Asynchronous
                 ; 0000 0066 // USART Baud Rate: 9600
                 ; 0000 0067 UCSRA=(0<<RXC) | (0<<TXC) | (0<<UDRE) | (0<<FE) | (0<<DOR) | (0<<UPE) | (0<<U2X) | (0<<MPCM);
0000d8 b9eb      	OUT  0xB,R30
                 ; 0000 0068 UCSRB=(0<<RXCIE) | (0<<TXCIE) | (0<<UDRIE) | (1<<RXEN) | (1<<TXEN) | (0<<UCSZ2) | (0<<RXB8) | (0<<TXB8);
0000d9 e1e8      	LDI  R30,LOW(24)
0000da b9ea      	OUT  0xA,R30
                 ; 0000 0069 UCSRC=(1<<URSEL) | (0<<UMSEL) | (0<<UPM1) | (0<<UPM0) | (0<<USBS) | (1<<UCSZ1) | (1<<UCSZ0) | (0<<UCPOL);
0000db e8e6      	LDI  R30,LOW(134)
0000dc bde0      	OUT  0x20,R30
                 ; 0000 006A UBRRH=0x00;
0000dd e0e0      	LDI  R30,LOW(0)
0000de bde0      	OUT  0x20,R30
                 ; 0000 006B UBRRL=0x47;
0000df e4e7      	LDI  R30,LOW(71)
0000e0 b9e9      	OUT  0x9,R30
                 ; 0000 006C 
                 ; 0000 006D // Analog Comparator initialization
                 ; 0000 006E // Analog Comparator: Off
                 ; 0000 006F // The Analog Comparator's positive input is
                 ; 0000 0070 // connected to the AIN0 pin
                 ; 0000 0071 // The Analog Comparator's negative input is
                 ; 0000 0072 // connected to the AIN1 pin
                 ; 0000 0073 ACSR=(1<<ACD) | (0<<ACBG) | (0<<ACO) | (0<<ACI) | (0<<ACIE) | (0<<ACIC) | (0<<ACIS1) | (0<<ACIS0);
0000e1 e8e0      	LDI  R30,LOW(128)
0000e2 b9e8      	OUT  0x8,R30
                 ; 0000 0074 SFIOR=(0<<ACME);
0000e3 e0e0      	LDI  R30,LOW(0)
0000e4 bfe0      	OUT  0x30,R30
                 ; 0000 0075 
                 ; 0000 0076 // ADC initialization
                 ; 0000 0077 // ADC disabled
                 ; 0000 0078 ADCSRA=(0<<ADEN) | (0<<ADSC) | (0<<ADFR) | (0<<ADIF) | (0<<ADIE) | (0<<ADPS2) | (0<<ADPS1) | (0<<ADPS0);
0000e5 b9e6      	OUT  0x6,R30
                 ; 0000 0079 
                 ; 0000 007A // SPI initialization
                 ; 0000 007B // SPI disabled
                 ; 0000 007C SPCR=(0<<SPIE) | (0<<SPE) | (0<<DORD) | (0<<MSTR) | (0<<CPOL) | (0<<CPHA) | (0<<SPR1) | (0<<SPR0);
0000e6 b9ed      	OUT  0xD,R30
                 ; 0000 007D 
                 ; 0000 007E // TWI initialization
                 ; 0000 007F // TWI disabled
                 ; 0000 0080 TWCR=(0<<TWEA) | (0<<TWSTA) | (0<<TWSTO) | (0<<TWEN) | (0<<TWIE);
0000e7 bfe6      	OUT  0x36,R30
                 ; 0000 0081 
                 ; 0000 0082 // Alphanumeric LCD initialization
                 ; 0000 0083 // Connections are specified in the
                 ; 0000 0084 // Project|Configure|C Compiler|Libraries|Alphanumeric LCD menu:
                 ; 0000 0085 // RS - PORTC Bit 0
                 ; 0000 0086 // RD - PORTC Bit 1
                 ; 0000 0087 // EN - PORTC Bit 6
                 ; 0000 0088 // D4 - PORTC Bit 2
                 ; 0000 0089 // D5 - PORTC Bit 3
                 ; 0000 008A // D6 - PORTC Bit 4
                 ; 0000 008B // D7 - PORTC Bit 5
                 ; 0000 008C // Characters/line: 8
                 ; 0000 008D lcd_init(8);
0000e8 e0a8      	LDI  R26,LOW(8)
0000e9 d0b4      	RCALL _lcd_init
                 ; 0000 008E 
                 ; 0000 008F // Global enable interrupts
                 ; 0000 0090 #asm("sei")
0000ea 9478      	sei
                 ; 0000 0091 lcd_putsf("***sim800c***");
                +
0000eb e4a0     +LDI R26 , LOW ( 2 * _0x0 + ( 0 ) )
0000ec e0b0     +LDI R27 , HIGH ( 2 * _0x0 + ( 0 ) )
                 	__POINTW2FN _0x0,0
0000ed d09f      	RCALL _lcd_putsf
                 ; 0000 0092 lcd_gotoxy(0,1);
0000ee e0e0      	LDI  R30,LOW(0)
0000ef 93ea      	ST   -Y,R30
0000f0 e0a1      	LDI  R26,LOW(1)
0000f1 d060      	RCALL _lcd_gotoxy
                 ; 0000 0093 lcd_putsf("www.Emtechnic.ir");
                +
0000f2 e4ae     +LDI R26 , LOW ( 2 * _0x0 + ( 14 ) )
0000f3 e0b0     +LDI R27 , HIGH ( 2 * _0x0 + ( 14 ) )
                 	__POINTW2FN _0x0,14
0000f4 d098      	RCALL _lcd_putsf
                 ; 0000 0094 delay_ms(1000);
0000f5 eea8      	LDI  R26,LOW(1000)
0000f6 e0b3      	LDI  R27,HIGH(1000)
0000f7 d259      	RCALL _delay_ms
                 ; 0000 0095 while (1)
                 _0x14:
                 ; 0000 0096       {
                 ; 0000 0097       // Place your code here
                 ; 0000 0098 
                 ; 0000 0099       lcd_clear();
0000f8 d066      	RCALL _lcd_clear
                 ; 0000 009A       delay_ms(500);
0000f9 efa4      	LDI  R26,LOW(500)
0000fa e0b1      	LDI  R27,HIGH(500)
0000fb d255      	RCALL _delay_ms
                 ; 0000 009B       lcd_puts("Hi");
                +
0000fc e6a0     +LDI R26 , LOW ( _0x17 + ( 0 ) )
0000fd e0b1     +LDI R27 , HIGH ( _0x17 + ( 0 ) )
                 	__POINTW2MN _0x17,0
0000fe d07f      	RCALL _lcd_puts
                 ; 0000 009C       delay_ms(2000);
0000ff eda0      	LDI  R26,LOW(2000)
000100 e0b7      	LDI  R27,HIGH(2000)
000101 d24f      	RCALL _delay_ms
                 ; 0000 009D 
                 ; 0000 009E       printf("AT");
                +
000102 e6e2     +LDI R30 , LOW ( 2 * _0x0 + ( 34 ) )
000103 e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 34 ) )
                 	__POINTW1FN _0x0,34
000104 93fa      	ST   -Y,R31
000105 93ea      	ST   -Y,R30
000106 e080      	LDI  R24,0
000107 d1e4      	RCALL _printf
000108 9622      	ADIW R28,2
                 ; 0000 009F       putchar(enter);
000109 e0ad      	LDI  R26,LOW(13)
00010a df91      	RCALL _putchar
                 ; 0000 00A0       //scanf("%s",datain);
                 ; 0000 00A1       lcd_puts(datain);
00010b e6a3      	LDI  R26,LOW(_datain)
00010c e0b1      	LDI  R27,HIGH(_datain)
00010d d070      	RCALL _lcd_puts
                 ; 0000 00A2 
                 ; 0000 00A3       /*
                 ; 0000 00A4             lcd_clear();
                 ; 0000 00A5             lcd_putsf("SEND SMS ...");
                 ; 0000 00A6             printf("AT");
                 ; 0000 00A7             putchar(enter);
                 ; 0000 00A8             delay_ms(1000);
                 ; 0000 00A9             lcd_gotoxy(0,0);
                 ; 0000 00AA             printf("AT+CMGF=1");
                 ; 0000 00AB             putchar(enter);
                 ; 0000 00AC             delay_ms(1000);
                 ; 0000 00AD             printf("AT+CMGS=\"09376921503\"");
                 ; 0000 00AE             putchar(enter);
                 ; 0000 00AF             delay_ms(1000);
                 ; 0000 00B0             printf ("SMS SEND TEST EmTechnic.ir* ");
                 ; 0000 00B1             putchar(ctrl_z);
                 ; 0000 00B2             delay_ms(500);
                 ; 0000 00B3             lcd_clear();
                 ; 0000 00B4             lcd_putsf("SMS Send SIM800");*/
                 ; 0000 00B5       }
00010e cfe9      	RJMP _0x14
                 ; 0000 00B6 }
                 _0x18:
00010f cfff      	RJMP _0x18
                 ; .FEND
                 
                 	.DSEG
                 _0x17:
000160           	.BYTE 0x3
                 
                 	.CSEG
                 _strlen:
                 ; .FSTART _strlen
000110 d205      	RCALL SUBOPT_0x2
000111 91a9          ld   r26,y+
000112 91b9          ld   r27,y+
000113 27ee          clr  r30
000114 27ff          clr  r31
                 strlen0:
000115 916d          ld   r22,x+
000116 2366          tst  r22
000117 f011          breq strlen1
000118 9631          adiw r30,1
000119 cffb          rjmp strlen0
                 strlen1:
00011a 9508          ret
                 ; .FEND
                 _strlenf:
                 ; .FSTART _strlenf
00011b d1fa      	RCALL SUBOPT_0x2
00011c 27aa          clr  r26
00011d 27bb          clr  r27
00011e 91e9          ld   r30,y+
00011f 91f9          ld   r31,y+
                 strlenf0:
000120 9005      	lpm  r0,z+
000121 2000          tst  r0
000122 f011          breq strlenf1
000123 9611          adiw r26,1
000124 cffb          rjmp strlenf0
                 strlenf1:
000125 01fd          movw r30,r26
000126 9508          ret
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.DSEG
                 
                 	.CSEG
                 __lcd_write_nibble_G101:
                 ; .FSTART __lcd_write_nibble_G101
000127 93aa      	ST   -Y,R26
000128 81e8      	LD   R30,Y
000129 71e0      	ANDI R30,LOW(0x10)
00012a f011      	BREQ _0x2020004
00012b 9aaa      	SBI  0x15,2
00012c c001      	RJMP _0x2020005
                 _0x2020004:
00012d 98aa      	CBI  0x15,2
                 _0x2020005:
00012e 81e8      	LD   R30,Y
00012f 72e0      	ANDI R30,LOW(0x20)
000130 f011      	BREQ _0x2020006
000131 9aab      	SBI  0x15,3
000132 c001      	RJMP _0x2020007
                 _0x2020006:
000133 98ab      	CBI  0x15,3
                 _0x2020007:
000134 81e8      	LD   R30,Y
000135 74e0      	ANDI R30,LOW(0x40)
000136 f011      	BREQ _0x2020008
000137 9aac      	SBI  0x15,4
000138 c001      	RJMP _0x2020009
                 _0x2020008:
000139 98ac      	CBI  0x15,4
                 _0x2020009:
00013a 81e8      	LD   R30,Y
00013b 78e0      	ANDI R30,LOW(0x80)
00013c f011      	BREQ _0x202000A
00013d 9aad      	SBI  0x15,5
00013e c001      	RJMP _0x202000B
                 _0x202000A:
00013f 98ad      	CBI  0x15,5
                 _0x202000B:
000140 d1d8      	RCALL SUBOPT_0x3
000141 9aa9      	SBI  0x15,1
000142 d1d6      	RCALL SUBOPT_0x3
000143 98a9      	CBI  0x15,1
000144 d1d4      	RCALL SUBOPT_0x3
000145 c081      	RJMP _0x2080002
                 ; .FEND
                 __lcd_write_data:
                 ; .FSTART __lcd_write_data
000146 93aa      	ST   -Y,R26
000147 81a8      	LD   R26,Y
000148 dfde      	RCALL __lcd_write_nibble_G101
000149 81e8          ld    r30,y
00014a 95e2          swap  r30
00014b 83e8          st    y,r30
00014c 81a8      	LD   R26,Y
00014d dfd9      	RCALL __lcd_write_nibble_G101
                +
00014e eb88     +LDI R24 , LOW ( 184 )
                +__DELAY_USB_LOOP :
00014f 958a     +DEC R24
000150 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 184
000151 c075      	RJMP _0x2080002
                 ; .FEND
                 _lcd_gotoxy:
                 ; .FSTART _lcd_gotoxy
000152 93aa      	ST   -Y,R26
000153 81e8      	LD   R30,Y
000154 e0f0      	LDI  R31,0
000155 55ef      	SUBI R30,LOW(-__base_y_G101)
000156 4ffe      	SBCI R31,HIGH(-__base_y_G101)
000157 81e0      	LD   R30,Z
000158 81a9      	LDD  R26,Y+1
000159 0fae      	ADD  R26,R30
00015a dfeb      	RCALL __lcd_write_data
00015b 80b9      	LDD  R11,Y+1
00015c 80a8      	LDD  R10,Y+0
00015d 9622      	ADIW R28,2
00015e 9508      	RET
                 ; .FEND
                 _lcd_clear:
                 ; .FSTART _lcd_clear
00015f e0a2      	LDI  R26,LOW(2)
000160 d1bc      	RCALL SUBOPT_0x4
000161 e0ac      	LDI  R26,LOW(12)
000162 dfe3      	RCALL __lcd_write_data
000163 e0a1      	LDI  R26,LOW(1)
000164 d1b8      	RCALL SUBOPT_0x4
000165 e0e0      	LDI  R30,LOW(0)
000166 2eae      	MOV  R10,R30
000167 2ebe      	MOV  R11,R30
000168 9508      	RET
                 ; .FEND
                 _lcd_putchar:
                 ; .FSTART _lcd_putchar
000169 93aa      	ST   -Y,R26
00016a 81a8      	LD   R26,Y
00016b 30aa      	CPI  R26,LOW(0xA)
00016c f011      	BREQ _0x2020011
00016d 14bd      	CP   R11,R13
00016e f048      	BRLO _0x2020010
                 _0x2020011:
00016f e0e0      	LDI  R30,LOW(0)
000170 93ea      	ST   -Y,R30
000171 94a3      	INC  R10
000172 2daa      	MOV  R26,R10
000173 dfde      	RCALL _lcd_gotoxy
000174 81a8      	LD   R26,Y
000175 30aa      	CPI  R26,LOW(0xA)
000176 f409      	BRNE _0x2020013
000177 c04f      	RJMP _0x2080002
                 _0x2020013:
                 _0x2020010:
000178 94b3      	INC  R11
000179 9aa8      	SBI  0x15,0
00017a 81a8      	LD   R26,Y
00017b dfca      	RCALL __lcd_write_data
00017c 98a8      	CBI  0x15,0
00017d c049      	RJMP _0x2080002
                 ; .FEND
                 _lcd_puts:
                 ; .FSTART _lcd_puts
00017e d197      	RCALL SUBOPT_0x2
00017f 931a      	ST   -Y,R17
                 _0x2020014:
000180 81a9      	LDD  R26,Y+1
000181 81ba      	LDD  R27,Y+1+1
000182 91ed      	LD   R30,X+
000183 83a9      	STD  Y+1,R26
000184 83ba      	STD  Y+1+1,R27
000185 2f1e      	MOV  R17,R30
000186 30e0      	CPI  R30,0
000187 f019      	BREQ _0x2020016
000188 2fa1      	MOV  R26,R17
000189 dfdf      	RCALL _lcd_putchar
00018a cff5      	RJMP _0x2020014
                 _0x2020016:
00018b 8118      	LDD  R17,Y+0
00018c c046      	RJMP _0x2080001
                 ; .FEND
                 _lcd_putsf:
                 ; .FSTART _lcd_putsf
00018d d188      	RCALL SUBOPT_0x2
00018e 931a      	ST   -Y,R17
                 _0x2020017:
00018f 81e9      	LDD  R30,Y+1
000190 81fa      	LDD  R31,Y+1+1
000191 9631      	ADIW R30,1
000192 83e9      	STD  Y+1,R30
000193 83fa      	STD  Y+1+1,R31
000194 9731      	SBIW R30,1
000195 91e4      	LPM  R30,Z
000196 2f1e      	MOV  R17,R30
000197 30e0      	CPI  R30,0
000198 f019      	BREQ _0x2020019
000199 2fa1      	MOV  R26,R17
00019a dfce      	RCALL _lcd_putchar
00019b cff3      	RJMP _0x2020017
                 _0x2020019:
00019c 8118      	LDD  R17,Y+0
00019d c035      	RJMP _0x2080001
                 ; .FEND
                 _lcd_init:
                 ; .FSTART _lcd_init
00019e 93aa      	ST   -Y,R26
00019f 9aa2      	SBI  0x14,2
0001a0 9aa3      	SBI  0x14,3
0001a1 9aa4      	SBI  0x14,4
0001a2 9aa5      	SBI  0x14,5
0001a3 9aa1      	SBI  0x14,1
0001a4 9aa0      	SBI  0x14,0
0001a5 9aa6      	SBI  0x14,6
0001a6 98a9      	CBI  0x15,1
0001a7 98a8      	CBI  0x15,0
0001a8 98ae      	CBI  0x15,6
0001a9 80d8      	LDD  R13,Y+0
0001aa 81e8      	LD   R30,Y
0001ab 58e0      	SUBI R30,-LOW(128)
                +
0001ac 93e0 01a3+STS __base_y_G101 + ( 2 ) , R30
                 	__PUTB1MN __base_y_G101,2
0001ae 81e8      	LD   R30,Y
0001af 54e0      	SUBI R30,-LOW(192)
                +
0001b0 93e0 01a4+STS __base_y_G101 + ( 3 ) , R30
                 	__PUTB1MN __base_y_G101,3
0001b2 e1a4      	LDI  R26,LOW(20)
0001b3 e0b0      	LDI  R27,0
0001b4 d19c      	RCALL _delay_ms
0001b5 d16b      	RCALL SUBOPT_0x5
0001b6 d16a      	RCALL SUBOPT_0x5
0001b7 d169      	RCALL SUBOPT_0x5
0001b8 e2a0      	LDI  R26,LOW(32)
0001b9 df6d      	RCALL __lcd_write_nibble_G101
                +
0001ba e184     +LDI R24 , LOW ( 276 )
0001bb e091     +LDI R25 , HIGH ( 276 )
                +__DELAY_USW_LOOP :
0001bc 9701     +SBIW R24 , 1
0001bd f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 276
0001be e2a8      	LDI  R26,LOW(40)
0001bf df86      	RCALL __lcd_write_data
0001c0 e0a4      	LDI  R26,LOW(4)
0001c1 df84      	RCALL __lcd_write_data
0001c2 e8a5      	LDI  R26,LOW(133)
0001c3 df82      	RCALL __lcd_write_data
0001c4 e0a6      	LDI  R26,LOW(6)
0001c5 df80      	RCALL __lcd_write_data
0001c6 df98      	RCALL _lcd_clear
                 _0x2080002:
0001c7 9621      	ADIW R28,1
0001c8 9508      	RET
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.CSEG
                 _put_usart_G102:
                 ; .FSTART _put_usart_G102
0001c9 d14c      	RCALL SUBOPT_0x2
0001ca 81aa      	LDD  R26,Y+2
0001cb ded0      	RCALL _putchar
0001cc 81a8      	LD   R26,Y
0001cd 81b9      	LDD  R27,Y+1
0001ce 91ed      	LD   R30,X+
0001cf 91fd      	LD   R31,X+
0001d0 9631      	ADIW R30,1
0001d1 93fe      	ST   -X,R31
0001d2 93ee      	ST   -X,R30
                 _0x2080001:
0001d3 9623      	ADIW R28,3
0001d4 9508      	RET
                 ; .FEND
                 __print_G102:
                 ; .FSTART __print_G102
0001d5 d140      	RCALL SUBOPT_0x2
0001d6 9726      	SBIW R28,6
0001d7 d193      	RCALL __SAVELOCR6
0001d8 e010      	LDI  R17,0
0001d9 85ac      	LDD  R26,Y+12
0001da 85bd      	LDD  R27,Y+12+1
0001db e0e0      	LDI  R30,LOW(0)
0001dc e0f0      	LDI  R31,HIGH(0)
0001dd 93ed      	ST   X+,R30
0001de 93fc      	ST   X,R31
                 _0x2040016:
0001df 89ea      	LDD  R30,Y+18
0001e0 89fb      	LDD  R31,Y+18+1
0001e1 9631      	ADIW R30,1
0001e2 8bea      	STD  Y+18,R30
0001e3 8bfb      	STD  Y+18+1,R31
0001e4 9731      	SBIW R30,1
0001e5 91e4      	LPM  R30,Z
0001e6 2f2e      	MOV  R18,R30
0001e7 30e0      	CPI  R30,0
0001e8 f409      	BRNE PC+2
0001e9 c0fc      	RJMP _0x2040018
0001ea 2fe1      	MOV  R30,R17
0001eb 30e0      	CPI  R30,0
0001ec f431      	BRNE _0x204001C
0001ed 3225      	CPI  R18,37
0001ee f411      	BRNE _0x204001D
0001ef e011      	LDI  R17,LOW(1)
0001f0 c001      	RJMP _0x204001E
                 _0x204001D:
0001f1 d136      	RCALL SUBOPT_0x6
                 _0x204001E:
0001f2 c0f2      	RJMP _0x204001B
                 _0x204001C:
0001f3 30e1      	CPI  R30,LOW(0x1)
0001f4 f4a1      	BRNE _0x204001F
0001f5 3225      	CPI  R18,37
0001f6 f411      	BRNE _0x2040020
0001f7 d130      	RCALL SUBOPT_0x6
0001f8 c0eb      	RJMP _0x20400CC
                 _0x2040020:
0001f9 e012      	LDI  R17,LOW(2)
0001fa e040      	LDI  R20,LOW(0)
0001fb e000      	LDI  R16,LOW(0)
0001fc 322d      	CPI  R18,45
0001fd f411      	BRNE _0x2040021
0001fe e001      	LDI  R16,LOW(1)
0001ff c0e5      	RJMP _0x204001B
                 _0x2040021:
000200 322b      	CPI  R18,43
000201 f411      	BRNE _0x2040022
000202 e24b      	LDI  R20,LOW(43)
000203 c0e1      	RJMP _0x204001B
                 _0x2040022:
000204 3220      	CPI  R18,32
000205 f411      	BRNE _0x2040023
000206 e240      	LDI  R20,LOW(32)
000207 c0dd      	RJMP _0x204001B
                 _0x2040023:
000208 c002      	RJMP _0x2040024
                 _0x204001F:
000209 30e2      	CPI  R30,LOW(0x2)
00020a f439      	BRNE _0x2040025
                 _0x2040024:
00020b e050      	LDI  R21,LOW(0)
00020c e013      	LDI  R17,LOW(3)
00020d 3320      	CPI  R18,48
00020e f411      	BRNE _0x2040026
00020f 6800      	ORI  R16,LOW(128)
000210 c0d4      	RJMP _0x204001B
                 _0x2040026:
000211 c003      	RJMP _0x2040027
                 _0x2040025:
000212 30e3      	CPI  R30,LOW(0x3)
000213 f009      	BREQ PC+2
000214 c0d0      	RJMP _0x204001B
                 _0x2040027:
000215 3320      	CPI  R18,48
000216 f010      	BRLO _0x204002A
000217 332a      	CPI  R18,58
000218 f008      	BRLO _0x204002B
                 _0x204002A:
000219 c007      	RJMP _0x2040029
                 _0x204002B:
00021a e0aa      	LDI  R26,LOW(10)
00021b 9f5a      	MUL  R21,R26
00021c 2d50      	MOV  R21,R0
00021d 2fe2      	MOV  R30,R18
00021e 53e0      	SUBI R30,LOW(48)
00021f 0f5e      	ADD  R21,R30
000220 c0c4      	RJMP _0x204001B
                 _0x2040029:
000221 2fe2      	MOV  R30,R18
000222 36e3      	CPI  R30,LOW(0x63)
000223 f439      	BRNE _0x204002F
000224 d10a      	RCALL SUBOPT_0x7
000225 d10c      	RCALL SUBOPT_0x8
000226 d108      	RCALL SUBOPT_0x7
000227 81a4      	LDD  R26,Z+4
000228 93aa      	ST   -Y,R26
000229 d10c      	RCALL SUBOPT_0x9
00022a c0b9      	RJMP _0x2040030
                 _0x204002F:
00022b 37e3      	CPI  R30,LOW(0x73)
00022c f429      	BRNE _0x2040032
00022d d10e      	RCALL SUBOPT_0xA
00022e d10f      	RCALL SUBOPT_0xB
00022f dee0      	RCALL _strlen
000230 2f1e      	MOV  R17,R30
000231 c007      	RJMP _0x2040033
                 _0x2040032:
000232 37e0      	CPI  R30,LOW(0x70)
000233 f449      	BRNE _0x2040035
000234 d107      	RCALL SUBOPT_0xA
000235 d108      	RCALL SUBOPT_0xB
000236 dee4      	RCALL _strlenf
000237 2f1e      	MOV  R17,R30
000238 6008      	ORI  R16,LOW(8)
                 _0x2040033:
000239 6002      	ORI  R16,LOW(2)
00023a 770f      	ANDI R16,LOW(127)
00023b e030      	LDI  R19,LOW(0)
00023c c02d      	RJMP _0x2040036
                 _0x2040035:
00023d 36e4      	CPI  R30,LOW(0x64)
00023e f011      	BREQ _0x2040039
00023f 36e9      	CPI  R30,LOW(0x69)
000240 f411      	BRNE _0x204003A
                 _0x2040039:
000241 6004      	ORI  R16,LOW(4)
000242 c002      	RJMP _0x204003B
                 _0x204003A:
000243 37e5      	CPI  R30,LOW(0x75)
000244 f429      	BRNE _0x204003C
                 _0x204003B:
000245 e2e6      	LDI  R30,LOW(_tbl10_G102*2)
000246 e0f0      	LDI  R31,HIGH(_tbl10_G102*2)
000247 d0ff      	RCALL SUBOPT_0xC
000248 e015      	LDI  R17,LOW(5)
000249 c00b      	RJMP _0x204003D
                 _0x204003C:
00024a 35e8      	CPI  R30,LOW(0x58)
00024b f411      	BRNE _0x204003F
00024c 6008      	ORI  R16,LOW(8)
00024d c003      	RJMP _0x2040040
                 _0x204003F:
00024e 37e8      	CPI  R30,LOW(0x78)
00024f f009      	BREQ PC+2
000250 c093      	RJMP _0x2040071
                 _0x2040040:
000251 e3e0      	LDI  R30,LOW(_tbl16_G102*2)
000252 e0f0      	LDI  R31,HIGH(_tbl16_G102*2)
000253 d0f3      	RCALL SUBOPT_0xC
000254 e014      	LDI  R17,LOW(4)
                 _0x204003D:
000255 ff02      	SBRS R16,2
000256 c011      	RJMP _0x2040042
000257 d0e4      	RCALL SUBOPT_0xA
000258 d0f1      	RCALL SUBOPT_0xD
000259 85ab      	LDD  R26,Y+11
00025a 23aa      	TST  R26
00025b f432      	BRPL _0x2040043
00025c 85ea      	LDD  R30,Y+10
00025d 85fb      	LDD  R31,Y+10+1
00025e d100      	RCALL __ANEGW1
00025f 87ea      	STD  Y+10,R30
000260 87fb      	STD  Y+10+1,R31
000261 e24d      	LDI  R20,LOW(45)
                 _0x2040043:
000262 3040      	CPI  R20,0
000263 f011      	BREQ _0x2040044
000264 5f1f      	SUBI R17,-LOW(1)
000265 c001      	RJMP _0x2040045
                 _0x2040044:
000266 7f0b      	ANDI R16,LOW(251)
                 _0x2040045:
000267 c002      	RJMP _0x2040046
                 _0x2040042:
000268 d0d3      	RCALL SUBOPT_0xA
000269 d0e0      	RCALL SUBOPT_0xD
                 _0x2040046:
                 _0x2040036:
00026a fd00      	SBRC R16,0
00026b c010      	RJMP _0x2040047
                 _0x2040048:
00026c 1715      	CP   R17,R21
00026d f470      	BRSH _0x204004A
00026e ff07      	SBRS R16,7
00026f c008      	RJMP _0x204004B
000270 ff02      	SBRS R16,2
000271 c004      	RJMP _0x204004C
000272 7f0b      	ANDI R16,LOW(251)
000273 2f24      	MOV  R18,R20
000274 5011      	SUBI R17,LOW(1)
000275 c001      	RJMP _0x204004D
                 _0x204004C:
000276 e320      	LDI  R18,LOW(48)
                 _0x204004D:
000277 c001      	RJMP _0x204004E
                 _0x204004B:
000278 e220      	LDI  R18,LOW(32)
                 _0x204004E:
000279 d0ae      	RCALL SUBOPT_0x6
00027a 5051      	SUBI R21,LOW(1)
00027b cff0      	RJMP _0x2040048
                 _0x204004A:
                 _0x2040047:
00027c 2f31      	MOV  R19,R17
00027d ff01      	SBRS R16,1
00027e c015      	RJMP _0x204004F
                 _0x2040050:
00027f 3030      	CPI  R19,0
000280 f091      	BREQ _0x2040052
000281 ff03      	SBRS R16,3
000282 c005      	RJMP _0x2040053
000283 81ee      	LDD  R30,Y+6
000284 81ff      	LDD  R31,Y+6+1
000285 9125      	LPM  R18,Z+
000286 d0c0      	RCALL SUBOPT_0xC
000287 c005      	RJMP _0x2040054
                 _0x2040053:
000288 81ae      	LDD  R26,Y+6
000289 81bf      	LDD  R27,Y+6+1
00028a 912d      	LD   R18,X+
00028b 83ae      	STD  Y+6,R26
00028c 83bf      	STD  Y+6+1,R27
                 _0x2040054:
00028d d09a      	RCALL SUBOPT_0x6
00028e 3050      	CPI  R21,0
00028f f009      	BREQ _0x2040055
000290 5051      	SUBI R21,LOW(1)
                 _0x2040055:
000291 5031      	SUBI R19,LOW(1)
000292 cfec      	RJMP _0x2040050
                 _0x2040052:
000293 c047      	RJMP _0x2040056
                 _0x204004F:
                 _0x2040058:
000294 e320      	LDI  R18,LOW(48)
000295 81ee      	LDD  R30,Y+6
000296 81ff      	LDD  R31,Y+6+1
000297 d0cf      	RCALL __GETW1PF
000298 87e8      	STD  Y+8,R30
000299 87f9      	STD  Y+8+1,R31
00029a 81ee      	LDD  R30,Y+6
00029b 81ff      	LDD  R31,Y+6+1
00029c 9632      	ADIW R30,2
00029d d0a9      	RCALL SUBOPT_0xC
                 _0x204005A:
00029e 85e8      	LDD  R30,Y+8
00029f 85f9      	LDD  R31,Y+8+1
0002a0 85aa      	LDD  R26,Y+10
0002a1 85bb      	LDD  R27,Y+10+1
0002a2 17ae      	CP   R26,R30
0002a3 07bf      	CPC  R27,R31
0002a4 f050      	BRLO _0x204005C
0002a5 5f2f      	SUBI R18,-LOW(1)
0002a6 85a8      	LDD  R26,Y+8
0002a7 85b9      	LDD  R27,Y+8+1
0002a8 85ea      	LDD  R30,Y+10
0002a9 85fb      	LDD  R31,Y+10+1
0002aa 1bea      	SUB  R30,R26
0002ab 0bfb      	SBC  R31,R27
0002ac 87ea      	STD  Y+10,R30
0002ad 87fb      	STD  Y+10+1,R31
0002ae cfef      	RJMP _0x204005A
                 _0x204005C:
0002af 332a      	CPI  R18,58
0002b0 f028      	BRLO _0x204005D
0002b1 ff03      	SBRS R16,3
0002b2 c002      	RJMP _0x204005E
0002b3 5f29      	SUBI R18,-LOW(7)
0002b4 c001      	RJMP _0x204005F
                 _0x204005E:
0002b5 5d29      	SUBI R18,-LOW(39)
                 _0x204005F:
                 _0x204005D:
0002b6 fd04      	SBRC R16,4
0002b7 c019      	RJMP _0x2040061
0002b8 3321      	CPI  R18,49
0002b9 f420      	BRSH _0x2040063
0002ba 85a8      	LDD  R26,Y+8
0002bb 85b9      	LDD  R27,Y+8+1
0002bc 9711      	SBIW R26,1
0002bd f409      	BRNE _0x2040062
                 _0x2040063:
0002be c009      	RJMP _0x20400CD
                 _0x2040062:
0002bf 1753      	CP   R21,R19
0002c0 f010      	BRLO _0x2040067
0002c1 ff00      	SBRS R16,0
0002c2 c001      	RJMP _0x2040068
                 _0x2040067:
0002c3 c011      	RJMP _0x2040066
                 _0x2040068:
0002c4 e220      	LDI  R18,LOW(32)
0002c5 ff07      	SBRS R16,7
0002c6 c00a      	RJMP _0x2040069
0002c7 e320      	LDI  R18,LOW(48)
                 _0x20400CD:
0002c8 6100      	ORI  R16,LOW(16)
0002c9 ff02      	SBRS R16,2
0002ca c006      	RJMP _0x204006A
0002cb 7f0b      	ANDI R16,LOW(251)
0002cc 934a      	ST   -Y,R20
0002cd d068      	RCALL SUBOPT_0x9
0002ce 3050      	CPI  R21,0
0002cf f009      	BREQ _0x204006B
0002d0 5051      	SUBI R21,LOW(1)
                 _0x204006B:
                 _0x204006A:
                 _0x2040069:
                 _0x2040061:
0002d1 d056      	RCALL SUBOPT_0x6
0002d2 3050      	CPI  R21,0
0002d3 f009      	BREQ _0x204006C
0002d4 5051      	SUBI R21,LOW(1)
                 _0x204006C:
                 _0x2040066:
0002d5 5031      	SUBI R19,LOW(1)
0002d6 85a8      	LDD  R26,Y+8
0002d7 85b9      	LDD  R27,Y+8+1
0002d8 9712      	SBIW R26,2
0002d9 f008      	BRLO _0x2040059
0002da cfb9      	RJMP _0x2040058
                 _0x2040059:
                 _0x2040056:
0002db ff00      	SBRS R16,0
0002dc c007      	RJMP _0x204006D
                 _0x204006E:
0002dd 3050      	CPI  R21,0
0002de f029      	BREQ _0x2040070
0002df 5051      	SUBI R21,LOW(1)
0002e0 e2e0      	LDI  R30,LOW(32)
0002e1 93ea      	ST   -Y,R30
0002e2 d053      	RCALL SUBOPT_0x9
0002e3 cff9      	RJMP _0x204006E
                 _0x2040070:
                 _0x204006D:
                 _0x2040071:
                 _0x2040030:
                 _0x20400CC:
0002e4 e010      	LDI  R17,LOW(0)
                 _0x204001B:
0002e5 cef9      	RJMP _0x2040016
                 _0x2040018:
0002e6 85ac      	LDD  R26,Y+12
0002e7 85bd      	LDD  R27,Y+12+1
0002e8 d07a      	RCALL __GETW1P
0002e9 d088      	RCALL __LOADLOCR6
0002ea 9664      	ADIW R28,20
0002eb 9508      	RET
                 ; .FEND
                 _printf:
                 ; .FSTART _printf
0002ec 92ff      	PUSH R15
0002ed 2ef8      	MOV  R15,R24
0002ee 9726      	SBIW R28,6
0002ef d07f      	RCALL __SAVELOCR2
0002f0 01de      	MOVW R26,R28
0002f1 9614      	ADIW R26,4
0002f2 d068      	RCALL __ADDW2R15
0002f3 018d      	MOVW R16,R26
0002f4 e0e0      	LDI  R30,LOW(0)
0002f5 83ec      	STD  Y+4,R30
0002f6 83ed      	STD  Y+4+1,R30
0002f7 83ee      	STD  Y+6,R30
0002f8 83ef      	STD  Y+6+1,R30
0002f9 01de      	MOVW R26,R28
0002fa 9618      	ADIW R26,8
0002fb d05f      	RCALL __ADDW2R15
0002fc d066      	RCALL __GETW1P
0002fd 93fa      	ST   -Y,R31
0002fe 93ea      	ST   -Y,R30
0002ff 931a      	ST   -Y,R17
000300 930a      	ST   -Y,R16
000301 ece9      	LDI  R30,LOW(_put_usart_G102)
000302 e0f1      	LDI  R31,HIGH(_put_usart_G102)
000303 93fa      	ST   -Y,R31
000304 93ea      	ST   -Y,R30
000305 01de      	MOVW R26,R28
000306 9618      	ADIW R26,8
000307 decd      	RCALL __print_G102
000308 d06d      	RCALL __LOADLOCR2
000309 9628      	ADIW R28,8
00030a 90ff      	POP  R15
00030b 9508      	RET
                 ; .FEND
                 
                 	.CSEG
                 
                 	.DSEG
                 _datain:
000163           	.BYTE 0x1E
                 _rx_buffer:
000181           	.BYTE 0x10
                 _tx_buffer:
000191           	.BYTE 0x10
                 __base_y_G101:
0001a1           	.BYTE 0x4
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x0:
00030c 93ea      	ST   -Y,R30
00030d 93fa      	ST   -Y,R31
00030e b7ef      	IN   R30,SREG
00030f 93ea      	ST   -Y,R30
000310 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x1:
000311 e5e7      	LDI  R30,LOW(87)
000312 bded      	OUT  0x2D,R30
000313 e4e0      	LDI  R30,LOW(64)
000314 bdec      	OUT  0x2C,R30
000315 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x2:
000316 93ba      	ST   -Y,R27
000317 93aa      	ST   -Y,R26
000318 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x3:
                +
000319 e182     +LDI R24 , LOW ( 18 )
                +__DELAY_USB_LOOP :
00031a 958a     +DEC R24
00031b f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 18
00031c 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x4:
00031d de28      	RCALL __lcd_write_data
00031e e0a3      	LDI  R26,LOW(3)
00031f e0b0      	LDI  R27,0
000320 c030      	RJMP _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:8 WORDS
                 SUBOPT_0x5:
000321 e3a0      	LDI  R26,LOW(48)
000322 de04      	RCALL __lcd_write_nibble_G101
                +
000323 e184     +LDI R24 , LOW ( 276 )
000324 e091     +LDI R25 , HIGH ( 276 )
                +__DELAY_USW_LOOP :
000325 9701     +SBIW R24 , 1
000326 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 276
000327 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:18 WORDS
                 SUBOPT_0x6:
000328 932a      	ST   -Y,R18
000329 85ad      	LDD  R26,Y+13
00032a 85be      	LDD  R27,Y+13+1
00032b 85ef      	LDD  R30,Y+15
00032c 89f8      	LDD  R31,Y+15+1
00032d 9509      	ICALL
00032e 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x7:
00032f 89e8      	LDD  R30,Y+16
000330 89f9      	LDD  R31,Y+16+1
000331 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x8:
000332 9734      	SBIW R30,4
000333 8be8      	STD  Y+16,R30
000334 8bf9      	STD  Y+16+1,R31
000335 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x9:
000336 85ad      	LDD  R26,Y+13
000337 85be      	LDD  R27,Y+13+1
000338 85ef      	LDD  R30,Y+15
000339 89f8      	LDD  R31,Y+15+1
00033a 9509      	ICALL
00033b 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0xA:
00033c dff2      	RCALL SUBOPT_0x7
00033d cff4      	RJMP SUBOPT_0x8
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0xB:
00033e 89a8      	LDD  R26,Y+16
00033f 89b9      	LDD  R27,Y+16+1
000340 9614      	ADIW R26,4
000341 d021      	RCALL __GETW1P
000342 83ee      	STD  Y+6,R30
000343 83ff      	STD  Y+6+1,R31
000344 81ae      	LDD  R26,Y+6
000345 81bf      	LDD  R27,Y+6+1
000346 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0xC:
000347 83ee      	STD  Y+6,R30
000348 83ff      	STD  Y+6+1,R31
000349 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0xD:
00034a 89a8      	LDD  R26,Y+16
00034b 89b9      	LDD  R27,Y+16+1
00034c 9614      	ADIW R26,4
00034d d015      	RCALL __GETW1P
00034e 87ea      	STD  Y+10,R30
00034f 87fb      	STD  Y+10+1,R31
000350 9508      	RET
                 
                 
                 	.CSEG
                 _delay_ms:
000351 9610      	adiw r26,0
000352 f039      	breq __delay_ms1
                 __delay_ms0:
                +
000353 ec8d     +LDI R24 , LOW ( 0xACD )
000354 e09a     +LDI R25 , HIGH ( 0xACD )
                +__DELAY_USW_LOOP :
000355 9701     +SBIW R24 , 1
000356 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0xACD
000357 95a8      	wdr
000358 9711      	sbiw r26,1
000359 f7c9      	brne __delay_ms0
                 __delay_ms1:
00035a 9508      	ret
                 
                 __ADDW2R15:
00035b 2400      	CLR  R0
00035c 0daf      	ADD  R26,R15
00035d 1db0      	ADC  R27,R0
00035e 9508      	RET
                 
                 __ANEGW1:
00035f 95f1      	NEG  R31
000360 95e1      	NEG  R30
000361 40f0      	SBCI R31,0
000362 9508      	RET
                 
                 __GETW1P:
000363 91ed      	LD   R30,X+
000364 91fc      	LD   R31,X
000365 9711      	SBIW R26,1
000366 9508      	RET
                 
                 __GETW1PF:
000367 9005      	LPM  R0,Z+
000368 91f4      	LPM  R31,Z
000369 2de0      	MOV  R30,R0
00036a 9508      	RET
                 
                 __SAVELOCR6:
00036b 935a      	ST   -Y,R21
                 __SAVELOCR5:
00036c 934a      	ST   -Y,R20
                 __SAVELOCR4:
00036d 933a      	ST   -Y,R19
                 __SAVELOCR3:
00036e 932a      	ST   -Y,R18
                 __SAVELOCR2:
00036f 931a      	ST   -Y,R17
000370 930a      	ST   -Y,R16
000371 9508      	RET
                 
                 __LOADLOCR6:
000372 815d      	LDD  R21,Y+5
                 __LOADLOCR5:
000373 814c      	LDD  R20,Y+4
                 __LOADLOCR4:
000374 813b      	LDD  R19,Y+3
                 __LOADLOCR3:
000375 812a      	LDD  R18,Y+2
                 __LOADLOCR2:
000376 8119      	LDD  R17,Y+1
000377 8108      	LD   R16,Y
000378 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega8A register use summary:
r0 :  11 r1 :   1 r2 :   1 r3 :   0 r4 :   0 r5 :   4 r6 :   4 r7 :   3 
r8 :   5 r9 :   4 r10:   4 r11:   4 r12:   0 r13:   2 r14:   0 r15:   4 
r16:  31 r17:  28 r18:  27 r19:   8 r20:   9 r21:  17 r22:   4 r23:   0 
r24:  19 r25:   5 r26:  89 r27:  33 r28:  12 r29:   1 r30: 203 r31:  52 
x  :  14 y  : 150 z  :  18 
Registers used: 30 out of 35 (85.7%)

ATmega8A instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :   1 add   :   3 
adiw  :  18 and   :   0 andi  :   9 asr   :   0 bclr  :   0 bld   :   1 
brbc  :   0 brbs  :   0 brcc  :   0 brcs  :   0 break :   0 breq  :  22 
brge  :   0 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   7 
brlt  :   0 brmi  :   0 brne  :  33 brpl  :   1 brsh  :   2 brtc  :   0 
brts  :   0 brvc  :   0 brvs  :   0 bset  :   0 bst   :   0 cbi   :   9 
cbr   :   0 clc   :   0 clh   :   0 cli   :   2 cln   :   0 clr   :  11 
cls   :   0 clt   :   0 clv   :   0 clz   :   0 com   :   0 cp    :   9 
cpc   :   1 cpi   :  33 cpse  :   0 dec   :   4 des   :   0 eor   :   0 
fmul  :   0 fmuls :   0 fmulsu:   0 icall :   2 ijmp  :   0 in    :   3 
inc   :   7 ld    :  36 ldd   :  63 ldi   : 111 lds   :   0 lpm   :  16 
lsl   :   0 lsr   :   0 mov   :  22 movw  :   8 mul   :   1 muls  :   0 
mulsu :   0 neg   :   2 nop   :   0 or    :   0 ori   :   6 out   :  43 
pop   :   1 push  :   1 rcall :  88 ret   :  27 reti  :   2 rjmp  :  90 
rol   :   0 ror   :   0 sbc   :   1 sbci  :   5 sbi   :  13 sbic  :   1 
sbis  :   0 sbiw  :  15 sbr   :   0 sbrc  :   2 sbrs  :  10 sec   :   0 
seh   :   0 sei   :   2 sen   :   0 ser   :   0 ses   :   0 set   :   1 
sev   :   0 sez   :   0 sleep :   0 spm   :   0 st    :  43 std   :  27 
sts   :   2 sub   :   1 subi  :  19 swap  :   1 tst   :   5 wdr   :   1 

Instructions used: 53 out of 114 (46.5%)

ATmega8A memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x0006f2   1686     92   1778    8192  21.7%
[.dseg] 0x000060 0x0001a5      0     69     69    1024   6.7%
[.eseg] 0x000000 0x000000      0      0      0     512   0.0%

Assembly complete, 0 errors, 10 warnings
