#include <tm1637.h>
#include <delay.h>
#include <string.h>


extern unsigned char _point=0; 
extern unsigned int _scrolldelay=300; //ms 
extern unsigned char _brightness=7; //0 ~ 7 >>>  0=off  >>  7=max light
extern flash char Table_7s[42]= {
//  XGFEDCBA
 0B00111111                                             //0
,0B00000110                                             //1
,0B01011011                                             //2
,0B01001111                                             //3
,0B01100110                                             //4
,0B01101101                                             //5
,0B01111101                                             //6
,0B00000111                                             //7
,0B01111111                                             //8
,0B01101111                                             //9
,0B01110111                                             //A    10
,0B01111100                                             //b    11
,0B00111001                                             //C    12
,0B01011110                                             //D    13
,0B01111001                                             //E    14
,0B01110001                                             //F    15
,0B00111101                                             //G    16
,0B01110110                                             //H    17
,0B00110000                                             //I    18
,0B00001110                                             //J    19
,0B00111000                                             //L    20
,0B01010100                                             //n    21
,0B01011100                                             //o    22
,0B01110011                                             //P    23
,0B01010000                                             //r    24
,0B00011100                                             //u    25
,0B01111000                                             //t    26
,0B00111110                                             //U    27
,0B00000000                                             //off  28 space
,0B01000000                                             //-    29
,0B00001000                                             //_    30
,0B00001111                                             //]    31
,0B00111001                                             //[    32
,0B01111011                                             //e    33
,0B01011111                                             //a    34
,0B01100111                                             //q    35
,0B01011000                                             //c    36
,0B01101110                                             //y    37
,0B01100011                                             //*    38  Degree
,0B00110000                                             //l    39
,0B01110100                                             //h    40
,0B00010000                                             //i    41
};

unsigned char Tm1637_table_str(unsigned char ch)
{
unsigned char h;
switch (ch) {   
         case '0' : h = 0; break;
         case '1' : h = 1;break;
         case '2' : h = 2;break;
         case '3' : h = 3;break;
         case '4' : h = 4;break;
         case '5' : h = 5;break;
         case '6' : h = 6;break;
         case '7' : h = 7;break;
         case '8' : h = 8;break;
         case '9' : h = 9;break;
         case 'A' : h = 10;break;
         case 'a' : h = 34;break;
         case 'B' : h = 11;break;
         case 'b' : h = 11;break;
         case 'C' : h = 12;break;
         case 'c' : h = 36;break;
         case 'D' : h = 13;break;
         case 'd' : h = 13;break;
         case 'E' : h = 14;break;
         case 'F' : h = 15;break;
         case 'G' : h = 16;break;
         case 'H' : h = 17;break;
         case 'I' : h = 18;break;
         case 'J' : h = 19;break;
         case 'L' : h = 20;break;
         case 'U' : h = 27;break;
         case 'S' : h = 5;break;
         case 'y' : h = 37;break;
         case 'Y' : h = 37;break;
         case 'n' : h = 21;break;
         case 'O' : h = 0;break;
         case 'o' : h = 22;break;
         case 'p' : h = 23;break;
         case 'q' : h = 35;break;
         case 'r' : h = 24;break;
         case 't' : h = 26;break;
         case 'u' : h = 25;break;
         case 'e' : h = 33;break;
         case ' ' : h = 28;break;
         case '-' : h = 29;break;
         case '_' : h = 30;break;
         case ']' : h = 31;break;
         case '[' : h = 32;break;
         case '*' : h = 38;break; 
         case 'l' : h = 39;break;   
         case 'h' : h = 40;break; 
	 case 'i' : h = 41;break;    
         default:h = 28;
    };
return h;
}



void tm1637_init(void) 
{
unsigned char b;
b= _brightness & 0x07;
if (b)
{
b = b | 0x08;
}
b += 0x80;
#asm(" SBI __tm1637_port-1,__clk_bit ")
#asm(" SBI __tm1637_port-1,__dio_bit ")
tm1637_display_all(0,0,0,0);
I2CStart();
I2CWrByte(b);
I2CStop();
}

void tm1637_point(unsigned char point)
{
_point=point & 0x01;
}

void tm1637_brightness(unsigned char brightness)
{
_brightness=brightness;
}

void tm1637_scrolldelay(unsigned int scrolldelay)
{
_scrolldelay=scrolldelay;
}

void tm1637_display_all(char d1,char d2,char d3,char d4)
{
d1=Table_7s[d1];
d2=Table_7s[d2];
d3=Table_7s[d3];
d4=Table_7s[d4];

if(_point) d2 |= 0x80;                   //  'COLON_ON :

I2CStart();
I2CWrByte(ADDR_AUTO);I2Cack();   
I2CStop();

I2CStart();
I2CWrByte(STARTADDR);I2Cack();
I2CWrByte(d1);I2Cack();
I2CWrByte(d2);I2Cack();
I2CWrByte(d3);I2Cack();
I2CWrByte(d4);I2Cack();
I2CStop();
}

void tm1637_display(char addr,char data)
{
if(addr>=1 || addr <=4){

data=Table_7s[data];
if(_point) data |= 0x80;                   //  'COLON_ON :
addr-=1;
I2CStart();
I2CWrByte(ADDR_FIXED);I2Cack();   
I2CStop();

I2CStart();
I2CWrByte(addr|STARTADDR);I2Cack();
I2CWrByte(data);I2Cack();
I2CStop();
}
}

void tm1637_num(unsigned int num)
{
if(num<=9999){
unsigned int b;
unsigned char d1;
unsigned char d2;
unsigned char d3;
unsigned char d4;
b = num / 1000 ; d1 = b % 10 ;
b = num / 100 ; d2 = b % 10 ;
b = num / 10 ; d3 = b % 10 ;
d4 = num % 10;

tm1637_display_all(d1,d2,d3,d4);
}
}

void tm1637_puts(char *str)
{
char i=0;
char d[4];
for (i=0 ; i <= 4 ;i ++)
{
d[i]=Tm1637_table_str(str[i]);
};
tm1637_display_all(d[0],d[1],d[2],d[3]);
}

void tm1637_putsf(char flash *str)
{
char i=0;
char d[4];
for (i=0 ; i <= 4 ;i ++)
{
d[i]=Tm1637_table_str(str[i]);
};
tm1637_display_all(d[0],d[1],d[2],d[3]);
}

void tm1637_scroll(char *str)
{
char i=0;
char j=0;
char d[4];
for (i=0 ; i <= strlen(str) ;i ++)
{
for (j=0 ; j <= 3 ;j ++)
{
d[j]=Tm1637_table_str(str[j+i]);
}
tm1637_display_all(d[0],d[1],d[2],d[3]);
delay_ms(_scrolldelay);
}
}

//unsigned char ScanKey (void) // read buttons \
//{
//   unsigned char rekey, i;
//   I2CStart ();
//   I2CWrByte (0x42); // read command buttons
//   I2Cack ();
//   dio = 1; // read keys before data lines pulled
//   for (i = 0; i<8 ; i++) // start reading from the low
//   {
//      clk = 0;
//      rekey = rekey >> 1;
//      delay_us(30);
//      clk=1;
//      if(dio)
//      {
//          rekey=rekey|0x80;
//      }
//      else
//      {
//          rekey=rekey|0x00;
//      }
//      delay_us(30);
//   };
//   I2Cack();
//   I2CStop();
//   return (rekey);
//}

void I2CStart(void) 
{
#asm(" SBI __tm1637_port,__clk_bit ")  
#asm(" SBI __tm1637_port,__dio_bit ") 
delay_us(2);
#asm(" CBI __tm1637_port,__dio_bit ") 
}
///=============================================
void I2Cack(void) 
{
#asm(" CBI __tm1637_port,__clk_bit ")
#asm(" CBI __tm1637_port,__dio_bit ") 
#asm(" SBI __tm1637_port,__clk_bit ") 
   delay_us(2);
#asm(" CBI __tm1637_port,__clk_bit ")
}
//===============================================
void I2CStop(void)
{
#asm(" CBI __tm1637_port,__clk_bit ")
delay_us(2);
#asm(" CBI __tm1637_port,__dio_bit ") 
delay_us(2);
#asm(" SBI __tm1637_port,__clk_bit ") 
delay_us(2);
#asm(" SBI __tm1637_port,__dio_bit ")
}
///=========================================
void I2CWrByte(unsigned char oneByte)
{
unsigned char i;
for(i=0;i<8;i++)
{ 
#asm(" CBI __tm1637_port,__clk_bit ")
if(oneByte&0x01) 
{
#asm(" SBI __tm1637_port,__dio_bit ")
}
else
{
#asm(" CBI __tm1637_port,__dio_bit ") 
}
delay_us(3);
oneByte=oneByte>>1;
#asm(" SBI __tm1637_port,__clk_bit ") 
delay_us(3);
}
}