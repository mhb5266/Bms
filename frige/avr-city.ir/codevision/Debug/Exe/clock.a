;#include <mega16.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x40
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0xB0
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0xA0
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0xB0
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <tm1637.h>
;
;#asm
;PCODE: $0000000D VOL: 0
 .equ __tm1637_port=0X1b; //PORTA
;PCODE: $0000000E VOL: 0
 .equ __clk_bit=0;
;PCODE: $0000000F VOL: 0
 .equ __dio_bit=1;
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
; 0000 0008 #endasm
;//PORTD=0x12;
;//PORTC=0x15;
;//PORTB=0x18;
;//PORTA=0x1b;
;_Bool Update_Time=0;
;_Bool ClockPoint=0;
;signed char second=0,minute=0,hour=0;
;flash unsigned char s1[]={"duno"};
;unsigned char s2[]={"duno"};

	.DSEG
;void main(void)
; 0000 0013 {

	.CSEG
;PCODE: $00000012 VOL: 0
; 0000 0014 ASSR=0x08;
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
; 0000 0015 TCCR2=0x05;
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
; 0000 0016 TCNT2=0x00;
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
; 0000 0017 OCR2=0x00;
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
; 0000 0018 TIMSK=0x40;
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
; 0000 0019 #asm("sei")
;PCODE: $0000001D VOL: 0
	sei
;PCODE: $0000001E VOL: 0
; 0000 001A 
; 0000 001B tm1637_init();
;PCODE: $0000001F VOL: 0
; 0000 001C tm1637_putsf(s1);
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
; 0000 001D tm1637_puts(s2);
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
; 0000 001E tm1637_putsf("duno");
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
; 0000 001F tm1637_puts("duno");
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
; 0000 0020 while (1)
;PCODE: $0000002A VOL: 0
; 0000 0021       {
; 0000 0022         if(Update_Time)
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
; 0000 0023         {
; 0000 0024         Update_Time =0;
;PCODE: $0000002D VOL: 0
; 0000 0025             if(ClockPoint)
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
; 0000 0026             {
; 0000 0027             tm1637_point(POINT_ON);
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
; 0000 0028             }else
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
; 0000 0029             {
; 0000 002A             tm1637_point(POINT_OFF);
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
; 0000 002B             };
;PCODE: $00000036 VOL: 0
; 0000 002C         tm1637_display_all(hour/10,hour%10,minute/10,minute%10);
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
; 0000 002D         }
; 0000 002E       }
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
; 0000 002F }
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0

	.DSEG
_0x4:
	.BYTE 0x5
;//*************************************************************************
;interrupt [TIM2_OVF] void timer2_ovf_isr(void)
; 0000 0032 {

	.CSEG
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
; 0000 0033 Update_Time =1;
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
; 0000 0034 ClockPoint =~ClockPoint;
;PCODE: $00000056 VOL: 0
; 0000 0035 second++;
;PCODE: $00000057 VOL: 0
; 0000 0036     if (second > 59)
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
; 0000 0037     {
; 0000 0038     second=0;
;PCODE: $0000005B VOL: 0
; 0000 0039     minute++;
;PCODE: $0000005C VOL: 0
; 0000 003A             if (minute>59)
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
; 0000 003B             {
; 0000 003C             minute=0;
;PCODE: $00000060 VOL: 0
; 0000 003D             hour++;
;PCODE: $00000061 VOL: 0
; 0000 003E                     if(hour>23)
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
; 0000 003F                     {
; 0000 0040                     hour=0;
;PCODE: $00000065 VOL: 0
; 0000 0041                     }
; 0000 0042             }
;PCODE: $00000066 VOL: 0
; 0000 0043     }
;PCODE: $00000067 VOL: 0
; 0000 0044 }
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
