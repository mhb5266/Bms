;/*******************************************************
;This program was created by the
;CodeWizardAVR V3.12 Advanced
;Automatic Program Generator
;© Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
;http://www.hpinfotech.com
;
;Project :
;Version :
;Date    : 9/26/2021
;Author  :
;Company :
;Comments:
;
;
;Chip type               : ATmega8
;Program type            : Application
;AVR Core Clock frequency: 1.000000 MHz
;Memory model            : Small
;External RAM size       : 0
;Data Stack size         : 256
;*******************************************************/
;
;#include <mega8.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x80
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x70
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x60
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x70
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <tm1638.c>
;//
;// AVR TM1638 "Library" v1.02
;// Enables control of TM1638 chip based modules, using direct port access.
;//
;// Copyright (c) 2013 IronCreek Software
;// All rights reserved.
;//
;// Redistribution and use in source and binary forms, with or without
;// modification, are permitted provided that the following conditions are met:
;//
;// 1. Redistributions of source code must retain the above copyright notice, this
;//    list of conditions and the following disclaimer.
;// 2. Redistributions in binary form must reproduce the above copyright notice,
;//    this list of conditions and the following disclaimer in the documentation
;//    and/or other materials provided with the distribution.
;//
;// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
;// ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
;// WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
;// DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
;// ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
;// (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
;// LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
;// ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
;// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
;// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
;//
;
;#include <io.h>
;#include <delay.h>
;#include "tm1638.h"
;#include "tm1638Font.h"
;	ch -> Y+1
;	rc -> R17
;
;#define TM_CLK_LOW()            (TM_OUT &= ~TM_BIT_CLK)
;#define TM_CLK_HIGH()           (TM_OUT |= TM_BIT_CLK)
;#define TM_STB_LOW()            (TM_OUT &= ~TM_BIT_STB)
;#define TM_STB_HIGH()           (TM_OUT |= TM_BIT_STB)
;#define TM_DAT_LOW()            (TM_OUT &= ~TM_BIT_DAT)
;#define TM_DAT_HIGH()           (TM_OUT |= TM_BIT_DAT)
;
;// Register mappings
;#define REG_MAX                 0x0F
;#define REG_LED_OFFSET          1
;#define LED_TO_REG(p)           (REG_LED_OFFSET + (p << 1))
;
;// Instructions
;#define TM_DATA_CMD             0x40
;#define TM_DISP_CTRL            0x80
;#define TM_ADDR_CMD             0xC0
;
;// Data command set
;#define TM_WRITE_DISP           0x00
;#define TM_READ_KEYS            0x02
;#define TM_FIXED_ADDR           0x04
;
;// Display control command
;#define TM_DISP_PWM_MASK        0x07 // First 3 bits are brightness (PWM controlled)
;#define TM_DISP_ENABLE          0x08
;
;namespace
; 0000 0019 {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
;    void port_setup()
;    {
;PCODE: $0000000F VOL: 0
;        TM_DDR |= TM_BIT_STB | TM_BIT_CLK | TM_BIT_DAT;
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
;        TM_OUT |= TM_BIT_STB | TM_BIT_CLK;
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
;    }
;PCODE: $0000001C VOL: 0
;
;    void send(uint8_t b)
;PCODE: $0000001D VOL: 0
;	b -> R17
;    {
;PCODE: $0000001E VOL: 0
;        for (uint8_t i = 8; i; --i, b >>= 1)
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
;        {
;PCODE: $0000002C VOL: 0
;            TM_CLK_LOW();
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
;            if (b & 1)
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
;                TM_DAT_HIGH();
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
;            else
;PCODE: $0000003A VOL: 0
;                TM_DAT_LOW();
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
;            TM_CLK_HIGH();
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
;        }
;PCODE: $00000044 VOL: 0
;    }
;
;    void send_cmd(const uint8_t cmd)
;	b -> R17
;	cmd -> Y+0
;    {
;PCODE: $00000045 VOL: 0
;        TM_STB_LOW();
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
;        send(cmd);
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
;        TM_STB_HIGH();
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
;    }
;PCODE: $00000051 VOL: 0
;
;    void send_data(const uint8_t addr, const uint8_t data)
;PCODE: $00000052 VOL: 0
;	b -> R17
;	cmd -> Y+1
;	addr -> Y+1
;	uint8_t -> Y+0
;    {
;PCODE: $00000053 VOL: 0
;        send_cmd(TM_DATA_CMD | TM_FIXED_ADDR);
;PCODE: $00000054 VOL: 0
;        TM_STB_LOW();
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
;        send(TM_ADDR_CMD | addr);
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
;        send(data);
;PCODE: $0000005D VOL: 0
;        TM_STB_HIGH();
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
;    }
;PCODE: $00000063 VOL: 0
;
;    uint8_t receive()
;PCODE: $00000064 VOL: 0
;    {
;PCODE: $00000065 VOL: 0
;        uint8_t rc = 0;
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
;
;        // Change DAT pin to INPUT and enable pull-up
;        TM_DDR &= ~TM_BIT_DAT;
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
;        TM_DAT_HIGH();
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
;
;        for (uint8_t i = 8, b = 1; i; --i, b <<= 1)
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
;        {
;PCODE: $00000084 VOL: 0
;            TM_CLK_LOW();
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
;
;            // Must wait tWAIT for CLK transition
;            _delay_us(1);
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
;
;            if (TM_IN & TM_BIT_DAT)
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
;                rc |= b;
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
;            TM_CLK_HIGH();
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
;        }
;PCODE: $00000097 VOL: 0
;
;        // Disable pull-up and reset pin
;        TM_DDR |= TM_BIT_DAT;
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
;        TM_DAT_LOW();
;PCODE: $0000009C VOL: 0
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
;
;        return rc;
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
;PCODE: $000000A3 VOL: 0
;    }
;
;    uint8_t read_buttons()
;PCODE: $000000A4 VOL: 0
;    {
;PCODE: $000000A5 VOL: 0
;        uint8_t rc = 0;
;PCODE: $000000A6 VOL: 0
;PCODE: $000000A7 VOL: 0
;
;        TM_STB_LOW();
;PCODE: $000000A8 VOL: 0
;PCODE: $000000A9 VOL: 0
;PCODE: $000000AA VOL: 0
;PCODE: $000000AB VOL: 0
;        send(TM_DATA_CMD | TM_READ_KEYS);
;PCODE: $000000AC VOL: 0
;PCODE: $000000AD VOL: 0
;        for(uint8_t bytes = 0; bytes != 4; ++bytes)
;PCODE: $000000AE VOL: 0
;PCODE: $000000AF VOL: 0
;PCODE: $000000B0 VOL: 0
;PCODE: $000000B1 VOL: 0
;PCODE: $000000B2 VOL: 0
;PCODE: $000000B3 VOL: 0
;PCODE: $000000B4 VOL: 0
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 0
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 0
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
;            rc |= receive() << bytes;
;PCODE: $000000BB VOL: 0
;PCODE: $000000BC VOL: 0
;        TM_STB_HIGH();
;PCODE: $000000BD VOL: 0
;PCODE: $000000BE VOL: 0
;PCODE: $000000BF VOL: 0
;PCODE: $000000C0 VOL: 0
;
;        return rc;
;PCODE: $000000C1 VOL: 0
;PCODE: $000000C2 VOL: 0
;PCODE: $000000C3 VOL: 0
;    }
;
;    uint8_t offset_digits(uint32_t num)
;PCODE: $000000C4 VOL: 0
;PCODE: $000000C5 VOL: 0
;	b -> R17
;	cmd -> Y+4
;	addr -> Y+4
;	uint8_t -> Y+3
;	num -> Y+0
;    {
;PCODE: $000000C6 VOL: 0
;        uint8_t digits = 0;
;PCODE: $000000C7 VOL: 0
;PCODE: $000000C8 VOL: 0
;        while (num >= 10)
;PCODE: $000000C9 VOL: 0
;PCODE: $000000CA VOL: 0
;PCODE: $000000CB VOL: 0
;PCODE: $000000CC VOL: 0
;        {
;            num /= 10;
;PCODE: $000000CD VOL: 0
;PCODE: $000000CE VOL: 0
;PCODE: $000000CF VOL: 0
;PCODE: $000000D0 VOL: 0
;            ++digits;
;        }
;PCODE: $000000D1 VOL: 0
;PCODE: $000000D2 VOL: 0
;        return digits;
;PCODE: $000000D3 VOL: 0
;PCODE: $000000D4 VOL: 0
;PCODE: $000000D5 VOL: 0
;PCODE: $000000D6 VOL: 0
;    }
;}
;PCODE: $000000D7 VOL: 0
;
;TM1638::TM1638()
;PCODE: $000000D8 VOL: 0
;PCODE: $000000D9 VOL: 0
;PCODE: $000000DA VOL: 0
;PCODE: $000000DB VOL: 0
;PCODE: $000000DC VOL: 0
;    : _dotMask(0)
;PCODE: $000000DD VOL: 0
;PCODE: $000000DE VOL: 0
;PCODE: $000000DF VOL: 0
;PCODE: $000000E0 VOL: 0
;PCODE: $000000E1 VOL: 0
;PCODE: $000000E2 VOL: 0
;PCODE: $000000E3 VOL: 0
;PCODE: $000000E4 VOL: 0
;PCODE: $000000E5 VOL: 0
;PCODE: $000000E6 VOL: 0
